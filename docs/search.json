[
  {
    "objectID": "realvnc-windows-connect.html",
    "href": "realvnc-windows-connect.html",
    "title": "Connect the Raspberry Pi on Windows Machine",
    "section": "",
    "text": "Note\n\n\n\nReferencing the content in this workshop:\nBulusu, Kartik V. (2024, October 12). Connect, Compute and Communicate! Practical introduction to a DIY internet of things system. [Workshop for the IEEE Northern Virigina Section and IEEE Computer Society]. Department of Mechanical and Aerospace Engineering, The George Washington University."
  },
  {
    "objectID": "realvnc-windows-connect.html#prerequisites",
    "href": "realvnc-windows-connect.html#prerequisites",
    "title": "Connect the Raspberry Pi on Windows Machine",
    "section": "Prerequisites",
    "text": "Prerequisites\nBefore you begin, ensure that you have already installed RealVNC on your Windows machine."
  },
  {
    "objectID": "realvnc-windows-connect.html#establish-a-connection",
    "href": "realvnc-windows-connect.html#establish-a-connection",
    "title": "Connect the Raspberry Pi on Windows Machine",
    "section": "Establish a Connection",
    "text": "Establish a Connection\n\n1. Launch RealVNC Viewer\nLaunch VNC Viewer from Start.\n\n\n\nOpen RealVNC Viewer\n\n\nIf prompted to Log in/Sign Up hit “Cancel”, you’re NOT REQUIRED to sign up.\n\n\n\nDon’t Sign up\n\n\n\n\n2. Connect to a Raspberry Pi\nTo connect to a Raspberry Pi, launch RealVNC Viewer, enter “raspberrypi.local” in the box into the address bar, and hit Enter. You may need to enter the login credentials for the Raspberry Pi.\n\n\n\n\nConnect to the Pi\n\n\n\n\n\n3. Enjoy Remote Desktop Access\nYou are now connected to the Raspberry Pi, and you can control it.\n\n\n\nRemote Connection Successfull\n\n\n\n\n4. Disconnect\nTo disconnect from the Raspberry Pi, simply close the VNC Viewer window."
  },
  {
    "objectID": "realvnc-windows-connect.html#conclusion",
    "href": "realvnc-windows-connect.html#conclusion",
    "title": "Connect the Raspberry Pi on Windows Machine",
    "section": "Conclusion",
    "text": "Conclusion\nYou have successfully established connection to the Pi, allowing you to access and control it with ease.\nFor more information and support, you can visit the RealVNC website."
  },
  {
    "objectID": "thonny-mac.html",
    "href": "thonny-mac.html",
    "title": "Thonny Installation Guide for macOS",
    "section": "",
    "text": "This guide will take you through the step-by-step process of installing Thonny, a user-friendly Python IDE, on your macOS system. Thonny simplifies Python programming and is ideal for learners and developers alike."
  },
  {
    "objectID": "thonny-mac.html#introduction",
    "href": "thonny-mac.html#introduction",
    "title": "Thonny Installation Guide for macOS",
    "section": "",
    "text": "This guide will take you through the step-by-step process of installing Thonny, a user-friendly Python IDE, on your macOS system. Thonny simplifies Python programming and is ideal for learners and developers alike."
  },
  {
    "objectID": "thonny-mac.html#prerequisites",
    "href": "thonny-mac.html#prerequisites",
    "title": "Thonny Installation Guide for macOS",
    "section": "Prerequisites",
    "text": "Prerequisites\nBefore you start, make sure you have the following:\n\nA macOS computer.\nAn active internet connection.\nAdequate disk space for the installation."
  },
  {
    "objectID": "thonny-mac.html#installation-steps",
    "href": "thonny-mac.html#installation-steps",
    "title": "Thonny Installation Guide for macOS",
    "section": "Installation Steps",
    "text": "Installation Steps\n\n1. Visit Thonny’s Official Website\nGo to https://www.thonny.org/ to access Thonny’s official download page.\n\n\n\nVisit Official Website\n\n\n\n\n2. Select the macOS Download Option\nHover your cursor over the “Mac” option in the “Download version…” box and click to initiate the download.\n\n\n\nDownload Thonny\n\n\n\n\n3. Execute the Installer\nLocate the downloaded file, typically in your “Downloads” folder. Double-click the Thonny installer and click “Allow” if prompted.\n\n\n\nRun Installer\n\n\n\n\n4. Confirm Installation\nFollow the on-screen instructions. Click “Continue” and agree to the license agreements.\n\n\n\nFollow the Installation Wizard\n\n\n\n\n\nLicense Agreement\n\n\n\n\n5. Choose Installation Destination\nSelect a destination for installation; the default option is acceptable.\n\n\n\nInstallation Destination\n\n\n\n\n6. Initiate Installation\nClick “Install” and allow the installation process to complete.\n\n\n\nInstall Thonny\n\n\n\n\n7. Grant Folder Access\nIf necessary, click “OK” to allow the installer access to folders.\n\n\n\nFolder Access\n\n\n\n\n8. Completion Confirmation\nClick “Close” to finalize the installation.\n\n\n\nInstallation Complete\n\n\n\n\n9. Optional Cleanup\nConsider moving the installer file to the trash if desired.\n\n\n\n10. Launch Thonny\nThonny is now installed on your computer. Open the Thonny editor by clicking on its icon.\n\n\n\n11. Initial Configuration\nUse the dropdown menu to select default options. Click “Let’s go.”\n\n\n\nInitial Configuration\n\n\n\n\n12. Verification\nConfirm the successful installation by viewing the Thonny screen window.\n\n\n\nVerification"
  },
  {
    "objectID": "thonny-mac.html#conclusion",
    "href": "thonny-mac.html#conclusion",
    "title": "Thonny Installation Guide for macOS",
    "section": "Conclusion",
    "text": "Conclusion\nCongratulations! Thonny is now successfully installed on your macOS system.\nStart coding with Thonny, and if you need more guidance, consult the official documentation at https://docs.thonny.org/.\nFor any issues or questions, feel free to seek assistance from the Thonny community or refer to the documentation for troubleshooting tips."
  },
  {
    "objectID": "resources.html",
    "href": "resources.html",
    "title": "Resources",
    "section": "",
    "text": "Report templates\n\n\n\nGuest Lecture Report\n\n\nDownload: One-page Guest Lecture Summary Template\n\n\nACM Conference Paper Template\n\n\nDownload: Paper Review / Report\n\n\nMidterm Project Proposal\n\n\nDownload: Midterm Project Proposal\n\n\nSource: SmartSheet\n\n\nReference: 7 Steps to Writing the Perfect Project Proposal\n\n\n\n\n\nMarkdown Guide\n\n\n\nThe Markdown Guide is a free and open-source reference guide that explains how to use Markdown, the simple and easy-to-use markup language you can use to format virtually any document.\n\n\nEverything you need to learn Markdown: Click here to access\n\n\n\n\n\nGraphics and data visualization libraries\n\n\n\nFree or Open Source\n\n\nPlotly: https://plotly.com/javascript/\n\n\nstackgl: http://stack.gl\n\n\n\n\n\n\nRibbit Network\n\n\n\nA global network of open-source, low-cost CO2 concentration sensors\n\n\nRibbit Network Click here to access\n\n\nRibbit: Build your own frog sensor Click here to access\n\n\n\n\n\nIoT course hardware resource\n\n\n\nSensor Kits\n\n\nSundounder: Expert-level Kit\n\n\nNote: Raspberry Pi 4B were acquired separately.\n\n\n\n\n\nIoT & Edge Compute video sources\n\n\n\n\nDisclaimer: The instructor has no commercial or personal interest in the companies or individual entities in the videos. These videos showcase IoT and Edge Compute examples for general interest.\n\n\nTalking Tech: Zipcar and iPhone https://www.youtube.com/watch?v=rCO0jFoJ1xY\n\n\nCombining AI, 5G, And Machine Vision To Transform Fish Farming https://youtu.be/PzQ_iWKFsxE\n\n\nWhat Is the Internet of Things and Why Should You Care? | MIT Sloan https://www.youtube.com/watch?v=_l75CrN-hSI\n\n\nWhat is Edge computing? https://www.youtube.com/watch?v=3hScMLH7B4o&t=6s\n\n\n\n\n\nFeatured Python programming video sources\n\n\n\n\nDisclaimer: The instructor has no commercial or personal interest in the companies or individual entities in the videos. These videos showcase programming paradigms for general interest.\n\n\nLogging in Python: https://youtu.be/g8nQ90Hk328\n\n\nExceptions in Python: https://youtu.be/nlCKrKGHSSk\n\n\nPython Classes and Objects: https://youtu.be/apACNr7DC_s\n\n\nPython and Flask - Getting Started with Flask: https://youtu.be/7M1MaAPWnYg\n\n\n\n\n\nBasic Python programming video sources\n\n\n\n\nDisclaimer: The instructor has no commercial or personal interest in the companies or individual entities in the videos. These videos showcase programming paradigms for general interest.\n\n\nWhat is a programming language ?https://www.youtube.com/watch?v=EGQh5SZctaE\n\n\nSequences, Selections, and Loops: https://youtu.be/eSYeHlwDCNA\n\n\nLoops: https://youtu.be/wxds6MAtUQ0\n\n\nfor-loop: https://youtu.be/EfJVnAHiR4s\n\n\n\n\n\n\nReport templates\n\n\n\nDocuments\n\n\nNSF-style proposal template: An NSF proposal template in LaTeX-WTFPL license"
  },
  {
    "objectID": "vscode-windows.html",
    "href": "vscode-windows.html",
    "title": "Visual Studio Code Installation Guide for Windows",
    "section": "",
    "text": "This guide will walk you through the process of installing Visual Studio Code (VS Code), a popular and versatile code editor, on your Windows computer. VS Code provides a powerful environment for coding and development across various programming languages."
  },
  {
    "objectID": "vscode-windows.html#introduction",
    "href": "vscode-windows.html#introduction",
    "title": "Visual Studio Code Installation Guide for Windows",
    "section": "",
    "text": "This guide will walk you through the process of installing Visual Studio Code (VS Code), a popular and versatile code editor, on your Windows computer. VS Code provides a powerful environment for coding and development across various programming languages."
  },
  {
    "objectID": "vscode-windows.html#prerequisites",
    "href": "vscode-windows.html#prerequisites",
    "title": "Visual Studio Code Installation Guide for Windows",
    "section": "Prerequisites",
    "text": "Prerequisites\nBefore you begin, ensure you have the following:\n\nA Windows computer.\nAn internet connection.\nAdequate disk space for the installation."
  },
  {
    "objectID": "vscode-windows.html#installation-steps",
    "href": "vscode-windows.html#installation-steps",
    "title": "Visual Studio Code Installation Guide for Windows",
    "section": "Installation Steps",
    "text": "Installation Steps\n\n1. Download Visual Studio Code\nVisit the official VS Code download page at https://code.visualstudio.com/download.\n\n\n2. Choose the Windows Installer\nClick on the “Windows” download link to download the Visual Studio Code installer for Windows.\n\n\n\nDownload VS Code\n\n\n\n\n3. Run the Installer\n\nLocate the downloaded installer file (usually in your “Downloads” folder).\nDouble-click the installer executable (.exe) file to run it.\n\n\n\n\nRun Installer\n\n\n\n\n4. Start the Installation\n\nYou will see the VS Code Setup Wizard. Click the “Next” button to begin the installation.\n\n\n\n\nLicense Agreement\n\n\n\n\n5. Choose Installation Options\n\nSelect the installation location (the default is usually fine) and click “Next.”\n\n\n\n\nInstallation Location\n\n\n\nChoose additional tasks if desired (e.g., adding VS Code to the PATH). Then, click “Next.”\n\n\n\n\nAdditional Tasks\n\n\n\n\n6. Install VS Code\nClick the “Install” button to begin the installation process. This may take a few moments.\n\n\n\nInstall\n\n\n\n\n7. Launch Visual Studio Code\nAfter the installation is complete, you can leave the “Launch Visual Studio Code” option checked and click “Finish.”\n\n\n\nLaunch VS Code\n\n\n\n\n8. Customize VS Code (Optional)\nUpon launching, you can customize Visual Studio Code by installing extensions, themes, and configuring settings to suit your development needs. (Optional)\n\n\n\nCustomize VS Code\n\n\n\n\n9. Open Extensions Tab\nOn the sidebar click on the Extensions tab.\n\n\n\nExtensions tab\n\n\n\n\n10. Search “Python”\nIn the search bar type “Python” and hit Enter.\n\n\n\nSearch Python\n\n\n\n\n11. Install Python Extension\nOn the right panel click on the install button to install the extension.\n\n\n\nInstall Python Extension\n\n\n\n\n12. Open a New File\nFrom the top-right corner click on the three-bars and open a New File.\n\n\n\nOpen New File\n\n\n\n\n13. Open a Jupyter Notebook\nFrom the drop down menu, select “Jupyter Notebook” as the file type.\n\n\n\nOpen Jupyter Notebook"
  },
  {
    "objectID": "vscode-windows.html#conclusion",
    "href": "vscode-windows.html#conclusion",
    "title": "Visual Studio Code Installation Guide for Windows",
    "section": "Conclusion",
    "text": "Conclusion\nCongratulations! You’ve successfully installed Visual Studio Code on your Windows computer. VS Code is now ready for you to use as a powerful code editor for various programming languages.\nFeel free to explore the extensions marketplace and customize VS Code to enhance your coding experience. Happy coding!\nFor more information and documentation on Visual Studio Code, visit https://code.visualstudio.com/docs."
  },
  {
    "objectID": "anaconda-windows.html",
    "href": "anaconda-windows.html",
    "title": "Anaconda Installation Guide for Windows",
    "section": "",
    "text": "This guide will walk you through the process of installing Anaconda, a popular Python distribution, on your Windows computer. Anaconda provides a convenient way to manage Python packages and environments for data science and scientific computing.\n\n\n\nBefore you begin, ensure you have the following:\n\nA Windows computer.\nAn internet connection.\nSufficient disk space for the installation.\n\n\n\n\n\n\nVisit the Anaconda download page at https://www.anaconda.com/download.\n\n\n\nClick on the “Download” button under the Windows section to download the Anaconda installer for Windows.\n\n\n\nDownload Anaconda\n\n\n\n\n\n\nLocate the downloaded file (usually in your “Downloads” folder).\nDouble-click the installer executable (.exe) file to run it.\n\n\n\n\nRun Installer\n\n\n\n\n\n\nFollow the on-screen instructions to begin the installation.\nRead and accept the license agreement when prompted.\n\n\n\n\nRead Me\n\n\n\n\n\nLicense Agreement\n\n\n\nChoose the installation type. It’s recommended to select “Just me” unless you have specific reasons for a different choice.\n\n\n\n\nInstallation Type\n\n\n\nSelect the installation location (the default is usually fine).\n\n\n\n\nInstallation Location\n\n\n\n\n\nClick the “Install” button to begin the installation process. This may take a few minutes.\n\n\n\nInstall\n\n\n\n\n\nOnce the installation is complete, you will see a confirmation message. Click the “Next” button and proceed to finish.\n\n\n\nInstallation Complete\n\n\n\n\n\nClose Installation Wizard\n\n\n\n\n\n\n\n\nDon’t Update\n\n\n\n\n\n\n\n\nDon’t Log in/Sign up\n\n\n\n\n\n\nTo verify the installation launch a local Jupyter Server by clicking on the “launch” button for Jupyter Notebook.\n\n\n\nLaunch Jupyter Server\n\n\nYou should see a Jupyter Notebbok server launched in a browser window.\n\n\n\nJupyter Server Launched\n\n\n\n\n\n\nCongratulations! You’ve successfully installed Anaconda on your Windows computer. You can now use Anaconda to create Python environments, manage packages, and work on data science projects.\nFor more information on using Anaconda, refer to the official documentation at https://docs.anaconda.com/.\nIf you encounter any issues or have questions, don’t hesitate to seek help from the Anaconda community or consult the documentation for troubleshooting tips.\n\n\n\nThis is a Quarto website. To learn more about Quarto websites visit https://quarto.org/docs/websites. Author: Kartik Bulusu Contact: bulusu © 2023 All rights reserved"
  },
  {
    "objectID": "anaconda-windows.html#introduction",
    "href": "anaconda-windows.html#introduction",
    "title": "Anaconda Installation Guide for Windows",
    "section": "",
    "text": "This guide will walk you through the process of installing Anaconda, a popular Python distribution, on your Windows computer. Anaconda provides a convenient way to manage Python packages and environments for data science and scientific computing."
  },
  {
    "objectID": "anaconda-windows.html#prerequisites",
    "href": "anaconda-windows.html#prerequisites",
    "title": "Anaconda Installation Guide for Windows",
    "section": "",
    "text": "Before you begin, ensure you have the following:\n\nA Windows computer.\nAn internet connection.\nSufficient disk space for the installation."
  },
  {
    "objectID": "anaconda-windows.html#installation-steps",
    "href": "anaconda-windows.html#installation-steps",
    "title": "Anaconda Installation Guide for Windows",
    "section": "",
    "text": "Visit the Anaconda download page at https://www.anaconda.com/download.\n\n\n\nClick on the “Download” button under the Windows section to download the Anaconda installer for Windows.\n\n\n\nDownload Anaconda\n\n\n\n\n\n\nLocate the downloaded file (usually in your “Downloads” folder).\nDouble-click the installer executable (.exe) file to run it.\n\n\n\n\nRun Installer\n\n\n\n\n\n\nFollow the on-screen instructions to begin the installation.\nRead and accept the license agreement when prompted.\n\n\n\n\nRead Me\n\n\n\n\n\nLicense Agreement\n\n\n\nChoose the installation type. It’s recommended to select “Just me” unless you have specific reasons for a different choice.\n\n\n\n\nInstallation Type\n\n\n\nSelect the installation location (the default is usually fine).\n\n\n\n\nInstallation Location\n\n\n\n\n\nClick the “Install” button to begin the installation process. This may take a few minutes.\n\n\n\nInstall\n\n\n\n\n\nOnce the installation is complete, you will see a confirmation message. Click the “Next” button and proceed to finish.\n\n\n\nInstallation Complete\n\n\n\n\n\nClose Installation Wizard\n\n\n\n\n\n\n\n\nDon’t Update\n\n\n\n\n\n\n\n\nDon’t Log in/Sign up\n\n\n\n\n\n\nTo verify the installation launch a local Jupyter Server by clicking on the “launch” button for Jupyter Notebook.\n\n\n\nLaunch Jupyter Server\n\n\nYou should see a Jupyter Notebbok server launched in a browser window.\n\n\n\nJupyter Server Launched"
  },
  {
    "objectID": "anaconda-windows.html#conclusion",
    "href": "anaconda-windows.html#conclusion",
    "title": "Anaconda Installation Guide for Windows",
    "section": "",
    "text": "Congratulations! You’ve successfully installed Anaconda on your Windows computer. You can now use Anaconda to create Python environments, manage packages, and work on data science projects.\nFor more information on using Anaconda, refer to the official documentation at https://docs.anaconda.com/.\nIf you encounter any issues or have questions, don’t hesitate to seek help from the Anaconda community or consult the documentation for troubleshooting tips.\n\n\n\nThis is a Quarto website. To learn more about Quarto websites visit https://quarto.org/docs/websites. Author: Kartik Bulusu Contact: bulusu © 2023 All rights reserved"
  },
  {
    "objectID": "realvnc-mac.html",
    "href": "realvnc-mac.html",
    "title": "RealVNC Installation Guide for Mac",
    "section": "",
    "text": "Note\n\n\n\nReferencing the content in this workshop:\nBulusu, Kartik V. (2024, October 12). Connect, Compute and Communicate! Practical introduction to a DIY internet of things system. [Workshop for the IEEE Northern Virigina Section and IEEE Computer Society]. Department of Mechanical and Aerospace Engineering, The George Washington University.\nThis guide will walk you through the process of installing and setting up RealVNC on your Macintosh computer to enable remote desktop access."
  },
  {
    "objectID": "realvnc-mac.html#prerequisites",
    "href": "realvnc-mac.html#prerequisites",
    "title": "RealVNC Installation Guide for Mac",
    "section": "Prerequisites",
    "text": "Prerequisites\nBefore you begin, ensure you meet the following requirements:\n\nA Macintosh computer running a supported version of MacOS (e.g., MacOS 12+).\nInternet access."
  },
  {
    "objectID": "realvnc-mac.html#installation-steps",
    "href": "realvnc-mac.html#installation-steps",
    "title": "RealVNC Installation Guide for Mac",
    "section": "Installation Steps",
    "text": "Installation Steps\n\n\n0. Download the installation file here\n\n\n1. Install RealVNC Viewer:\nLocate the downloaded installer file (usually in your Downloads folder) and double-click on it to start the installation process and click on “Allow” when prompted.\n\n\n\nRun Installer\n\n\n\n\n\n2. Follow Installation Wizard\nThe installation wizard will guide you through the installation process. Move the VNC Viewer to Applications to finish the installation. \n\n\n\nMove VNC Viewer to Applications\n\n\n\n\n\n4. Launch RealVNC Viewer\nOnce the installation is complete, you can launch RealVNC Viewer from Launchpad.\n\n\n\n\nOpen RealVNC from Launchpad\n\n\nIf prompted to Log in/Sign Up hit “Cancel”, you’re NOT REQUIRED to sign up.\n\n\n\nDon’t Sign up"
  },
  {
    "objectID": "realvnc-mac.html#conclusion",
    "href": "realvnc-mac.html#conclusion",
    "title": "RealVNC Installation Guide for Mac",
    "section": "Conclusion",
    "text": "Conclusion\nCongratulations! You have successfully installed RealVNC Viewer on your Macintosh machine, allowing you to access and control remote computers with ease.\nFor more information and support, you can visit the RealVNC FAQa."
  },
  {
    "objectID": "Week4.html",
    "href": "Week4.html",
    "title": "Week-4",
    "section": "",
    "text": "Note\n\n\n\nReferencing this presentation:\nBulusu, Kartik V. (2025, February). Week-4 Presentation: MAE 6291 Internet-of-Things for Engineers. [Course lecture notes, codes and presentations]. Department of Mechanical and Aerospace Engineering, The George Washington University.https://gwu-mae6291-iot.github.io/spring2025/\n\n\n\n\n\n\n\n\nCourse materials developed by Prof. Kartik Bulusu for MAE 6291-Spring 2025 and CSCI 4907-Spring 2024."
  },
  {
    "objectID": "git-mac.html",
    "href": "git-mac.html",
    "title": "Git installation-check Guide for macOS",
    "section": "",
    "text": "This guide will take you through the step-by-step process of checking if Git is installed on your Mac."
  },
  {
    "objectID": "git-mac.html#introduction",
    "href": "git-mac.html#introduction",
    "title": "Git installation-check Guide for macOS",
    "section": "",
    "text": "This guide will take you through the step-by-step process of checking if Git is installed on your Mac."
  },
  {
    "objectID": "git-mac.html#prerequisites",
    "href": "git-mac.html#prerequisites",
    "title": "Git installation-check Guide for macOS",
    "section": "Prerequisites",
    "text": "Prerequisites\nBefore you start, make sure you have the following:\n\nA macOS computer.\nAn active internet connection.\nAdequate disk space for the installation."
  },
  {
    "objectID": "git-mac.html#installation-steps",
    "href": "git-mac.html#installation-steps",
    "title": "Git installation-check Guide for macOS",
    "section": "Installation Steps",
    "text": "Installation Steps\n\n1. Start the Terminal on your Mac\nGo to Spotlight and type terminal.\n\n\n\nClick on Terminal\n\n\n\n\n2. Check what version of Git is installed on your mac\nType the command line as shown in the image to check the installed version of git on your mac.\n\n\n\nType the command line as shown"
  },
  {
    "objectID": "git-mac.html#conclusion",
    "href": "git-mac.html#conclusion",
    "title": "Git installation-check Guide for macOS",
    "section": "Conclusion",
    "text": "Conclusion\nCongratulations! You successfully checked the installed version of Git on your macOS system.\nFor any issues or questions, feel free to seek assistance from your instructor. If Git is not installed on your mac you will need to find instructions on how-to do a homebrew installation for git."
  },
  {
    "objectID": "github-acct.html",
    "href": "github-acct.html",
    "title": "Create a GitHub account)",
    "section": "",
    "text": "This guide will walk you through the process of creating a GitHub account."
  },
  {
    "objectID": "github-acct.html#introduction",
    "href": "github-acct.html#introduction",
    "title": "Create a GitHub account)",
    "section": "",
    "text": "This guide will walk you through the process of creating a GitHub account."
  },
  {
    "objectID": "github-acct.html#prerequisites",
    "href": "github-acct.html#prerequisites",
    "title": "Create a GitHub account)",
    "section": "Prerequisites",
    "text": "Prerequisites\nBefore you begin, ensure you have the following:\n\nAn internet connection.\nCompleted Git installation and version-check."
  },
  {
    "objectID": "github-acct.html#steps-to-create-a-github-account",
    "href": "github-acct.html#steps-to-create-a-github-account",
    "title": "Create a GitHub account)",
    "section": "Steps to create a GitHub account",
    "text": "Steps to create a GitHub account\n\n1. Type https://github.com on your browser - Safari is shown in this example.\n\nClick on the Sign up button!\n\n\n\n\nSign up\n\n\n\n\n2. Enter the email to be associated with your GitHub account\n\nEnter your email and click Continue\n\n\n\n\nEmail entry\n\n\n\n\n3. Enter your password for your GitHub account\n\nEnter your email and click Continue\n\n\n\n\nPassword entry"
  },
  {
    "objectID": "github-acct.html#conclusion",
    "href": "github-acct.html#conclusion",
    "title": "Create a GitHub account)",
    "section": "Conclusion",
    "text": "Conclusion\nCongratulations! You’ve successfully created a GitHub account. You are now ready to create a repo for collecting your files and collaborate with your peer group.\n\n\n\nLogin page\n\n\nFor more information and documentation on GitHub, visit get-started page: https://docs.github.com/en/get-started."
  },
  {
    "objectID": "Week2.html",
    "href": "Week2.html",
    "title": "Week-2",
    "section": "",
    "text": "Note\n\n\n\nReferencing this presentation:\nBulusu, Kartik V. (2025, January). Week-2 Presentation: MAE 6291 Internet-of-Things for Engineers. [Course lecture notes, codes and presentations]. Department of Mechanical and Aerospace Engineering, The George Washington University.https://gwu-mae6291-iot.github.io/spring2025/\n\n\n\n\n\n\n\n\nCourse materials developed by Prof. Kartik Bulusu for MAE 6291-Spring 2025 and CSCI 4907-Spring 2024. Note: Slides cannot be viewed on mobile and handheld devives (such as phones and notebooks)"
  },
  {
    "objectID": "thonny-windows.html",
    "href": "thonny-windows.html",
    "title": "Thonny Installation Guide for Windows",
    "section": "",
    "text": "This guide provides a step-by-step walkthrough for installing Thonny, a user-friendly Python IDE, on your Windows computer. Thonny simplifies Python programming and is suitable for learners and developers."
  },
  {
    "objectID": "thonny-windows.html#introduction",
    "href": "thonny-windows.html#introduction",
    "title": "Thonny Installation Guide for Windows",
    "section": "",
    "text": "This guide provides a step-by-step walkthrough for installing Thonny, a user-friendly Python IDE, on your Windows computer. Thonny simplifies Python programming and is suitable for learners and developers."
  },
  {
    "objectID": "thonny-windows.html#prerequisites",
    "href": "thonny-windows.html#prerequisites",
    "title": "Thonny Installation Guide for Windows",
    "section": "Prerequisites",
    "text": "Prerequisites\nBefore you begin, ensure you have the following:\n\nA Windows computer.\nAn active internet connection.\nAdequate disk space for the installation."
  },
  {
    "objectID": "thonny-windows.html#installation-steps",
    "href": "thonny-windows.html#installation-steps",
    "title": "Thonny Installation Guide for Windows",
    "section": "Installation Steps",
    "text": "Installation Steps\n\n1. Visit Thonny’s Official Website\nGo to https://www.thonny.org/ to access Thonny’s official download page.\n\n\n\nVisit Official Website\n\n\n\n\n2. Select the Windows Download Option\nHover your mouse over the “Windows” option in the “Download version…” box and click to initiate the download.\n\n\n\nDownload Thonny\n\n\n\n\n3. Execute the Installer\nLocate the downloaded file, typically in your “Downloads” folder. Double-click the Thonny installer to run it.\n\n\n\nDownload Thonny\n\n\n\n\n4. Confirm Installation\nClick “Next” to proceed with the installation.\n\n\n\nConfirm Installation\n\n\n\n\n5. Agree to License Agreements\nAccept the license agreements by clicking “Agree.”\n\n\n\nLicense Agreement\n\n\n\n\n6. Choose Installation Location\nSelect a location for installation; the default option is acceptable.\n\n\n\nInstallation Location\n\n\n\n\n7. Select Start Menu Folder\nChoose a start menu folder; the default option is acceptable.\n\n\n\nStart Menu Folder\n\n\n\n\n8. Create Desktop Icon\nOpt to create a desktop icon for easy access. Click “Create Desktop Icon”.\n\n\n\nDesktop Icon\n\n\n\n\n9. Initiate Installation\nClick “Install” to start the installation process.\n\n\n\nInstall Thonny\n\n\n\n\n10. Completion\nOnce the installation is complete, click “Finish.”\n\n\n\nInstallation Complete\n\n\n\n\n11. Optional Cleanup\nConsider moving the installer file to the Recycle bin if desired.\n\n\n\nMove to Recycle bin\n\n\n\n\n12. Launch Thonny\nThonny is now installed on your computer. Open the Thonny editor by clicking on the desktop icon. \n\n\n13. Verification\nConfirm the successful installation by viewing the Thonny screen window.\n\n\n\nVerification"
  },
  {
    "objectID": "thonny-windows.html#conclusion",
    "href": "thonny-windows.html#conclusion",
    "title": "Thonny Installation Guide for Windows",
    "section": "Conclusion",
    "text": "Conclusion\nCongratulations! Thonny is successfully installed on your Windows computer.\nBegin your coding journey with Thonny, and for additional guidance, consult the official documentation at https://docs.thonny.org/.\nIf you encounter any issues or have questions, feel free to seek assistance from the Thonny community or refer to the documentation for troubleshooting tips."
  },
  {
    "objectID": "Week1.html",
    "href": "Week1.html",
    "title": "Week-1",
    "section": "",
    "text": "Note\n\n\n\nReferencing this presentation:\nBulusu, Kartik V. (2025, January). Week-1 Presentation: MAE 6291 Internet-of-Things for Engineers. [Course lecture notes, codes and presentations]. Department of Mechanical and Aerospace Engineering, The George Washington University.https://gwu-mae6291-iot.github.io/spring2025/\n\n\n\n\n\n\n\n\nCourse materials developed by Prof. Kartik Bulusu for MAE 6291-Spring 2025 and CSCI 4907-Spring 2024. Note: Slides cannot be viewed on mobile and handheld devives (such as phones and notebooks)"
  },
  {
    "objectID": "vscode-mac.html",
    "href": "vscode-mac.html",
    "title": "Visual Studio Code Installation Guide for macOS",
    "section": "",
    "text": "This guide will walk you through the process of installing Visual Studio Code (VS Code), a popular and versatile code editor, on your macOS computer. VS Code provides a powerful environment for coding and development across various programming languages."
  },
  {
    "objectID": "vscode-mac.html#introduction",
    "href": "vscode-mac.html#introduction",
    "title": "Visual Studio Code Installation Guide for macOS",
    "section": "",
    "text": "This guide will walk you through the process of installing Visual Studio Code (VS Code), a popular and versatile code editor, on your macOS computer. VS Code provides a powerful environment for coding and development across various programming languages."
  },
  {
    "objectID": "vscode-mac.html#prerequisites",
    "href": "vscode-mac.html#prerequisites",
    "title": "Visual Studio Code Installation Guide for macOS",
    "section": "Prerequisites",
    "text": "Prerequisites\nBefore you begin, ensure you have the following:\n\nA macOS computer.\nAn internet connection.\nAdequate disk space for the installation."
  },
  {
    "objectID": "vscode-mac.html#installation-steps",
    "href": "vscode-mac.html#installation-steps",
    "title": "Visual Studio Code Installation Guide for macOS",
    "section": "Installation Steps",
    "text": "Installation Steps\n\n1. Download Visual Studio Code\nVisit the official VS Code download page at https://code.visualstudio.com/download.\n\n\n2. Choose the macOS Installer\nClick on the “macOS” download link to download the Visual Studio Code for macOS.\n\n\n\nDownload VS Code\n\n\n\n\n\nAllow Download\n\n\n\n\n3. Install Visual Studio Code\n\nLocate the downloaded file (usually in your “Downloads” folder).\nDouble-click the VS Code disk image (.dmg) file to open it.\n\n\n\n\nLocate file\n\n\n\n\n\nOpen DMG\n\n\n\n\n\n4. Launch Visual Studio Code\nOpen your “Launchpad” and locate the “Visual Studio Code” application. Double-click it to launch the editor.\n\n\n\nLaunch VS Code\n\n\n\n\n5. Customize VS Code (Optional)\nUpon launching, you can customize Visual Studio Code by installing extensions, themes, and configuring settings to suit your development needs. (Optional)\n\n\n\nCustomize VS Code\n\n\n\n\n6. Open Extensions Tab\nOn the sidebar click on the Extensions tab.\n\n\n\nExtensions tab\n\n\n\n\n7. Select “Python” Extension\nUnder the “Popular” select “Python”.\n\n\n\nSearch Python\n\n\n\n\n8. Install Python Extension\nOn the right panel click on the install button to install the extension.\n\n\n\nInstall Python Extension\n\n\n\n\n9. Open a New File\nClick on the File tab from the toolbar and open a New File.\n\n\n\nOpen New File\n\n\n\n\n10. Open a Jupyter Notebook\nFrom the drop down menu, select “Jupyter Notebook” as the file type.\n\n\n\nOpen Jupyter Notebook"
  },
  {
    "objectID": "vscode-mac.html#conclusion",
    "href": "vscode-mac.html#conclusion",
    "title": "Visual Studio Code Installation Guide for macOS",
    "section": "Conclusion",
    "text": "Conclusion\nCongratulations! You’ve successfully installed Visual Studio Code on your macOS computer. VS Code is now ready for you to use as a powerful code editor for various programming languages.\nFeel free to explore the extensions marketplace and customize VS Code to enhance your coding experience. Happy coding!\nFor more information and documentation on Visual Studio Code, visit https://code.visualstudio.com/docs."
  },
  {
    "objectID": "instructor.html#prof.-kartik-bulusu-instructor",
    "href": "instructor.html#prof.-kartik-bulusu-instructor",
    "title": "Instructor",
    "section": "Prof. Kartik Bulusu (Instructor)",
    "text": "Prof. Kartik Bulusu (Instructor)\n\n\n\nProf. Kartik V. Bulusu is an Associate Research Professor in the Department of Mechanical and Aerospace Engineering at The George Washington University, Washington DC.\nHe designed taught a cross-disciplinary course titled, Internet of Things (IoT) and Edge Computing with applications in cyber-physical systems and speech processing.\nIn addition, he developed courses for first year engineering students on the engineering applications of Raspberry Pi, Python programming and mobile App development inspired by social innovation potential during the COVID-19 pandemic.\nHis research interests span the areas of human health and sustainable energy with focus on mechanics of biological fluids, low-cost energy technologies and applications of wavelet transforms. His current research work on biofluid dynamics of the cardiovasculature, rheology of biological fluids and applications of wavelet transforms has been supported by NSF and the Center for Biomimetics and Bioinspired Engineering (CBBE), GWU.\nHe developed a wavelet transform-based computational code (PIVlet) for the analysis of complex vortical patterns encountered in arterial blood flow. He has extensive knowledge of experimental fluid mechanics and non-invasive measurement techniques such as laser Doppler velocimetry (LDV), particle image velocimetry (PIV), schlieren imagery, magnetic resonance velocimetry (MRV) and molecular tagging velocimetry (MTV). Dr. Bulusu was recognized with the ASME Best Paper Award by the Advanced Energy Systems Division (AESD) Heat Pump Technical Committee and William and Louise Corcoron Award for contributing to the intellectual and social life of the School of Engineering and Applied Science, GWU.\n\n\n  Campus Address: SEH 4614\nEmail: bulusu at email dot gwu dot edu"
  },
  {
    "objectID": "instructor.html#vishnu-gajula-teaching-assistant",
    "href": "instructor.html#vishnu-gajula-teaching-assistant",
    "title": "Instructor",
    "section": "Vishnu Gajula (Teaching Assistant)",
    "text": "Vishnu Gajula (Teaching Assistant)\n\n\n\nI am Vishnu Gajula, a dedicated engineering professional currently pursuing my second master’s degree in Industrial/Engineering Management at The George Washington University. My academic journey began with a Bachelor of Technology in Mechanical Engineering, followed by a Master of Technology in Manufacturing Systems from Jawaharlal Nehru Technological University in Hyderabad, India.\nThroughout my career, I’ve gained valuable industry experience through roles at JSW Steel USA as an Industrial Mechanical Engineer and JSW Cements as a Cement Production Logistics Intern, where I developed expertise in project coordination, design optimization, and process improvement. My technical skills include 3D modeling, prototyping, CNC machining, and various engineering software tools. Currently, as a Graduate Assistant at The George Washington University, I am expanding my capabilities by combining technical expertise with management skills, preparing myself for future leadership roles in the engineering industry.\n\n\n  \nEmail: vishnu dot gajula at email dot gwu dot edu"
  },
  {
    "objectID": "python3-windows.html",
    "href": "python3-windows.html",
    "title": "Installing Python on Windows",
    "section": "",
    "text": "Before you begin, ensure you have the following:\n\nA Windows computer.\nAn internet connection.\nAdequate disk space for the installation."
  },
  {
    "objectID": "python3-windows.html#prerequisites",
    "href": "python3-windows.html#prerequisites",
    "title": "Installing Python on Windows",
    "section": "",
    "text": "Before you begin, ensure you have the following:\n\nA Windows computer.\nAn internet connection.\nAdequate disk space for the installation."
  },
  {
    "objectID": "python3-windows.html#step-1-download-and-install-python",
    "href": "python3-windows.html#step-1-download-and-install-python",
    "title": "Installing Python on Windows",
    "section": "Step 1: Download and Install Python",
    "text": "Step 1: Download and Install Python\n\nVisit the official Python website: https://www.python.org/downloads/windows/.\nDownload the latest version of Python for Windows by clicking on the “Download Windows installer” button.\nOpen the downloaded installer (e.g., python-X.Y.Z-amd64.exe), where X.Y.Z represents the Python version, and follow the installation instructions. Make sure to check the box that says “Add Python X.Y to PATH.”"
  },
  {
    "objectID": "python3-windows.html#step-2-verify-python-installation",
    "href": "python3-windows.html#step-2-verify-python-installation",
    "title": "Installing Python on Windows",
    "section": "Step 2: Verify Python Installation",
    "text": "Step 2: Verify Python Installation\nTo ensure that Python is installed correctly, open your Command Prompt and run the following command:\npython --version\nThis command will display the Python version, confirming that it’s successfully installed."
  },
  {
    "objectID": "python3-windows.html#step-3-install-jupyter-notebook",
    "href": "python3-windows.html#step-3-install-jupyter-notebook",
    "title": "Installing Python on Windows",
    "section": "Step 3: Install Jupyter Notebook",
    "text": "Step 3: Install Jupyter Notebook\nTo install Jupyter Notebook, open your Command Prompt and run the following command:\npip install jupyter\nThis command will download and install Jupyter Notebook, a powerful tool for interactive Python development."
  },
  {
    "objectID": "python3-windows.html#step-4-find-the-path-to-python-scripts-folder",
    "href": "python3-windows.html#step-4-find-the-path-to-python-scripts-folder",
    "title": "Installing Python on Windows",
    "section": "Step 4: Find the Path to Python Scripts Folder",
    "text": "Step 4: Find the Path to Python Scripts Folder\nTo locate the path to the Python scripts folder through the Command Prompt, follow these steps:\n\nOpen your Command Prompt.\nRun the following command to find the Python scripts folder:\n\npython -m site --user-site\nThis command will display the path to your user-specific Python libraries, including the scripts folder."
  },
  {
    "objectID": "python3-windows.html#step-5-configure-python-bin-path",
    "href": "python3-windows.html#step-5-configure-python-bin-path",
    "title": "Installing Python on Windows",
    "section": "Step 5: Configure Python Bin Path",
    "text": "Step 5: Configure Python Bin Path\nNow that you have the path to the Python scripts folder, you can set up the Python bin path and add it to your system environment variables. Follow these steps:\n\nOpen the Start menu and search for “Environment Variables.”\nClick on “Edit the system environment variables.”\nIn the System Properties window, click the “Environment Variables” button.\nUnder the “System Variables” section, find and select the “Path” variable, then click the “Edit” button.\nClick “New” and add the path to your Python scripts folder that you obtained in Step 4.\nClick “OK” to save the changes."
  },
  {
    "objectID": "python3-windows.html#step-6-launch-jupyter-notebook",
    "href": "python3-windows.html#step-6-launch-jupyter-notebook",
    "title": "Installing Python on Windows",
    "section": "Step 6: Launch Jupyter Notebook",
    "text": "Step 6: Launch Jupyter Notebook\nTo start Jupyter Notebook, open your Command Prompt and run the following command:\njupyter notebook\nThis command will launch the Jupyter Notebook in your default web browser, allowing you to create and run Python notebooks for interactive coding and data analysis.\nConclusion You have successfully installed Python, configured the user-specific Python bin path, and set up your system environment variables on your Windows system. You can now use Jupyter Notebook for interactive coding and data analysis.\nHappy coding!\n\n\n\nThis is a Quarto website. To learn more about Quarto websites visit https://quarto.org/docs/websites. Author: Kartik Bulusu Contact: bulusu © 2023 All rights reserved"
  },
  {
    "objectID": "thingspeak.html",
    "href": "thingspeak.html",
    "title": "Creating a ThingSpeak Account",
    "section": "",
    "text": "Note\n\n\n\nReferencing the content in this workshop:\nBulusu, Kartik V. (2024, October 12). Connect, Compute and Communicate! Practical introduction to a DIY internet of things system. [Workshop for the IEEE Northern Virigina Section and IEEE Computer Society]. Department of Mechanical and Aerospace Engineering, The George Washington University."
  },
  {
    "objectID": "thingspeak.html#steps-to-create-your-thingspeak-account",
    "href": "thingspeak.html#steps-to-create-your-thingspeak-account",
    "title": "Creating a ThingSpeak Account",
    "section": "Steps to Create Your ThingSpeak Account",
    "text": "Steps to Create Your ThingSpeak Account\nThingSpeak is a platform for the Internet of Things (IoT) that allows you to collect, analyze, and visualize data from sensors. Follow these steps to create your account:\n\n1. Access the MathWorks Sign-In Page\nNavigate to the MathWorks sign-in page. You’ll see a form similar to this:\n\n\n\nMathWorks sign-in page\n\n\n\n\n2. Create a New Account\nIf you don’t have an account, click on “Create one!” to start the account creation process.\n\n\n\nCreate MathWorks Account\n\n\nFill in your details, including your email address, location, and name.\n\n\n3. Use Your Work or University Email\nFor accessing your organization’s MATLAB license, it’s recommended to use your work or university email.\n\n\n\nPersonal Email Detected\n\n\nIf you entered a personal email, you may see a warning. You can choose to continue with your personal email or switch to a work/university email.\n\n\n4. Verify Your Email\nAfter submitting your information, you’ll need to verify your email address.\n\n\n\nVerify Your MathWorks Account\n\n\nCheck your inbox for the verification email and follow the link provided.\n\n\n5. Complete Your Profile\nThe final step is to set up your password and accept the terms of service.\n\n\n\nFinish Your Profile\n\n\nCreate a strong password and make sure to check the box to accept the Online Services Agreement.\n\n\n6. Access ThingSpeak\nOnce your MathWorks account is set up, you can use these credentials to log into ThingSpeak and start your IoT projects!\nRemember, ThingSpeak offers powerful tools for data aggregation and analytics, allowing you to connect smart devices and develop algorithms for sensor analytics using MATLAB."
  },
  {
    "objectID": "Week4-JitishKolanjery-Google-Lecture.html",
    "href": "Week4-JitishKolanjery-Google-Lecture.html",
    "title": "Week-4: Jitish Kolanjery’s Guest Lecture",
    "section": "",
    "text": "This presentation for internal viewing and referencing only. Redistribution of the presentation is not permitted.\nKolanjery, Jitish (2025, February 12). Protocol for point-to-point communication between two devices, MAE6291: Internet of Things for Engineers. Department of Mechanical and Aerospace Engineering, The George Washington University.https://gwu-mae6291-iot.github.io/spring2025/"
  },
  {
    "objectID": "Week4-JitishKolanjery-Google-Lecture.html#presentation-slide-deck",
    "href": "Week4-JitishKolanjery-Google-Lecture.html#presentation-slide-deck",
    "title": "Week-4: Jitish Kolanjery’s Guest Lecture",
    "section": "Presentation slide deck",
    "text": "Presentation slide deck\n\n\n\n\n\n\nThis presentation was made by Jitish Kolanjery, Senior Software Engineer, Google Inc., for MAE 6291-Spring 2025."
  },
  {
    "objectID": "Week4-JitishKolanjery-Google-Lecture.html#video-recording",
    "href": "Week4-JitishKolanjery-Google-Lecture.html#video-recording",
    "title": "Week-4: Jitish Kolanjery’s Guest Lecture",
    "section": "Video recording",
    "text": "Video recording\n\n\n\n\n\n\nThis is a recording of the presentation was made by Jitish Kolanjery, Senior Software Engineer, Google Inc., for MAE 6291-Spring 2025."
  },
  {
    "objectID": "realvnc-mac-connect.html",
    "href": "realvnc-mac-connect.html",
    "title": "Connect the Raspberry Pi on Macintosh machine",
    "section": "",
    "text": "Note\n\n\n\nReferencing the content in this workshop:\nBulusu, Kartik V. (2024, October 12). Connect, Compute and Communicate! Practical introduction to a DIY internet of things system. [Workshop for the IEEE Northern Virigina Section and IEEE Computer Society]. Department of Mechanical and Aerospace Engineering, The George Washington University."
  },
  {
    "objectID": "realvnc-mac-connect.html#prerequisites",
    "href": "realvnc-mac-connect.html#prerequisites",
    "title": "Connect the Raspberry Pi on Macintosh machine",
    "section": "Prerequisites",
    "text": "Prerequisites\nBefore you begin, ensure that you have already installed RealVNC on your Mac."
  },
  {
    "objectID": "realvnc-mac-connect.html#establish-a-connection",
    "href": "realvnc-mac-connect.html#establish-a-connection",
    "title": "Connect the Raspberry Pi on Macintosh machine",
    "section": "Establish a Connection",
    "text": "Establish a Connection\n\n1. Launch RealVNC Viewer\nLaunch VNC Viewer from the Launchpad.\n\n\n\nOpen RealVNC Viewer\n\n\nIf prompted to Log in/Sign Up hit “Cancel”, you’re NOT REQUIRED to sign up.\n\n\n\nDon’t Sign up\n\n\n\n\n2. Connect to a Raspberry Pi\nTo connect to a Raspberry Pi, launch RealVNC Viewer, enter the “raspberrypi.local” on the box into the address bar, and hit Enter. You may need to enter the login credentials for the Raspberry Pi.\n\n\n\n\nConnect to the Pi\n\n\n\n\n\n3. Enjoy Remote Desktop Access\nYou are now connected to the Raspberry Pi, and you can control it.\n\n\n\nRemote Connection Successfull\n\n\n\n\n4. Disconnect\nTo disconnect from the Raspberry Pi, simply close the VNC Viewer window."
  },
  {
    "objectID": "realvnc-mac-connect.html#conclusion",
    "href": "realvnc-mac-connect.html#conclusion",
    "title": "Connect the Raspberry Pi on Macintosh machine",
    "section": "Conclusion",
    "text": "Conclusion\nYou have successfully established connection to the Pi, allowing you to access and control it with ease.\nFor more information and support, you can visit the RealVNC website."
  },
  {
    "objectID": "python_primer/python_documentation.html",
    "href": "python_primer/python_documentation.html",
    "title": "Python-Basics",
    "section": "",
    "text": "Note\n\n\n\nReferencing the content on this webpage:\nBulusu, Kartik V. (2025, January). MAE 6291: Internet-of-Things for Engineers. [Course lecture notes, codes and presentations]. Department of Mechanical and Aerospace Engineering, The George Washington University."
  },
  {
    "objectID": "python_primer/unit0/modules/module3.html",
    "href": "python_primer/unit0/modules/module3.html",
    "title": "Module 3: Loops: the for-loop",
    "section": "",
    "text": "By the end of this module, for simple HelloWorld-like programs, you will be able to:\n\nIdentify the new syntactic elements with the basic output-only for-loop.\nDemonstrate ability to mentally trace execution of for-loops.\nProduce desired output using for-loop and print’s.\nDistinguish between count-up and count-down loops.\nUse some nested for-loops with independent variables.\nUse some nested for-loops with dependent conditions.\nIdentify and correct syntax errors related to above objectives.\nDistinguish between syntax errors and debugging."
  },
  {
    "objectID": "python_primer/unit0/modules/module3.html#objectives",
    "href": "python_primer/unit0/modules/module3.html#objectives",
    "title": "Module 3: Loops: the for-loop",
    "section": "",
    "text": "By the end of this module, for simple HelloWorld-like programs, you will be able to:\n\nIdentify the new syntactic elements with the basic output-only for-loop.\nDemonstrate ability to mentally trace execution of for-loops.\nProduce desired output using for-loop and print’s.\nDistinguish between count-up and count-down loops.\nUse some nested for-loops with independent variables.\nUse some nested for-loops with dependent conditions.\nIdentify and correct syntax errors related to above objectives.\nDistinguish between syntax errors and debugging."
  },
  {
    "objectID": "python_primer/unit0/modules/module3.html#an-example",
    "href": "python_primer/unit0/modules/module3.html#an-example",
    "title": "Module 3: Loops: the for-loop",
    "section": "3.0 An example",
    "text": "3.0 An example\nConsider the following program:\ndef print_big_M():  \n    print('*   *')\n    print('** **')\n    print('* * *')\n    print('*   *')\n    print('*   *\\n')\n\ndef print_big_O():  \n    print('*****')\n    print('*   *')\n    print('*   *')\n    print('*   *')\n    print('*****\\n')\n\nprint_big_M()\nprint_big_O()  \nprint_big_O()  # 1st repetition\nprint_big_O()  # 2nd repetition\nprint_big_O()\nprint_big_O()\nprint_big_O()  # 5th repetition - 6 O's in all\nWhat we would like is a way to organize repetition.\nWe will do this using one version (there are many) of the for-loop, one of the most important programming constructs:\ndef print_big_M():  \n    print('*   *')\n    print('** **')\n    print('* * *')\n    print('*   *')\n    print('*   *\\n')\n\ndef print_big_O():  \n    print('*****')\n    print('*   *')\n    print('*   *')\n    print('*   *')\n    print('*****\\n')\n\n\nprint_big_M()\nfor i in range(6):\n    print_big_O()\n\n\n\n\n\n\nExercise 3.1\n\n\n\nType up the above in animal_sounds_loop.py and run it. Also save the file so that it can be submitted (You will need to save the appropriate files for every such “type up” exercise).\n\n\n\n\n\n\n\n\nExercise 3.2\n\n\n\nUsing the example above as a point of reference, print out your own animal sound. Be sure to use a for-loop to repeatedly print one letter in the sound. Write your code in my_pet_sound_loop.py.\n\n\nLet’s zoom in on the for-loop and examine it.\nTo do so, we’ll write a different for-loop:\nfor i in range(6):\n    print(i)\n\n\n\n\n\n\nExercise 3.3\n\n\n\nType up the above in my_forloop_example.py and run it. You should observe this:\n0\n1\n2\n3\n4\n5\nIn the place in the code where you see the number 6, replace 6 with 10 and then run the program. Next, try 2 instead of 6. Finally, try 0 instead of 6. What is the output in each case? Discuss the program with your TA to understand what happens when you replace the number 6 with 10 and 2. Submit your working program with the value 6 as the parameter in range() function in the for loop.\n\n\nLet’s now examine elements of the loop: - There’s the special word for \n\nThen, there’s the for-loop variable \nThe special word \nThe element that controls the spread of different values that variable i takes on at each iteration of the loop: \nThe colon at the end: \nFinally, the block of code (in this case, just one line) that’s called the body of the loop: \n\nLet’s change the program slightly and then set about explaining how the loop works:\nfor i in range(6):\n    print(i)\n    print('Hello')\n\n\n\n\n\n\nExercise 3.4\n\n\n\nType up the above in my_forloop_example2.py and run the program.\n\n\nObserve that the body of this for-loop has two statements: \nLet’s now use a slightly fictionalized way to explain the action of this loop:\n\nThink of the Python part of your computer (since your laptop does many things) as reading your program and then carrying out the instructions.\nWhen it encounters the for word, it says “Ah, here’s a for-loop”.\nThen it sees the variable i and says (to itself), “This is the variable whose value will change after each iteration”.\nThen it sees the term range(6) and says “Oh, i will start at 0 and end just before 6, which means it will be 0 in the first iteration, 1 in the second, 2 in the third, 3 in the fourth, 4 in the fifth, 5 in the last”.\nThen, it starts executing the body of the loop for the first iteration:\n\nFor the first iteration, i=0.\nThe entire body of the loop executes with i being replaced by 0: \nFor the second iteration, i=1 \nThird iteration: \nFourth iteration: \nFifth iteration: \nSixth and final iteration: \n\nNow the for-loop is done and the execution goes past the whole for-loop to whatever’s there.\n\nIn this case, there’s no other code and the program completes."
  },
  {
    "objectID": "python_primer/unit0/modules/module3.html#variations",
    "href": "python_primer/unit0/modules/module3.html#variations",
    "title": "Module 3: Loops: the for-loop",
    "section": "3.1 Variations",
    "text": "3.1 Variations\nTo explore for-loops further, we’ll look at some variations of the basic for-loop:\n1. First, we could have named our for-loop variable\nfor count in range(6):\n    print(count)\n\n\n\n\n\n\nNote\n\n\n\nIt’s customary to use short variable names like i and j\n\n\n2. To go through a loop five times, any range of numbers will do:\nfor i in range(10, 16):\n    print(i)\n\n\n\n\n\n\nNote\n\n\n\n\nHere, the range feature has both a starting value (10) and just-after-ending value (16) specified.\nThis will print the numbers 10 through 15.\n\n\n\n3. We don’t have to increment the for-loop variable by 1.\nfor i in range(10, 16, 2):\n    print(i)\n\nThis prints the numbers 10, 12, 14.\nThe number 2 in range(10, 16, 2) specifies an increment amount.\nThus, we start with i taking the value 10 in the first iteration.\nIn the second iteration, i becomes 12 (because 10+2 = 12).\nIn the third iteration, i becomes 14 (incrementing 12 by 2).\nIf we were to increment 14 by 2 it becomes 16 which is past the last value allowed.\nImportant: think of 16 as “the variable cannot have this value or anything past this value”.\n\n4. We can decrement, as in:\nfor i in range(16, 10, -1):\n    print(i)\n\nThis will print 16, 15, 14, 13, 12, 11.\nWe start with 16 (the first part of the range).\nAfter each iteration we apply the increment/decrement amount.\nIn this case, applying -1 to 16 gives us 15, which gets printed.\nThen, the third time through, i becomes 14. And so on.\nIn the last iteration, i becomes 11.\nFinally, when i is decremented to 10, the loop is ended.\n\n\n\n\n\n\n\nExercise 3.6\n\n\n\nType up the above four examples in my_forloop_variation1.py, my_forloop_variation2.py, my_forloop_variation3.py, and my_forloop_variation4.py. Run to confirm the output.\n\n\n\n\n\n\n\n\nExercise 3.7\n\n\n\nIn count_odd_up.py, write a loop to print the odd numbers from 1 to 25 (thus, skipping by 2, and including 1 and 25 in the output).\n\n\n\n\n\n\n\n\nExercise 3.8\n\n\n\nIn count_even_down.py, write a loop to print the even numbers from 24 down to 2 (inclusive of 24 and 2)."
  },
  {
    "objectID": "python_primer/unit0/modules/module3.html#nested-for-loops",
    "href": "python_primer/unit0/modules/module3.html#nested-for-loops",
    "title": "Module 3: Loops: the for-loop",
    "section": "3.2 Nested for-loops",
    "text": "3.2 Nested for-loops\nWe’ll start by writing a program to print a little number triangle like this:\n1\n22\n333\n4444\nNotice: there’s repetition across a row of numbers: a potential use of for-loops!\nWe’ll do this in stages, starting with this program:\nprint(1)               # print 1 all by itself\n\nfor i in range(2):     # i will start at 0, go up to 1\n    print(2, end='')\nprint()                # Print nothing but go to the next line.\n\nfor i in range(3):     # i ranges from 0 to 2\n    print(3, end='')\nprint()\n\nfor i in range(4):     # i ranges from 0 to 3\n    print(4, end='')\nprint()\nObserve:\n\nWe’ve used end='' (two single quotes in succession) to avoid printing each number on a single line.\nOne could use two double quotes in succession as well.\nprint() merely goes to the next line. (Or, stated differently, ends the current line being printed.)\n\n\n\n\n\n\n\nExercise 3.10\n\n\n\nAdd a row for 5 (with five of them), writing your code in my_forloop_print.py.\n\n\n\n\n\n\n\n\nExercise 3.11\n\n\n\nJust for the heck of it, could one use a for-loop to achieve the printing of 1 all by itself? That is, can a for-loop be set up so that you go into it exactly once? Write you code in my_forloop_print2.py\n\n\nNext, observe that the upper-limits of the for-loops are themselves increasing: \nAlso, observe that the very thing we’re printing across a row is the loop limit itself: \nAnother way to say this: \n\nWhen the value is 2, print a row of two 2’s When the value is 3, print a row of three 3’s When the value is 4, print a row of four 4’s\n\n\nThus, we could try to do is:\nfor j in range(2, 5):   # let j iterate from 2 to 4\n    # print j occurences of j using a loop\nBut we already know how to print a row of j’s:\nfor j in range(2, 5):   # let j iterate from 2 to 4\n    # print a row of j's (j of them)\n    for i in range (j):\n        print(j, end='')\nLet’s put this together in a complete program:\nprint(1)                   # print 1 all by itself\n\nfor j in range(2, 5):      # j iterates from 2 to 4\n    for i in range(j):     # for each j, print j of them\n        print(j, end='')\n    print()    \n\n\n\n\n\n\nExercise 3.13\n\n\n\nChange the program to print a fifth row with five 5’s. Also adjust the for-loop so that the for-loop also takes care of printing the sole 1 that appears in the row of the sole 1’s. That is, adjust the for-loop conditions so that you don’t need the stand-alone print(1) to print 1. Write your code in my_forloop_print3.py.\n\n\nLet’s review what we learned above:\n\nThe outer loop variable’s value is used in the inner loop: \nConsider a single iteration of the outer-loop (e.g., when j is 3). \n\nFor this value of j, the inner loop executes j times.\nThus, when j is 3, the inner loop has 3 iterations.\n\nThis is an example of a nested for-loop in which the inner loop’s execution depends on the value of the outer-loop variable.\nAnother way to say it: a nested for-loop has one for-loop inside another.\nWe will use nesting in other contexts as well, when one structure is placed inside another."
  },
  {
    "objectID": "python_primer/unit0/modules/module0.html",
    "href": "python_primer/unit0/modules/module0.html",
    "title": "Module 0: Your First Program",
    "section": "",
    "text": "By the end of this module you will be able to:\n\nExperince writing a really simple program.\nExplain the difference between command-line outputs vs GUI for programs.\n\n\n\nLets take a look at our first program as it appears in a textbook (like this one):\nprint(\"Hello World\")\nThis is a simple program written in the Python programming language, possibly one of the smallest programs one can write, and a traditional starting point for learning programming.\nWe will very soon (below) write this program ourselves.\nFor now, let’s point out a few things:\n\nWhat we see above is the text of the program. \nThe entire program will appear inside of a code editor when we write.\nWe could use one of several code editors.\nFor example, this is how it would look inside the Spyder code editor: \nAnd how it might look in the Thonny code editor: \nVarious editors colorize in different ways for convenience of reading, none of which affect the actual text of the program.\nApart from typing it in (which you’ll do shortly), we haven’t actually run the program.\nIntuitively, just looking at the program we might think that:\n\nIt has to do with some kind of “printing” (because we see print)\nWe have no idea what is meant by the somewhat odd phrase “Hello World!”, but we see it there.\n\nThere are several ways to run a program:\n\nRun the program inside the very same editor used to type in the program.\nRun it without any editor (a slightly advanced topic).\n\nFor example, if we run the program using the Thonny editor, we will see this: \n\nNext, you will try this yourself.\n\n\n\n\n\n\nExercise 0.1\n\n\n\nWrite and run the helloworld program by following these instructions, save it and submit it as test.py in your module0.zip.\n\n\nSo, what’s with printing the unusual phrase “Hello World!”?\n\nIt’s a tradition in computer science that your first program will print “Hello World!”.\nIt’s meant to pretend that a program is a creature that’s itself communicating to the outside world by saying hello.\n\n\n\n\n\nWe will now spend a bit of time trying a few variations, and also examining what happens when typing mistakes are made.\nConsider this program:\nprint('Hello World!')\nprint('My name is X')\n\n\n\n\n\n\nExercise 0.3\n\n\n\nType up this program but use your own name instead of X. Save the file in the module0 folder as myname.py.\n\n\n\n\n\n\n\n\nNote\n\n\n\nIn the future we will be asking you to “type up” programs; in all such cases, please also save the file (for eventual submission)"
  },
  {
    "objectID": "python_primer/unit0/modules/module0.html#objectives",
    "href": "python_primer/unit0/modules/module0.html#objectives",
    "title": "Module 0: Your First Program",
    "section": "",
    "text": "By the end of this module you will be able to:\n\nExperince writing a really simple program.\nExplain the difference between command-line outputs vs GUI for programs.\n\n\n\nLets take a look at our first program as it appears in a textbook (like this one):\nprint(\"Hello World\")\nThis is a simple program written in the Python programming language, possibly one of the smallest programs one can write, and a traditional starting point for learning programming.\nWe will very soon (below) write this program ourselves.\nFor now, let’s point out a few things:\n\nWhat we see above is the text of the program. \nThe entire program will appear inside of a code editor when we write.\nWe could use one of several code editors.\nFor example, this is how it would look inside the Spyder code editor: \nAnd how it might look in the Thonny code editor: \nVarious editors colorize in different ways for convenience of reading, none of which affect the actual text of the program.\nApart from typing it in (which you’ll do shortly), we haven’t actually run the program.\nIntuitively, just looking at the program we might think that:\n\nIt has to do with some kind of “printing” (because we see print)\nWe have no idea what is meant by the somewhat odd phrase “Hello World!”, but we see it there.\n\nThere are several ways to run a program:\n\nRun the program inside the very same editor used to type in the program.\nRun it without any editor (a slightly advanced topic).\n\nFor example, if we run the program using the Thonny editor, we will see this: \n\nNext, you will try this yourself.\n\n\n\n\n\n\nExercise 0.1\n\n\n\nWrite and run the helloworld program by following these instructions, save it and submit it as test.py in your module0.zip.\n\n\nSo, what’s with printing the unusual phrase “Hello World!”?\n\nIt’s a tradition in computer science that your first program will print “Hello World!”.\nIt’s meant to pretend that a program is a creature that’s itself communicating to the outside world by saying hello.\n\n\n\n\n\nWe will now spend a bit of time trying a few variations, and also examining what happens when typing mistakes are made.\nConsider this program:\nprint('Hello World!')\nprint('My name is X')\n\n\n\n\n\n\nExercise 0.3\n\n\n\nType up this program but use your own name instead of X. Save the file in the module0 folder as myname.py.\n\n\n\n\n\n\n\n\nNote\n\n\n\nIn the future we will be asking you to “type up” programs; in all such cases, please also save the file (for eventual submission)"
  },
  {
    "objectID": "python_primer/unit0/modules/module5.html",
    "href": "python_primer/unit0/modules/module5.html",
    "title": "Module 5: Strings and Characters",
    "section": "",
    "text": "By the end of this module, for simple HelloWorld-like programs, you will be able to:\n\nWrite simple code that works with strings and characters (letters, digits, symbols like $)\nIdentify some syntax errors related to characters and strings.\nHave some stress relieving fun after that long integer module."
  },
  {
    "objectID": "python_primer/unit0/modules/module5.html#objectives",
    "href": "python_primer/unit0/modules/module5.html#objectives",
    "title": "Module 5: Strings and Characters",
    "section": "",
    "text": "By the end of this module, for simple HelloWorld-like programs, you will be able to:\n\nWrite simple code that works with strings and characters (letters, digits, symbols like $)\nIdentify some syntax errors related to characters and strings.\nHave some stress relieving fun after that long integer module."
  },
  {
    "objectID": "python_primer/unit0/modules/module5.html#strings",
    "href": "python_primer/unit0/modules/module5.html#strings",
    "title": "Module 5: Strings and Characters",
    "section": "5.0 Strings",
    "text": "5.0 Strings\nAbout strings:\n\nWe have already seen examples of strings, as in:\nprint('Hello')\nHere, whatever is in between the quotes is treated as one thing: a sequence of letters, digits or symbols.\nHere are examples with digits, symbols and spaces:\nprint(\"Hello there. I'm on my way to 123 Main Street\")\nprint(\"#@%&! I'm late!\")\nThe entire sequence of letters, digits, punctuation etc from the H in Hello to the t in Street is one string.\nAnd you already know that “#@%&!” translates to “Drat!”\n\nJust like integer values can be placed in variables, we can do the same with strings:\n\nExample:\ns = 'The quick brown fox jumps over the lazy dog'\nprint(s)\nHere, the variable s has the string 'The quick brown fox jumps over the lazy dog'\nIf you’re wondering how a variable (we used a box as an analogy) can fit so many letters, that is a somewhat advanced topic.\nFor now, let’s proceed with the notion that we can do this.\n\nConsider this example:\n# Make a string and print it:\ns = 'The quick brown fox jumps over the lazy dog'\nprint(s)\n\n# Extract the length of the string and print that:\nk = len(s)\nprint(k)\n\nHere, we are using a function called len to extract the length of a string.\nThe function len is like print in one respect: there is something that goes in between the parentheses: \nBut it is different in another respect: something comes out of the function and gets placed into the variable k\nWe will later look further into how we can write our own functions that have this property of “making something and giving the result” to a variable.\n\n\n\n\n\n\n\nExercise 5.1\n\n\n\nType up the above in my_string_example.py and submit it. You should look at the printed output that are string and its length. Count the characters to figure if it is accurate. Note that empty spaces are also characters."
  },
  {
    "objectID": "python_primer/unit0/modules/module5.html#string-concatenation",
    "href": "python_primer/unit0/modules/module5.html#string-concatenation",
    "title": "Module 5: Strings and Characters",
    "section": "5.1 String concatenation",
    "text": "5.1 String concatenation\nStrings would be of limited use if there were no way of combining them, just as integers would be if there were no way of performing arithmetic.\nThe joining of two strings end to end is called concatenation.\nConsider this program:\nx = 'The'\ny = 'quick'\nz = 'brown'\n\ns = x + y + z\nprint(s)\n\n\n\n\n\n\nExercise 5.2\n\n\n\nType up the above in my_string_example2.py and submit. You should look at the printed output that are string and notice that the there are no empty spaces in the output-string.\n\n\nAbout concatenation:\n\nThe same + that we used for integer addition is what’s used to concatenate strings.\nThus multiple-usage of symbols in a programming language is common: we’ll see other examples of a single symbol or function serving multiple purposes.\n\nHow come Python doesn’t get confused and think that x, y, z are integers wanting to be added?\nPython is smart about context, and understands that when + is used with strings, the only reasonable thing to do is to concatenate. Likewise, with numbers, Python will add them.\n\nYou may have noticed the words all strung together without a space. So let’s add the spaces:\nx = 'Sphinx'\ny = 'of'\nz = 'black'\n\ns = x + ' ' + y + ' ' + z + ' quartz, judge my vow'\nprint(s)\n\nprint(len(s))\nNotice how multiple strings, some from variables, and some just written into the statement, are concatenated: \n\n\n\n\n\n\n\nExercise 5.3\n\n\n\nType up the above in my_string_example3.py and submit it. You should look at the printed output and observe how many times the concatenation occur.\n\n\nWe also introduced something new:\nprint(len(s))\nHere’s how to read this line:\n\nFirst look at print and notice that there’s something between the parentheses:\nprint(len(s))\nThink to yourself: something is going to be given to print to get printed.\nNow look at what’s going to print:\nprint(len(s))\nHere we see that the length of the string s is being computed.\nWhat you should be thinking is:\n\nThe length will first get computed.\nAnd then the result (36, in this case) will be sent to print.\nprint then prints it to the output, which is what we see.\n\nOne way to think about this is to use a term, nesting, that we’ve seen before:\n\nHere, the function invocation to len is nested in the function invocation to print\nThe innermost in this case executes first.\n\nIn case you were wondering: yes, one can nest deeply with one function invocation inside another, inside another etc. But we won’t need that anytime soon.\n\nOften we want to concatenate strings with numbers, or other kinds of things:\nFor example: consider\nk = 26\ns = str(k)\nt = 'A pangram must have all ' + s + ' letters'\nprint(t)\n\nHere, the value in k is an integer.\nPrior to concatenation with a string, we first need to make a string out of the integer:\ns = str(k)\nWe do this by sending the integer k to the str function, which builds a string version of the integer and gives that back.\nThe string so computed is then placed into the variable s above.\nThis string s gets concatenated with the other strings to produce the final result.\n\n\n\n\n\n\n\nExercise 5.4\n\n\n\nType up the above in my_string_example4.py to confirm that prior to concatenation with a string, all variables being concatenated are cast as strings. Submit the program.\n\n\nLet’s examine a small variation:\nk = 26\n# You can also build a string in the print statement itself:\nprint('A pangram must have all ' + str(k) + ' letters')\n\n\n\n\n\n\nExercise 5.5\n\n\n\nType up the above in my_string_example5.py to see if the small variation in the earlier program results in an output. Submit your program."
  },
  {
    "objectID": "python_primer/unit0/modules/module5.html#fun-with-string-concatenation",
    "href": "python_primer/unit0/modules/module5.html#fun-with-string-concatenation",
    "title": "Module 5: Strings and Characters",
    "section": "5.2 Fun with string concatenation",
    "text": "5.2 Fun with string concatenation\nWe will occasionally introduce programs we’ve written to both simplify your programming and yet allow for interesting examples.\nIf all we did was compute with integers, it would be boring.\nYou’ve already seen one example of such a tool: drawtool.\nWe’ll now use wordtool, another tool that you will use by calling appropriate functions.\nYou are welcome and are encouraged to “look inside” by skimming over the code in any tool.\nLet’s look at an example that will also introduce some new ideas:\nimport wordtool\n\n# Invoke functions in wordtool to pick random words:\nadj = wordtool.get_random_adjective()\nnoun = wordtool.get_random_noun()\nnoun2 = wordtool.get_random_noun()\nverb = wordtool.get_random_verb()\nprep = wordtool.get_random_preposition()\n\n# Build a sentence with these random words:\nsentence = (\n    'The ' + adj + ' ' + noun + ' ' + verb + 's' +\n    ' ' + prep + ' a ' + noun2 + '.')\nprint(sentence)\n\n\n\n\n\n\nExercise 5.7\n\n\n\nType up the above in my_random_sentence.py. Don’t run it just yet. First download wordtool.py and wordsWithPOS.txt into the same folder as your program. Now run the program several times. You should observe that every time you run the program a new sentence is genreated. Submit your program.\n\n\nLet’s point out:\n\nwordtool.py is merely another Python program, like the ones you’ve been writing, just a bit more complex.\nwordsWithPOS.txt is plain text data (about English words, and parts-of-speech).\nwordtool.py is written to read the data and make some functionality available, one of which is to randomly pick words from amongst the nouns, adjectives, and so on.\nTo use functions in wordtool.py in your program, you need (and this is a new thing we’ve introduced) the import statement at the top of your program:\nimport wordtool\n\n\n\n\n\n\nTip\n\n\n\nThe .py part is not in the import statement\n\n\nThen, to use a function defined in that other file, we use syntax like this:\nadj = wordtool.get_random_adjective()\n\nHere, adj is a string variable that we made.\nThe combination of wordtool, a period, and the desired function get_random_adjective(), is what’s needed to invoke that particular function.\nIn this case, it results in a randomly selected adjective (from the thousands in the data) being copied into the adj variable.\n\nSimilarly, after getting a random noun, verb, and so on, we put those together to make a sentence. Hopefully, with hilarious results.\nWe’ll point out one other new thing:\nsentence = (\n    'The ' + adj + ' ' + noun + ' ' + verb + 's' +\n    ' ' + prep + ' a ' + noun2)\n\nHere, we are concatenating many strings into a long one.\nHowever, if it’s unwieldy to type them all in one line, we can spill over into multiple lines.\nOne way to do that is to use parentheses as shown above.\n\n\n\n\n\n\n\n\nExercise 5.8\n\n\n\nOpen wordtool.py and examine the functions within. Use wordtool.py and follow the earlier program, my_random_sentence.py to create a program, my_random_sentence2.py that generates a longer random sentence. Since you are writing this in the same folder, you won’t need to download wordtool.py and its data, wordsWithPOS.txt again. Submit my_random_sentence2.py."
  },
  {
    "objectID": "python_primer/unit0/modules/module5.html#input-from-the-terminal",
    "href": "python_primer/unit0/modules/module5.html#input-from-the-terminal",
    "title": "Module 5: Strings and Characters",
    "section": "5.3 Input from the terminal",
    "text": "5.3 Input from the terminal\nThus far we have printed (output) to the screen but have not taken in any input.\nThus, we haven’t written any programs that interact with potential users of our programs.\nThere’s a limited market for programs that only execute once with no input whatsoever, right?\nSo, let’s do something more interesting by asking the user to type in a string:\nimport wordtool\n\n# We will get the user to type their name:\nname = input('Enter your name: ')\n\n# We'll use that and make rudimentary conversation:\nprint('Hi ' + name + '!')\n\n\n\n\n\n\nExercise 5.10\n\n\n\nTry writing the above program in my_random_conversation.py. Since you are writing this in the same folder, you won’t need to download wordtool.py and its data, wordsWithPOS.txt again. Submit your program.\n\n\n\n\n\n\n\n\nTip\n\n\n\n\nThe function input is exactly what it sounds like: get input (from the user typing).\nname = input('Enter your name: ')\nHere, there’s a string that goes into the input function. This string is displayed as a prompt in the output:\nEnter your name: \nOf course, you aren’t writing this tiny program to send to someone who will run your program and type in their name. You are playing both roles: programmer and intended user.\nWhatever the user types in (from the keyboard) becomes a single string that’s placed in the variable we’ve called name\nThen, we’ve concatenated whatever gets into namewith two other strings and printed the result:\nprint('Hi ' + name + '!')\n\n\n\nNext, let’s make it more interesting:\nimport wordtool\n\nname = input('Enter your name: ')\n\nprint('Hi ' + name + '!')\n\nadv = wordtool.get_random_adverb()\nadj = wordtool.get_random_adjective()\nsentence = name + ', you are ' + adv + ' ' + adj + '.'\nprint(sentence)\n\n\n\n\n\n\nExercise 5.11\n\n\n\nImprove on the above program by writing your version of a longer conversation my_random_conversation2.py. Allow the user to type in something using input() at least two or three times. For example, your input() function calls can prompt the user to type in an adjectie and adverb of their choice. Additional calls of input() in the program will prompt the user type those in. Unleash your guile and creativity. Submit your program, my_random_conversation2.py\n\n\n\n\n\n\n\n\nExercise 5.12\n\n\n\nTry out a conversation with a chatbot. For example, one of the earliest chatbots in history was Eliza, which you can try out. There is nothing to submit in this exercise."
  },
  {
    "objectID": "python_primer/unit0/modules/module6.html",
    "href": "python_primer/unit0/modules/module6.html",
    "title": "Module 6: Real Numbers",
    "section": "",
    "text": "By the end of this module, for simple programs with real numbers, you will be able to:\n\nCreate variable declarations for variables.\nAssign values to variables by simple assignment, and print them out.\nDemonstrate ability to perform operations for a desired output.\nEvaluate expressions with variables in them.\nConvert English descriptions of operations into expressions.\nMentally trace execution with expressions and calculations.\nMentally trace expressions and calculations inside for-loops.\nProduce desired output using for-loops and calculations.\nIdentify new syntactic elements related to the above."
  },
  {
    "objectID": "python_primer/unit0/modules/module6.html#objectives",
    "href": "python_primer/unit0/modules/module6.html#objectives",
    "title": "Module 6: Real Numbers",
    "section": "",
    "text": "By the end of this module, for simple programs with real numbers, you will be able to:\n\nCreate variable declarations for variables.\nAssign values to variables by simple assignment, and print them out.\nDemonstrate ability to perform operations for a desired output.\nEvaluate expressions with variables in them.\nConvert English descriptions of operations into expressions.\nMentally trace execution with expressions and calculations.\nMentally trace expressions and calculations inside for-loops.\nProduce desired output using for-loops and calculations.\nIdentify new syntactic elements related to the above."
  },
  {
    "objectID": "python_primer/unit0/modules/module6.html#what-are-real-numbers",
    "href": "python_primer/unit0/modules/module6.html#what-are-real-numbers",
    "title": "Module 6: Real Numbers",
    "section": "6.0 What are real numbers?",
    "text": "6.0 What are real numbers?\nLet’s start with some math facts:\n\nWhole numbers like 3, 42 and 1024 are integers.  (As an aside: integers include 0 and the negative ones like -2 or -219).\nThe collection of all integers is infinite in size.\nBut integers are limited because some operations on integers do not yield integers:\n\n30 ÷ 5 gives 6, which is an integer.\nBut 31 ÷ 5 is not an integer, yet it’s a quantity.\n\nReal numbers include all the integers but also numbers like 3.141, and -615.2368.\nThe collection of all real numbers is also infinite. Interestingly, it’s a bigger kind of infinite (but that’s a rather subtle math argument outside the scope of this course).\nThe term real is just that: a term that’s came about historically to describe all these numbers.\nYou might wonder: is there any other kind of number?\nTurns out: yes, there a fascinating (and extraordinarily useful) kind of number called an imaginary number, or more generally, a complex number.  (We won’t be working with these in his course.)\nWhat does one do with real numbers?\n\nThe same operations: +, -, *, /\nWhat’s nice is that applying these to real numbers will always result in real number results.\n\nFor example:\nx = 3.14\ny = 2.718\nz = x + y\nprint(z)\n\nw = z * (x + y) / (x - y)\nprint(w)\n\n\n\n\n\n\n\nExercise 6.1\n\n\n\nType up and submit the above in my_real_example1.py. Confirm that the operations on real number should output a real number in this exercise.\n\n\n\n\n\n\n\n\nNote\n\n\n\n\nYou might have seen 5.8580000000000005 as the value of z printed out.\nHowever, you might also have seen something slightly different because of the approximate nature of such calculations, a limitation of computer hardware.\nThese tiny errors are tiny indeed, but vary slightly from one computer to another, generally occuring around the 16th decimal place: 0.00000000000000001\nDo we need to worry about this? Only if we are engaged in complex scientific calculations.\nOccasionally, however, it can matter. For example, if two people calculate mortgage interest (with real consequences) slightly differently, it could lead to a legal conflict.\n\n\n\nQuick review of some relevant math:\n\nOne kind of operation that’s useful is power.\nWe write 26 to mean 2 x 2 x 2 x 2 x 2 x 2 (six times)\nIt’s easy to see that you could make this work for real numbers that get multiplied: 2.566 = 2.56 x 2.56 x 2.56 x 2.56 x 2.56 x 2.56\nBut could you do 26.4? Turns out, yes, you can do this even if it’s not easy to see or intuit. (We would expect 26.4 to be larger than 26 and smaller than 27, which it is.)\nThe next step then is to allow numbers like 2.566.4.\nIn fact, you can take any real number as the mantissa (the 2.56 in 2.566.4) and any real number as the exponent (the 6.4 in 2.566.4).\nLet’s put this in code and introduce a new operator to raise a number to a power, as in 2.566.4).\nx = 2 ** 6\nprint(x)\n\ny = 2.56 ** 6.4\nprint(y)\n\n\n\n\n\n\n\nExercise 6.2\n\n\n\nType up the above in my_real_example2.py.\n\nDon’t submit it yet.\nNow consider the equation 2.56z = y. You need to use Python to provide a real number input to the value z such that the value of y becomes 400.\nType up you lines of Python code to compute the value of y and include them below what you typed already.\nCheck if the value of y is approximately 400 by initalizing the value of z = 6.4.\nYou don’t have to be accurate. Try chaning the value of z to a number greater than 6.4 and then lower than 6.4 to see how close you can get to 400.\nAgain, don’t worry about the correct answer and focus on the syntax and the outout of your program.\nSubmit hte program my_real_example2.py with the value of x that in your attempts gets the value of y closest to 400.\n\n\n\nLet’s explore further:\n\nThe technical term for “what is x that would make 2.56x = 400?” is logarithm.\nWe would say: x = log2.56(400).  (Read this as: x is equal to log of 400 to the base 2.56).\nWe can calculate this directly:\nimport math\n\nx = math.log(400, 2.56)\nprint(x)\nHere we’ve introduced some new concepts: \nJust like you can ask Python to calculate logarithms using math.log, you can do other kinds of “calculator” functions conveniently.\nExample: math.sqrt for square roots.\n\n\n\n\n\n\n\nExercise 6.3\n\n\n\nCompute the square root of 2 in this exercise.\nIn my_real_example3.py, fill in code below that prints the square root of the number 2 (and only the square root - just one number).\nimport math\n\n# Write a line of code here\n\nprint(x)"
  },
  {
    "objectID": "python_primer/unit0/modules/module6.html#going-from-reals-to-integers-and-strings",
    "href": "python_primer/unit0/modules/module6.html#going-from-reals-to-integers-and-strings",
    "title": "Module 6: Real Numbers",
    "section": "6.1 Going from reals to integers and strings",
    "text": "6.1 Going from reals to integers and strings\nConsider this program:\nimport math\n\nx = 3.141\nprint('x=' + str(x))\n\ni = math.floor(x)\nj = math.ceil(x)\nprint('Rounding down x gives ' + str(i))\nprint('Rounding up x gives ' + str(j))\n\n\n\n\n\n\nTip\n\n\n\n\nThe floor function identifies the integer part of a number like 3.141, in this case 3.\nceil identifies the next higher integer, in this case 4.\nSo, any number with digits after the decimal point like 3.141 lies between its floor and ceiling.\n\n\n\n\n\n\n\n\n\nExercise 6.5\n\n\n\nType the above in my_real_example4.py.\n\nDon’t submit it yet.\nAdd additional lines of code to print the floor and ceiling of 2.718 in the same way that the floor and ceiling of 3.141 were printed above.\nThe lines of code shown below are incomplete.\nYou should complete the additional lines of the code required in this exercise, and run the program to make sure you are getting the output desired.\nSubmit my_real_example4.py\n\ny = 2.718\nprint('y=' + str(y))\n\nm = math.floor()\nn = math.ceil()\nprint('Rounding down y gives ' + str(m))\nprint('Rounding up y gives ' + str(n))\n\n\nLet’s point out a few things: \nNext, getting real numbers as input:\nimport math\n\n# input always results in a string\nx_str = input('Enter a number: ')\n\n# This is how we convert a string into a real number:\nx = float(x_str)\n\n# We use str to embed a number in a string:\nprint('The square of the number you entered is: ' + str(x*x))\n\n\n\n\n\n\nNote\n\n\n\n\nWe use the int() function to convert a string representation of an integer into an actual integer ready for arithmetic, as in:\npounds_str = input('Desired flour in pounds: ')\npounds = int(pounds_str)\nounces = 16 * pounds\nprint('Flour amount in ounces: ' + ounces)\nThe equivalent for real numbers is float:\nx = float(x_str)\nWhy is it called so?\n\nObserve that we can write the number 234.56 as 23.456 x 101 or as 2.3456 x 102 or as 0.23456 x 103, or to exaggerate this idea: 0.000000000023456 x 1013\nThe decimal point can thus, be “floated” around by adjusting the exponent (like 13).\nThis is called floating-point notation.\n\nSo, what does it mean to have a string representation of a number versus the actual number?\n\nFirst, consider this program:\nsome_string = '3.141'\nx = float(some_string)\n# Now we can use x in arithmetic\ny = x / 2\n\n\nWe cannot use some_string in arithmetic.\n\n\n\n\n\n\n\n\n\n\nExercise 6.6\n\n\n\nThe following does NOT work:\nx = '3.141'\ny = x / 2\nprint(y)\nType up the above program in my_real_example5.py\n\nFix it and make sure you program is running correctly.\nDon’t submit it yet.\nAdd a few lines of code to print the output of z = x * 2, correctly.\nYou should complete the additional lines of the code required in this exercise, and run the program to make sure you are getting the output desired.\nSubmit my_real_example5.py\n\n\n\nThe last exercise illustrates the strange way in which operators like + and * are repurposed for strings when used with strings:\n\nConsider this example:\ns = 'Hello'\nt = ' World'\nu = s + t\nprint(u)\nv = s * 3   # Makes 3 copies of s and concatenates them\nprint(v)    # Prints HelloHelloHello\n\n\n\n\n\n\n\nExercise 6.7\n\n\n\nType up the above in my_string_example.py, including the comments provided and submit your program.\n\n\nNow, back to real numbers.\n\n\n\n\n\n\nExercise 6.9\n\n\n\nIn my_conversion_example.py write a program that asks the user to enter a distance in kilometers, and then converts to miles and prints that number. Submit my_conversion_example.py."
  },
  {
    "objectID": "python_primer/unit0/modules/module6.html#real-numbers-and-loops",
    "href": "python_primer/unit0/modules/module6.html#real-numbers-and-loops",
    "title": "Module 6: Real Numbers",
    "section": "6.2 Real numbers and loops",
    "text": "6.2 Real numbers and loops\nThere are two ways in which we’ll work with real numbers and loops:\n\nThe first will use integers to drive the loop’s iterations as in:\nfor k in range(1, n):\n    # do stuff\nHere, k, 1, and n, are all integers.\nThe second is more advanced in that real numbers can themselves be used in the range. We’ll tackle this approach later but we’ll give you a preview of what it looks like:\nfor r in np.arange(0.1, 1, 0.2):\n    # do stuff\n\nLet’s start with an example:\nnum_years = 5\ninterest_rate = 5.0\namount = 80\n\nfor year in range(1, num_years + 1):\n    interest = (interest_rate/100) * amount\n    amount = amount + interest\n    print('After ' + str(year) + ' years,', end='')\n    print('amount = ' + str(amount))\n\n\n\n\n\n\nExercise 6.11\n\n\n\nType up the above in my_compound_interest.py.\n\nSubmit my_compound_interest.py to complete this exercise.\nThe following part of the exercise is not required for submission. However, it is important for you to complete it on your own to understand the working of the program my_compound_interest.py.\nTo confirm your output can you calculate the final amount printed?\nTrace through the iterations above using a table in a spreadsheet or a document, tracking the variables year, amount, interest.\n\n\n\nLet’s point out: \n\n\n\n\n\n\nExercise 6.12\n\n\n\nIn my_compound_interest2.py, write two successive (not nested) for-loops to compare what happens when $1000 is invested for 20 years in each of two mutual funds, one of which has an annual growth rate of 3%, and the other 8%.\n\nWrite your program so that it only prints at the end of the program, and prints the amount by which the 8% fund exceeds the 3% fund (at the end of 20 years).\nNow you know what a 401-K program is about."
  },
  {
    "objectID": "python_primer/unit0/modules/module6.html#some-greek-history-via-programming",
    "href": "python_primer/unit0/modules/module6.html#some-greek-history-via-programming",
    "title": "Module 6: Real Numbers",
    "section": "6.3 Some Greek history via programming",
    "text": "6.3 Some Greek history via programming\n\n\n\nZeno’s paradox:\n\nZeno was a Greek philosopher famous for creating several apparent paradoxes.\nHis most famous one: the hare and the tortoise\n\nSuppose a hare and tortoise are separated by 1 unit of distance, for example: 1 mile. \nSuppose hare is twice as fast as tortoise.\n\nIn the time the hare covers 1 unit, the tortoise has moved foward 1/2 unit.\nIn the time taken to cover this 1/2 unit, the tortoise has moved forward 1/4 unit … etc.\nZeno claimed that by the time the hare catches up, the tortoise will have traveled:        1/2 + 1/4 + 1/8 + 1/16 + … (The dots at the end indicate “keep adding these terms forever”)\nThis is an infinite sum. He said: if you add an infinite number of numbers, you’ll get something infinitely big.\nThus, Zeno’s paradox is: the hare will never catch up.\nLet’s resolve this by writing a program to compute        1/2 + 1/4 + 1/8 + 1/16 + …\nSuch a sum is often called a series.\nLet’s write a program to compute this for any number of terms in the series.\nWe’ll start by noticing that each successive term is half the previous one:\n\n1/4 is half of 1/2.\n1/8 is half of 1/4.\n1/16 is half of 1/8.\n… and so on.\n\nTo compute half of something, we multiply by 1/2.\nHere’s the program:\nn = 5\ntotal = 0\nterm = 1/2\nfor k in range(n):\n    total = total + term\n    term = term * (1/2)\n\nprint(total)\n\n\n\n\n\n\n\nExercise 6.14\n\n\n\nType up the above in my_zeno.py and submit it.\n\nThe following part of the exercise is not required for submission. However, it is important for you to complete it on your own to understand the working of the program my_zeno.py.\nTo confirm your output can you calculate the final amount printed?\nTrace through the values of each of the variables using a table in a spreadsheet or a document.\n\n\n\nLet’s point out:"
  },
  {
    "objectID": "python_primer/unit0/modules/module6.html#a-statistical-application",
    "href": "python_primer/unit0/modules/module6.html#a-statistical-application",
    "title": "Module 6: Real Numbers",
    "section": "6.4 A statistical application",
    "text": "6.4 A statistical application\nLet’s use a loop to compute that most basic of statistical things: an average\nFor example, suppose we wish to compute the average of the numbers from 1 to 10:\nn = 10\ntotal = 0\n\nfor k in range(1, n+1):\n    total = total + k\n\navg = total / n\nprint('Average=' + str(avg))\n\n\n\n\n\n\n\nExercise 6.15\n\n\n\nType up the above in my_stats1.py to calculate the average and submit it.\n\n\n\n\n\n\n\n\nExercise 6.16\n\n\n\nIn my_stats2.py, modify the above code to compute the average of odd numbers from 1 through 9, and check against the answer you get computing by hand.\n\nNow, use your program to compute the average of odd numbers between 1 and 100.\nYour final my_stats2.py should compute the average of odd numbers between 1 and 100.\nSubmit my_stats2.py\n\n\n\nWe’ll next look at a problem at the intersection of language and statistics:\n\nMany nouns in English are long, especially words ending in “tion” like “conservation”.\nIn contrast, we see a lot of short verbs like “go”, “eat” and so on.\nSo, is it true that English nouns are, on average, longer than English verbs? Let’s find out.\nOne way to do this is to get all nouns and all verbs, compute average lengths and compare.\nHowever, we’ll do this statistically by randomly sampling nouns and verbs.  (Because this is the “stats” section of the module, after all.)\nWe’ll provide most of the code, leaving you to fill out one line:\nimport wordtool\n\nn = 10\ntotal = 0\n\nfor k in range(1, n+1):\n    word = wordtool.get_random_noun()\n    # FILL IN THE MISSING LINES HERE:\n\navg = total / n\nprint('Average word length = ' + str(avg))\n\n\n\n\n\n\n\n\nExercise 6.17\n\n\n\nType up the above program in my_stats3.py.\nDownload wordtool.py and wordsWithPOS.txt to the same folder where my_stats3.py is saved.\nComplete the missing lines in my_stats3.py to\n\nprint 10 words that are nouns and\ncalculate the average length of the 10 words\nprint the average length of the 10 words\n\nSubmit my_stats3.py after completing and running the program.\n\n\n\n\n\n\n\n\nExercise 6.18\n\n\n\nIn the earlier program my_stats3.py, you\n\nprinted 10 nouns and\nestimated the average length of 10 nouns.\n\nIn my_stats4.py, modify the above program my_stats3.py and have it also estimate the average length of verbs.\nThis means you will have to add a few more lines of code within the for-loop that does the following:\n\nprint 10 nouns\ncalculate the average length of the 10 nouns\nprint 10 verbs\ncalculate the average length of the 10 verbs\nprint the average length of the 10 nouns\nprint the average length of the 10 verbs\n\nYou will need wordtool.py and wordsWithPOS.txt again for this exercise. However, you don’t need to download them again. Just save my_stats4.py in the same folder where you downloaded wordtool.py, wordsWithPOS.txt and my_stats3.py.\nSubmit my_stats4.py with n = 10.\nTry this experiment; you don’t need to submit the following part of the exercise:\n\nSince the program prints out the average length of the 10 nouns and 10 verbs, you can see the results and mentally compare the average lengths.\nTry changing n = 100 and see if the results of average lengths are any different.\nTry a higher number for n. You may end up spending more time waiting for the program to complete its execution."
  },
  {
    "objectID": "python_primer/unit0/modules/module6.html#plotting-a-function",
    "href": "python_primer/unit0/modules/module6.html#plotting-a-function",
    "title": "Module 6: Real Numbers",
    "section": "6.5 Plotting a function",
    "text": "6.5 Plotting a function\nLet’s plot the well-known () function.\n\nWe’ll plot this in the range [0,10].\nLet’s start by picking 20 points to plot.\nWe’ll divide the interval [0,10] into 20 so that the x values (along the x-axis) are\n\n    0\n    0.5\n    1.0\n    1.5\n    ... (20 equally spaced values along x-axis)\n    9.5\n    10.0\n\nPictorially, this is what we’ve done so far\n\n\n\nThen, the y-values are calculated by applying the function:\n\n    f(0)    = sin(0)      =  0 \n    f(0.5)  = sin(0.5)    =  0.48\n    f(1.0)  = sin(1.0)    = 0.84\n    f(1.5)  = sin(1.5)    = 0.997\n    ... \n    f(9.5)  = sin(9.5)    = -0.075\n    f(10.0) = sin(10.0)   = -0.54\n\nFor now, don’t worry about the meaning of this sin function.\n\nJust think of it as, you give it a value like 0.5, and it gives back a number like 0.005.\nWe’ll say more about this below.\n\n\n\n\n\n\n\n\nExercise 6.19\n\n\n\nUse a scientific calculator (included in every laptop) to calculate the sin values for the 20 input values beginning with 0, 0.5, 1, … etc .. until 10. Then plot this by hand on paper. There is nothing to submit in this exercise\n\n\nLet’s now do the plotting in code:\nfrom drawtool import DrawTool \nimport math\n\ndt = DrawTool()\ndt.set_XY_range(0,10, -2,2)\nN = 20\nx_spacing = 10 / N\nx = 0\nfor k in range(0, N):\n    y = math.sin(x)\n    dt.draw_point(x, y)\n    x = x + x_spacing\n\ndt.display()\n\n\n\n\n\n\nExercise 6.22\n\n\n\nDownload drawtool.py into your module6 folder. Then type up the above in my_functionplot.py and execute. Change N to 100. This should produce a smoother curve. Next, change the statement\nfor k in range(0, N):\nto\nfor k in range(1, N+1):\n\nSubmit my_functionplot.py with N = 100\nReview the change in the for-loop statement and explain to yourself why this does not change the results in the python-file. You can discuss this aspect of the exercise with your TA, if necessary.\n\n\n\nLet’s point out: \n\n\n\n\n\n\nNote\n\n\n\n\nMuch of the complication in this program comes from how we use another program in our program:\n\nTo perform plotting or drawing, we will use the drawtool.py program.\nTo use this program involves many types of statements, such as:\ndt = DrawTool()\ndt.set_XY_range(0,10, -2,2)\namong others.\nThere are aspects we’re not going to be able to understand now, but we can at least use the program.\n\nNotice that when N=20, the spacing is 10/20 (which is equal to 0.5).\nIf a higher value of N were used, we’d have smaller spacing and therefore a smoother curve.\n\n\n\nAbout mathematical functions:\n\nThe term function means different things in programming and math.\nFor us in programming, a function is a chunk of code that can be referenced by a name and used multiple times just by using that name.\nIn math, a function is a calculation mechanism, which we can think of as “something that takes in a number and outputs a number via a calculation”:\n\nFor example: \nIn this particular case, suppose we feed in 8, we get 64 \nThe rule that turns the input number into the output number is: multiply the input number by itself.\nThus: 82 = 64\nTo describe this in a simpler way, we use symbols like x \nAnd instead of drawing boxes, we use mathematical notation like this: f(x) = x2.\nRead this as: the function takes in a number x and produces x2.\n\nThere are a gazillion functions, some of which are well-known and have stood the test of time.\nAmongst these well-known functions are the trigonometric functions like sin.\nThus, sin(x) takes in a number x and produces a number as a result.\nIn the early 1600’s Rene Descartes made a startling discovery that dramatically changed the world of math:\n\nYou can make axes.\nFor every possible x you can compute f(x)\nThen draw each pair x, f(x) as a point.\nThis produces a curve that allows one to visualize a function.\n\nThis is what we did when we plotting the sin function.\n\nAbout the sin function:\n\nYou may vaguely recall trigonometry from high-school, or have happily forgotten it.\nPerhaps you recall triangles and ratios of sides.\nThe sin function arose from those ideas.\nWhile silly little triangles may seem a mere high-school math exercise, it turns out that functions like sin have proven extraordinarily useful both in real-world applications and in pure mathematics.\nWe’re not going to require much math knowledge in this course but will make observations from time to time."
  },
  {
    "objectID": "python_primer/unit0/modules/module6.html#plotting-a-curve-with-data",
    "href": "python_primer/unit0/modules/module6.html#plotting-a-curve-with-data",
    "title": "Module 6: Real Numbers",
    "section": "6.6 Plotting a curve with data",
    "text": "6.6 Plotting a curve with data\nNext, let’s work with some real data\nConsider the following data:\n\n\n\n\nx\n\n\nf(x)\n\n\n\n\n8.33\n\n\n1666.67\n\n\n\n\n22.22\n\n\n3666.67\n\n\n\n\n23.61\n\n\n4833.33\n\n\n\n\n30.55\n\n\n5000\n\n\n\n\n36.81\n\n\n5166.67\n\n\n\n\n47.22\n\n\n8000\n\n\n\n\n69.44\n\n\n11333.33\n\n\n\n\n105.56\n\n\n19666.67\n\n\n\n\nLet’s write code to display this data:\nfrom drawtool import DrawTool \nimport math\n\ndt = DrawTool()\n\ndt.set_XY_range(0,120, 0,20000)\n\nx = 8.33\nf = 1666.67\ndt.draw_point (x, f)\n\nx = 22.22\nf = 3666.67\ndt.draw_point (x, f)\n\nx = 23.61\nf = 4833.33\ndt.draw_point (x, f)\n\nx = 30.55\nf = 5000\ndt.draw_point (x, f)\n\nx = 36.81\nf = 5166.67\ndt.draw_point (x, f)\n\nx = 47.22\nf = 8000\ndt.draw_point (x, f)\n\nx = 69.44\nf = 11333.33\ndt.draw_point (x, f)\n\nx = 105.56\nf = 19666.67\ndt.draw_point (x, f)\n\ndt.display()\n\n\n\n\n\n\nExercise 6.23\n\n\n\nYou already have drawtool.py in your module6 folder. Type up the above in my_dataplot.py and run.\n\nSubmit my_dataplot.py\nObserve the points “sort of” along a jagged line.\nThis is actual scientific data from observations made in 1929 by a scientist named Edwin HUbble. It utterly shattered our perception of the world. For the purposes of understanding data do some research on your own to identify what this was about and undestand its’ significance?"
  },
  {
    "objectID": "python_primer/unit0/modules/module6.html#when-things-go-wrong",
    "href": "python_primer/unit0/modules/module6.html#when-things-go-wrong",
    "title": "Module 6: Real Numbers",
    "section": "6.7 When things go wrong",
    "text": "6.7 When things go wrong\nIn each of the exercises below, first try to identify the error just by reading. Then type up the program to confirm, and after that, fix the error.\n\n\n\n\n\n\nExercise 6.24\n\n\n\nx = 2 *** 6\nprint(x)\nFix the error in my_error1.py and submit it.\n\n\n\n\n\n\n\n\nExercise 6.25\n\n\n\nx = 100\ny = 0.1 * x\nprint('y=' + y)\nFix the error in my_error2.py and submit it.\n\n\n\n\n\n\n\n\nExercise 6.26\n\n\n\nimport math\nx = input('Enter your height in inches: ')\ny = math.floor(x / 12)\nprint('You are at least ' + str(y) + ' feet tall')\nFix the error in my_error3.py and submit it.\n\n\n\n\n\n\n\n\nExercise 6.27\n\n\n\nfor x in range(1.0, 2.0, 0.1):\n    print(x)\nFix the error in my_error4.py so that the numbers 1.0, 1.1, 1.2, …, 2.0 are printed out. Submit the program after the error is fixed.\n\n\n\n\n\n\n\n\nTip\n\n\n\nUse integers in range but use separate variables to run through the real numbers."
  },
  {
    "objectID": "python_primer/unit0/modules/module6.html#about-the-reals-and-math-in-general",
    "href": "python_primer/unit0/modules/module6.html#about-the-reals-and-math-in-general",
    "title": "Module 6: Real Numbers",
    "section": "6.8 About the reals, and math in general",
    "text": "6.8 About the reals, and math in general\nWe’ve gone a bit beyond our comfort zone into real numbers and into some applications.\nWe’ll end this module by pointing out a few more things about numbers in a mathematical sense, and say something about math anxiety. None of this will be on any exam.\nLet’s start with numbers:\n\nThe easiest kind of number to understand are the natural numbers.\n\nThey are the numbers 1, 2, 3 … and so on.\nIt’s an infinite set, and many operations like + and * applied to naturals result in a natural.\nBut 3 - 5 is not a natural number, and neither is \\[ \\frac{3}{5} \\].\nSo, they’re limited in their use.\n\nIf we expand the naturals and add 0, and all the negative numbers, we get \\[\n          \\ldots -3, -2, -1, 0, 1, 2, 3 \\ldots\n  \\] (The triple-dot that indicates “going on forever” occurs now on both sides, the positive side and the negative side.)\n\nHowever, they too are limited because neither \\[ \\frac{3}{5} \\] nor \\[ \\frac{5}{3} \\] are integers.\n\nThe next kind of number to consider is rational number:\n\nA rational is a number that can be written as a fraction (or ratio) of integers.\nExamples: \\[ \\frac{5}{3}, \\frac{46}{7} \\]\nThey include all the integers.\n\nThen we get to the real numbers introduced in this module.\nWithin the real numbers there are interesting categories.\nSome real numbers are irrational and cannot be expressed as a ratio of integers.\n\nOne example is \\[ \\sqrt{2} \\], which bedeviled the Greeks a long time ago.\nInterestingly, one can prove that there are many more irrational real numbers than rational real numbers.\n\nAnother kind of real number is an algebraic number, meaning they are the solution to an equation like \\[ 3x^2 + 5 = 11 \\]\nThose that aren’t algebraic go by the lovely name of transcendental number, such as \\[ pi \\]\nSo, is every number a real number?        ⇒ No, there are numbers like \\[ \\sqrt-1 \\] that are imaginary.\nYou might think that an imaginary number couldn’t possibly have any use. It turns out that they are extraordinarily useful in many kinds of practical applications.\n\nExample: processing any kind of “wave” data, such as brain waves or seismic waves.\nExample: quantum computing.\n\n\nSome ideas to reflect on:\n\nWhich of the following most resonates with you?\n\n“I’ve always found math very hard and prefer to avoid it.”\n“I can tolerate math but would rather avoid it if possible.”\n“Math and I just don’t get along.”\n“Math is OK - I can do most of it but I don’t find it interesting or valuable.”\n“I can do math but am more interested in just applying it.”\n“I find math really interesting, even if I choose not to pursue math for math’s sake.”\n“I love math and will do as much of it as I can.”\n\nWhat ever your category, you should keep in mind:\n\nMath is a skill and takes practice, just like programming.\nYes, it’s true that a lot of high-school is boring. Much of what’s interesting in math comes after calculus.\nThe notion of not being suited to math is just a mindset. It can be changed.\nEven a little math is quite useful.\nYou can learn quite a bit of math via programming, as we’ll show you.\n\nWe’ll have more to say about the interesting and exciting connections between computer science, math, and other fields, including art."
  },
  {
    "objectID": "python_primer/unit0/guides/hello.html",
    "href": "python_primer/unit0/guides/hello.html",
    "title": "Setting up your programming enviornment",
    "section": "",
    "text": "We will now have you type, run, and save your first computer program.\n\n\n\n\n\n\nNote\n\n\n\n\nPrograms are typed in using your computer’s keyboard, just as you would type in an email or text document.\nAnd just as the “thing you are typing into” is different for email and for text-editing, there is a different “thing” to type programs into.\nThe typing is one part of getting a program. If you just type your program, it will just be sitting there on your computer. But you want to go the next step and run (or, execute, as we say) the program. Typing and not-running is loosely analogous to typing an email but not sending it (the email will just remain in composed-form, but go nowhere). Similarly, typing text into Word doesn’t mean it gets “published”.\nThe “thing” into which you type and run your program is called a code editor or an IDE (Integrated Development Environment, a mouthful).\nWe are going to give you the option of using one of two code editors, Thonny or Spyder. Think of them as apps that help you type and run programs.\n\n\n\nBefore we get to typing in a program, we first (if not already done) need to download and install Python and either Thonny or Spyder.\n\nThe term install means: you download software on your computer and get it to run. This is something you do just once.\nWhen you need to run the software again, you search for it on your computer (since it’s already installed) and merely run it.\nThus, you will perform Steps 1 and 2 just once for this course.\nAnd Steps 3 and 4 repeatedly as you write code.\nAlso, if you start off with one editor and change your mind, you can come back here to install the other editor and learn how to use it.\n\n\n\nPick between these two options and click through to follow instructions in installing Anaconda.\n\nAnaconda for Mac users\nAnaconda for Windows users\n\nThen come back here and proceed with Step 2.\nIncidentally, you might be asking: what exactly is Anaconda and what does it have to do with Python other than its name?\n\nPython is a programming language. Typically a language alone is not enough to get many useful programming tasks done.\nWe need additional software that’s useful. Anaconda is a bundle that includes Python and this additional software. You install it once on your computer and you can then avail of all kinds of useful things related to Python.\nThe one thing it does not have, sadly, is the Thonny editor, so we’ll show you how to install that.\n\n\n\n\nSelect ONE of the following options:\n\nMac (Option A): Thonny for Mac users\nMac (Option B): There are no special instructions because Spyder comes bundled with Anaconda.\nWindows (Option A): Thonny for Windows users\nWindows (Option B): There are no special instructions because Spyder comes bundled with Anaconda.\n\n\n\n\nChoose between:\n\nMac (Option A): Looking for and opening Thonny\nMac (Option B): Looking for, and opening Spyder on a Mac is similar to looking for and opening Thonny.\nWindows (Option A): Looking for and opening Thonny\nWindows (Option B): Looking for, and opening Spyder on Windows is similar to looking for and opening Thonny.\n\n\n\n\nChoose between:\n\nMac (Option A): Helloworld for Mac users using Thonny\nMac (Option B): Helloworld for Mac users using Spyder\nWindows (Option A): Helloworld for Windows users using Thonny\nWindows (Option B): Helloworld for Windows users using Spyder\n\n\n\n\nWhat is matplotlib? It’s a plotting package that we’ll use. This comes packaged with Spyder and so, only Thonny users need to download this. Thonny is a nice editor and so Thonny users cheerfully do this additional step in order to use plotting along with Thonny.\n\nMac Users: Install matplotlib for Thonny\nWindows Users: Install matplotlib for Thonny\n\n\n\n\nIf you are using Spyder that comes bundled with Anaconda Navigator you don’t have to do anything extra as matplotlib comes packaged with Spyder. You can verify that you have matplotlib on your computer by following these steps:\n\nMac Users: Install matplotlib on Spyder\nWindows Users: Install matplotlib on Spyder"
  },
  {
    "objectID": "python_primer/unit0/guides/hello.html#objectives",
    "href": "python_primer/unit0/guides/hello.html#objectives",
    "title": "Setting up your programming enviornment",
    "section": "",
    "text": "We will now have you type, run, and save your first computer program.\n\n\n\n\n\n\nNote\n\n\n\n\nPrograms are typed in using your computer’s keyboard, just as you would type in an email or text document.\nAnd just as the “thing you are typing into” is different for email and for text-editing, there is a different “thing” to type programs into.\nThe typing is one part of getting a program. If you just type your program, it will just be sitting there on your computer. But you want to go the next step and run (or, execute, as we say) the program. Typing and not-running is loosely analogous to typing an email but not sending it (the email will just remain in composed-form, but go nowhere). Similarly, typing text into Word doesn’t mean it gets “published”.\nThe “thing” into which you type and run your program is called a code editor or an IDE (Integrated Development Environment, a mouthful).\nWe are going to give you the option of using one of two code editors, Thonny or Spyder. Think of them as apps that help you type and run programs.\n\n\n\nBefore we get to typing in a program, we first (if not already done) need to download and install Python and either Thonny or Spyder.\n\nThe term install means: you download software on your computer and get it to run. This is something you do just once.\nWhen you need to run the software again, you search for it on your computer (since it’s already installed) and merely run it.\nThus, you will perform Steps 1 and 2 just once for this course.\nAnd Steps 3 and 4 repeatedly as you write code.\nAlso, if you start off with one editor and change your mind, you can come back here to install the other editor and learn how to use it.\n\n\n\nPick between these two options and click through to follow instructions in installing Anaconda.\n\nAnaconda for Mac users\nAnaconda for Windows users\n\nThen come back here and proceed with Step 2.\nIncidentally, you might be asking: what exactly is Anaconda and what does it have to do with Python other than its name?\n\nPython is a programming language. Typically a language alone is not enough to get many useful programming tasks done.\nWe need additional software that’s useful. Anaconda is a bundle that includes Python and this additional software. You install it once on your computer and you can then avail of all kinds of useful things related to Python.\nThe one thing it does not have, sadly, is the Thonny editor, so we’ll show you how to install that.\n\n\n\n\nSelect ONE of the following options:\n\nMac (Option A): Thonny for Mac users\nMac (Option B): There are no special instructions because Spyder comes bundled with Anaconda.\nWindows (Option A): Thonny for Windows users\nWindows (Option B): There are no special instructions because Spyder comes bundled with Anaconda.\n\n\n\n\nChoose between:\n\nMac (Option A): Looking for and opening Thonny\nMac (Option B): Looking for, and opening Spyder on a Mac is similar to looking for and opening Thonny.\nWindows (Option A): Looking for and opening Thonny\nWindows (Option B): Looking for, and opening Spyder on Windows is similar to looking for and opening Thonny.\n\n\n\n\nChoose between:\n\nMac (Option A): Helloworld for Mac users using Thonny\nMac (Option B): Helloworld for Mac users using Spyder\nWindows (Option A): Helloworld for Windows users using Thonny\nWindows (Option B): Helloworld for Windows users using Spyder\n\n\n\n\nWhat is matplotlib? It’s a plotting package that we’ll use. This comes packaged with Spyder and so, only Thonny users need to download this. Thonny is a nice editor and so Thonny users cheerfully do this additional step in order to use plotting along with Thonny.\n\nMac Users: Install matplotlib for Thonny\nWindows Users: Install matplotlib for Thonny\n\n\n\n\nIf you are using Spyder that comes bundled with Anaconda Navigator you don’t have to do anything extra as matplotlib comes packaged with Spyder. You can verify that you have matplotlib on your computer by following these steps:\n\nMac Users: Install matplotlib on Spyder\nWindows Users: Install matplotlib on Spyder"
  },
  {
    "objectID": "python_primer/unit0/guides/hello.html#macos-users",
    "href": "python_primer/unit0/guides/hello.html#macos-users",
    "title": "Setting up your programming enviornment",
    "section": "macOS Users",
    "text": "macOS Users\n\nStep 1: Installing Anaconda\n\n\n\nLearn how to install Anaconda and open Spyder (which comes bundled with Anaconda) by following this guide.\n\n\nStep 2: Installing Thonny\n\n\n\nLearn how to install Thonny by following this guide.\n\n\nStep 3: Opening Thonny\n\n\n\nThese screenshots explain how to open Thonny:\n\n3.A.1\n\n\n\n3.A.2\n\n\n\n3.A.3\n\n\n\n3.A.4\nYou now have opened Thonny \n\n\n\n\n\n\nTip\n\n\n\n\nWhen you open Thonny you aren’t opening program files (yet). It’s similar to opening Word without naming a text file to work on.\nYour program files are going to be in specific folders. You need to look for them, and when you create new ones, save them in specific folders.\n\n\n\n\n\n\nStep 5: Installing Matplotlib (or any package) for Thonny Users\n\n\n\nHow to add a package (like Matplotlib):\n\nTo add a package (which will only be necessary for those using Thonny), first, open Thonny, and go to “Tools”. From there, click on “Manage Packages”. \nThen, you will see a window like what is shown in the image above. Search for the “package” you need to install or remove. In this case, we have used the example of “Matplotlib”, which you will need to have installed for some exercises. Once you’ve typed the name of the package, click “Find package from PyPI” or press the enter/return key. \nTo add the package, click the install button. You will then see a small popup while the package is installed. \n\n\n\nStep 6: Installing Matplotlib on Spyder\n\n\n\nMatplotlib comes packaged with Spyder if accessed through Anaconda Navigator, so you dont really have to do anything extra. To verify you have matplotlib, try importing matplotlib in your console\nimport matplotlib"
  },
  {
    "objectID": "python_primer/unit0/guides/hello.html#windows-users",
    "href": "python_primer/unit0/guides/hello.html#windows-users",
    "title": "Setting up your programming enviornment",
    "section": "Windows Users",
    "text": "Windows Users\n\nStep 1: Installing Anaconda\n\n\n\nLearn how to installing Anaconda and open Spyder on Windows by following this guide.\n\n\nStep 2: Installing Thonny\n\n\n\nLearn how to installing Thonny on Windows by following this guide.\n\n\nStep 3: Opening Thonny\n\n\n\nThe following screenshots explain how to open Thonny:\n\n3.A.1\n\n\n\n3.A.2\n\n\n\n3.A.3\n\n\n\n\n\n\n\nTip\n\n\n\n\nWhen you open Thonny you aren’t opening program files (yet). It’s similar to opening Word without naming a text file to work on.\nYour program files are going to be in specific folders. You need to look for them, and when you create new ones, save them in specific folders.\n\n\n\n\n\n\n\nStep 5: Installing Matplotlib for Thonny Users\n\n\n\nHow to add a package (like Matplotlib):\n\nTo add a package (which will only be necessary for those using Thonny), first, open Thonny, and go to “Tools”. From there, click on “Manage Packages”.\n\nThen, you will see a window like what is shown in the image above. Search for the “package” you need to install or remove. In this case, we have used the example of “Matplotlib”, which you will need to have installed for some exercises. Once you’ve typed the name of the package, click “Find package from PyPI” or press the enter/return key.\n\nTo add the package, click the install button. You will then see a small popup while the package is installed.\n\n\n\n\nStep 6: Installing Matplotlib on Spyder\n\n\n\nMatplotlib comes packaged with Spyder if accessed through Anaconda Navigator, so you dont really have to do anything extra. To verify you have matplotlib, try importing matplotlib in your console\nimport matplotlib"
  },
  {
    "objectID": "python_primer/unit0/guides/anaconda-windows.html",
    "href": "python_primer/unit0/guides/anaconda-windows.html",
    "title": "Anaconda and Spyder Installation Guide for Windows",
    "section": "",
    "text": "This guide will guide you through the installation process of Anaconda, a popular Python distribution, on your Windows computer. Anaconda facilitates the management of Python packages and environments, and it includes Spyder, a powerful IDE for scientific computing."
  },
  {
    "objectID": "python_primer/unit0/guides/anaconda-windows.html#introduction",
    "href": "python_primer/unit0/guides/anaconda-windows.html#introduction",
    "title": "Anaconda and Spyder Installation Guide for Windows",
    "section": "",
    "text": "This guide will guide you through the installation process of Anaconda, a popular Python distribution, on your Windows computer. Anaconda facilitates the management of Python packages and environments, and it includes Spyder, a powerful IDE for scientific computing."
  },
  {
    "objectID": "python_primer/unit0/guides/anaconda-windows.html#prerequisites",
    "href": "python_primer/unit0/guides/anaconda-windows.html#prerequisites",
    "title": "Anaconda and Spyder Installation Guide for Windows",
    "section": "Prerequisites",
    "text": "Prerequisites\nBefore you begin, ensure you have the following:\n\nA Windows computer.\nAn active internet connection.\nAdequate disk space for the installation."
  },
  {
    "objectID": "python_primer/unit0/guides/anaconda-windows.html#installation-steps",
    "href": "python_primer/unit0/guides/anaconda-windows.html#installation-steps",
    "title": "Anaconda and Spyder Installation Guide for Windows",
    "section": "Installation Steps",
    "text": "Installation Steps\n\n1. Download Anaconda\nVisit the Anaconda download page at https://www.anaconda.com/download.\n\n\n2. Choose the Windows Installer\nClick on the “Download” button under the Windows section to download the Anaconda installer for Windows.\n\n\n\nDownload Anaconda\n\n\n\n\n3. Run the Installer\n\nLocate the downloaded file, typically in your “Downloads” folder.\nDouble-click the installer executable (.exe) file to run it.\n\n\n\n\nRun Installer\n\n\n\n\n4. Follow the Installer Wizard\n\nFollow the on-screen instructions to initiate the installation.\nRead and accept the license agreement when prompted.\n\n\n\n\nRead Me\n\n\n\n\n\nLicense Agreement\n\n\n\nChoose the installation type. It’s recommended to select “Just me” unless you have specific reasons for a different choice.\n\n\n\n\nInstallation Type\n\n\n\nSelect the installation location (the default is usually fine).\n\n\n\n\nInstallation Location\n\n\n\n\n5. Install Anaconda\nClick the “Install” button to begin the installation process. This may take a few minutes.\n\n\n\nInstall\n\n\n\n\n6. Complete the Installation\nOnce the installation is complete, you’ll see a confirmation message. Click “Next” and proceed to finish.\n\n\n\nInstallation Complete\n\n\n\n\n\nClose Installation Wizard\n\n\n\n\n7. If prompted to update the navigator, select “No, don’t show again”\n\n\n\nDon’t Update\n\n\n\n\n8. You’re NOT REQUIRED to Log in/Sign up for Anaconda Cloud; close the prompt by clicking the “X” button\n\n\n\nDon’t Log in/Sign up\n\n\n\n\n9. Access Spyder through Anaconda Navigator\n\nOpen Anaconda Navigator, now installed on your system.\nLocate Spyder and click “Launch” to open the Spyder IDE.\n\n\n\n\nLaunch Spyder\n\n\n\n\n\nSpyder"
  },
  {
    "objectID": "python_primer/unit0/guides/anaconda-windows.html#conclusion",
    "href": "python_primer/unit0/guides/anaconda-windows.html#conclusion",
    "title": "Anaconda and Spyder Installation Guide for Windows",
    "section": "Conclusion",
    "text": "Conclusion\nCongratulations! Anaconda and Spyder are now successfully installed on your Windows computer. Utilize Spyder for scientific computing and Python development.\nFor further guidance on using Anaconda, refer to the official documentation at https://docs.anaconda.com/.\nIf you encounter any issues or have questions, seek assistance from the Anaconda community or consult the documentation for troubleshooting tips."
  },
  {
    "objectID": "python_primer/unit0/guides/thonny-mac-matplotlib.html",
    "href": "python_primer/unit0/guides/thonny-mac-matplotlib.html",
    "title": "Thonny Package Installation Guide for macOS",
    "section": "",
    "text": "This guide will walk you through the process of installing Python packages, such as Matplotlib, using Thonny on your macOS computer. Thonny is a user-friendly Python IDE, and managing packages is an essential part of the development process."
  },
  {
    "objectID": "python_primer/unit0/guides/thonny-mac-matplotlib.html#introduction",
    "href": "python_primer/unit0/guides/thonny-mac-matplotlib.html#introduction",
    "title": "Thonny Package Installation Guide for macOS",
    "section": "",
    "text": "This guide will walk you through the process of installing Python packages, such as Matplotlib, using Thonny on your macOS computer. Thonny is a user-friendly Python IDE, and managing packages is an essential part of the development process."
  },
  {
    "objectID": "python_primer/unit0/guides/thonny-mac-matplotlib.html#prerequisites",
    "href": "python_primer/unit0/guides/thonny-mac-matplotlib.html#prerequisites",
    "title": "Thonny Package Installation Guide for macOS",
    "section": "Prerequisites",
    "text": "Prerequisites\nBefore you begin, ensure you have the following:\n\nThonny IDE installed on your macOS computer.\nAn internet connection."
  },
  {
    "objectID": "python_primer/unit0/guides/thonny-mac-matplotlib.html#package-installation-steps",
    "href": "python_primer/unit0/guides/thonny-mac-matplotlib.html#package-installation-steps",
    "title": "Thonny Package Installation Guide for macOS",
    "section": "Package Installation Steps",
    "text": "Package Installation Steps\n\n1. Open Thonny\nLaunch Thonny on your macOS computer.\n\n\n\n\n\n2. Open the Manage Packages Window\nClick on the “Tools” menu at the top. Select “Manage Packages…” from the dropdown menu.\n\n\n\n3. Search for Matplotlib\nIn the “Manage Packages” window, type “matplotlib” into the search bar.\n\n\n\n4. Select Matplotlib Package\nFind the “matplotlib” package in the search results. Click on it to select it. If multiple versions of Matplotlib are available, choose the desired version from the list.\n\n\n5. Click “Install Package”\nClick the “Install Package” button to begin the installation process.\n\n\n\n6. Monitor Installation Progress\nThonny will display the progress of the installation in the console window. Wait for the process to complete.\n\n\n7. Confirm Installation\nOnce the installation is complete, you should see a confirmation message in the console window.\n\n\n8. Verify Matplotlib Installation\nTo confirm the successful installation of Matplotlib, you can open a new Python script or interactive console in Thonny and try importing the library:\nimport matplotlib.pyplot as plt\n\n\n9. Additional Packages\nRepeat the above steps to install any other packages you need, such as NumPy or Pandas."
  },
  {
    "objectID": "python_primer/unit0/guides/thonny-mac-matplotlib.html#conclusion",
    "href": "python_primer/unit0/guides/thonny-mac-matplotlib.html#conclusion",
    "title": "Thonny Package Installation Guide for macOS",
    "section": "Conclusion",
    "text": "Conclusion\nCongratulations! You’ve successfully installed Matplotlib and other packages using Thonny on your macOS computer. Managing packages with Thonny is a straightforward process, enabling you to enhance your Python development environment.\nFor more information on managing packages with Thonny, refer to the official documentation at https://thonny.org/.\nIf you encounter any issues or have questions, don’t hesitate to seek help from the Thonny community or consult the documentation for troubleshooting tips."
  },
  {
    "objectID": "python_primer/unit0/guides/thonny-win-matplotlib.html",
    "href": "python_primer/unit0/guides/thonny-win-matplotlib.html",
    "title": "Thonny Package Installation Guide for Windows",
    "section": "",
    "text": "This guide will guide you through the process of installing Python packages, specifically Matplotlib, using Thonny on your Windows computer. Thonny is a user-friendly Python IDE, and managing packages is a crucial aspect of the development process."
  },
  {
    "objectID": "python_primer/unit0/guides/thonny-win-matplotlib.html#introduction",
    "href": "python_primer/unit0/guides/thonny-win-matplotlib.html#introduction",
    "title": "Thonny Package Installation Guide for Windows",
    "section": "",
    "text": "This guide will guide you through the process of installing Python packages, specifically Matplotlib, using Thonny on your Windows computer. Thonny is a user-friendly Python IDE, and managing packages is a crucial aspect of the development process."
  },
  {
    "objectID": "python_primer/unit0/guides/thonny-win-matplotlib.html#prerequisites",
    "href": "python_primer/unit0/guides/thonny-win-matplotlib.html#prerequisites",
    "title": "Thonny Package Installation Guide for Windows",
    "section": "Prerequisites",
    "text": "Prerequisites\nBefore you begin, ensure you have the following:\n\nThonny IDE installed on your Windows computer.\nAn active internet connection."
  },
  {
    "objectID": "python_primer/unit0/guides/thonny-win-matplotlib.html#package-installation-steps",
    "href": "python_primer/unit0/guides/thonny-win-matplotlib.html#package-installation-steps",
    "title": "Thonny Package Installation Guide for Windows",
    "section": "Package Installation Steps",
    "text": "Package Installation Steps\n\n1. Open Thonny\nLaunch Thonny on your Windows computer.\n\n\n\n\n2. Open the Manage Packages Window\nClick on the “Tools” menu at the top. Select “Manage Packages…” from the dropdown menu.\n\n\n\n3. Search for Matplotlib\nIn the “Manage Packages” window, type “matplotlib” into the search bar.\n\n\n\n4. Select Matplotlib Package\nFind the “matplotlib” package in the search results. Click on it to select it. If multiple versions of Matplotlib are available, choose the desired version from the list.\n\n\n5. Click “Install Package”\nClick the “Install Package” button to initiate the installation process.\n\n\n\n6. Monitor Installation Progress\nThonny will display the progress of the installation in the console window. Wait for the process to complete.\n\n\n7. Confirm Installation\nOnce the installation is complete, you should see a confirmation message in the console window.\n\n\n8. Verify Matplotlib Installation\nTo confirm the successful installation of Matplotlib, you can open a new Python script or interactive console in Thonny and try importing the library:\nimport matplotlib.pyplot as plt\n\n\n9. Additional Packages\nRepeat the above steps to install any other packages you need, such as NumPy or Pandas."
  },
  {
    "objectID": "python_primer/unit0/guides/thonny-win-matplotlib.html#conclusion",
    "href": "python_primer/unit0/guides/thonny-win-matplotlib.html#conclusion",
    "title": "Thonny Package Installation Guide for Windows",
    "section": "Conclusion",
    "text": "Conclusion\nCongratulations! You’ve successfully installed Matplotlib and other packages using Thonny on your Windows computer. Managing packages with Thonny is a straightforward process, allowing you to enhance your Python development environment.\nFor more information on managing packages with Thonny, refer to the official documentation at https://thonny.org/.\nIf you encounter any issues or have questions, don’t hesitate to seek help from the Thonny community or consult the documentation for troubleshooting tips."
  },
  {
    "objectID": "python_primer/unit0/guides/computerese-mac.html",
    "href": "python_primer/unit0/guides/computerese-mac.html",
    "title": "Mac: Instructions for developing computer-usage competency",
    "section": "",
    "text": "Develop your computerese skills\nUseful screenshots and step-by-step instructions for:"
  },
  {
    "objectID": "python_primer/unit0/guides/computerese-mac.html#creating-folders",
    "href": "python_primer/unit0/guides/computerese-mac.html#creating-folders",
    "title": "Mac: Instructions for developing computer-usage competency",
    "section": "Creating folders",
    "text": "Creating folders\n\n\n\n\nStep 1\n\nIn the top right corner while on the Desktop you can click the File option next to the work Finder. There you will see a New Folder option that you can choose. \n\n\n\nStep 2\n\nHere is the new folder on the Desktop \n\n\n\nStep 3\n\nYou can write over the highlighted text that is the name of the folder and rename it whatever you want \n\n\n\nStep 4\n\nWhen you open the folder you will see it is empty \n\n\n\nStep 5\n\nWhen you right click the space inside the folder you will see a New Folder option you can choose to make a new folder inside this one \n\n\n\nStep 6\n\nHere is the new folder inside your old one \n\n\n\nStep 7\n\nWe are now in our newest empty folder and there is a setting option at the top of the folder window which has a New Folder option to make a new folder inside this one \n\n\n\nStep 8\n\nYou can write over the highlighted text that is the name of the folder and rename it whatever you want \n\n\n\nStep 9\n\nHere is the newest folder inside the unit0 folder \n\n\n\nStep 10\n\nYou can write over the highlighted text that is the name of the folder and rename it whatever you want \n\nNow you have created three folders, on your Desktop and inside each other. All of these different ways to create folders and work easily. You can also click and drag folders to move them inside other folders if you need to."
  },
  {
    "objectID": "python_primer/unit0/guides/computerese-mac.html#file-downloads",
    "href": "python_primer/unit0/guides/computerese-mac.html#file-downloads",
    "title": "Mac: Instructions for developing computer-usage competency",
    "section": "File downloads",
    "text": "File downloads\n\n\n\n\nStep 1\n\nHere is a link to a file that needs to be downloaded to the computer.\n\n\n\n\n\n\n\n\nNote\n\n\n\nThis is an image we’re showing, so don’t click. It is intended to show what it would look like on your computer.\n\n\n\n\nStep 2\n\nRight click on the link and choose Download Linked File As… \n\n\n\nStep 3\n\nThis will provide a box where you can name the file and choose where you would like to save it. \n\n\n\nStep 4\n\nHere you can see the file saved in the location we chose:"
  },
  {
    "objectID": "python_primer/unit0/guides/computerese-mac.html#find-a-file",
    "href": "python_primer/unit0/guides/computerese-mac.html#find-a-file",
    "title": "Mac: Instructions for developing computer-usage competency",
    "section": "Find a file",
    "text": "Find a file\n\n\n\n\nStep 1\n\n\n\nStep 2\n\n\n\nStep 3\n\n\n\nStep 4"
  },
  {
    "objectID": "python_primer/unit0/guides/computerese-mac.html#save-a-file",
    "href": "python_primer/unit0/guides/computerese-mac.html#save-a-file",
    "title": "Mac: Instructions for developing computer-usage competency",
    "section": "Save a file",
    "text": "Save a file\n\n\n\n\nStep 1\n\nWhen you are ready to save a file you made for the first time you can find a save option under the File option in the top right. \n\n\n\nStep 2\n\nThis will open up an option where you can choose the location of your file as well as the name. \n\n\n\nStep 3\n\nNow when we open the previously empty folder where I saved this file you can see it there and you can open it and edit it from this folder. \n\n\n\nStep 4\n\nWhen you open that same file you will also see a Save As option, this lets you make a new version of the file and put it somewhere else and give it a new name, but when you edit this new file it will not edit the old one so if you want to move a file it’s better to click and drag is somewhere new"
  },
  {
    "objectID": "python_primer/unit0/guides/computerese-mac.html#make-a-pdf",
    "href": "python_primer/unit0/guides/computerese-mac.html#make-a-pdf",
    "title": "Mac: Instructions for developing computer-usage competency",
    "section": "Make a pdf",
    "text": "Make a pdf\n\n\n\n\nStep 1\n\nWhen editing a text document in TextEdit you can convert it into a PDF first by clicking the File menu in the top right and selecting Export as PDF. \n\n\n\nStep 2\n\nYou will then see a menu where you can choose the name and location for the PDF. \n\n\n\nStep 3\n\nThe PDF will then be saved in whatever location you chose.\n\n\n\n\nStep 4\n\nWhen you open the PDF it will open in Preview which allows you to view and annotate PDFs"
  },
  {
    "objectID": "python_primer/unit0/guides/computerese-mac.html#make-a-zip",
    "href": "python_primer/unit0/guides/computerese-mac.html#make-a-zip",
    "title": "Mac: Instructions for developing computer-usage competency",
    "section": "Make a zip",
    "text": "Make a zip\n\n\n\n\nStep 1\n\nTo make a zip file from a group of files you first need to highlight all the files you want. \n\n\n\nStep 2\n\nThen right click on the group of files and select Compress Items. \n\n\n\nStep 3\n\nThis will make a zip file containing all the files you had selected with a default name. \n\n\n\nStep 4\n\nYou can then rename your zip file to be whatever you want"
  },
  {
    "objectID": "python_primer/unit0/guides/anaconda-mac.html",
    "href": "python_primer/unit0/guides/anaconda-mac.html",
    "title": "Anaconda and Spyder Installation Guide for macOS",
    "section": "",
    "text": "This guide will lead you through the process of installing Anaconda, a popular Python distribution, on your macOS computer. Anaconda provides a convenient way to manage Python packages and environments, and it includes Spyder, a powerful IDE for scientific computing."
  },
  {
    "objectID": "python_primer/unit0/guides/anaconda-mac.html#introduction",
    "href": "python_primer/unit0/guides/anaconda-mac.html#introduction",
    "title": "Anaconda and Spyder Installation Guide for macOS",
    "section": "",
    "text": "This guide will lead you through the process of installing Anaconda, a popular Python distribution, on your macOS computer. Anaconda provides a convenient way to manage Python packages and environments, and it includes Spyder, a powerful IDE for scientific computing."
  },
  {
    "objectID": "python_primer/unit0/guides/anaconda-mac.html#prerequisites",
    "href": "python_primer/unit0/guides/anaconda-mac.html#prerequisites",
    "title": "Anaconda and Spyder Installation Guide for macOS",
    "section": "Prerequisites",
    "text": "Prerequisites\nBefore you begin, make sure you have the following:\n\nA macOS computer.\nAn internet connection.\nAdequate disk space for the installation."
  },
  {
    "objectID": "python_primer/unit0/guides/anaconda-mac.html#installation-steps",
    "href": "python_primer/unit0/guides/anaconda-mac.html#installation-steps",
    "title": "Anaconda and Spyder Installation Guide for macOS",
    "section": "Installation Steps",
    "text": "Installation Steps\n\n1. Download Anaconda\nVisit the Anaconda download page at https://www.anaconda.com/download.\n\n\n2. Choose the macOS Installer\nClick on the “Download” button under the macOS section depending on your System-on-chip (Intel/M1/M2) to download the Anaconda installer for macOS.\n\n\n\nDownload Anaconda\n\n\n\n\n3. Run the Installer\n\nLocate the downloaded file, usually in your “Downloads” folder.\nDouble-click the Anaconda disk image (.dmg) file to open it and click “Allow” when prompted.\n\n\n\n\nRun Installer\n\n\n\n\n\nAllow Installation\n\n\n\n\n4. Follow the Installer Wizard\n\nFollow on-screen instructions to begin the installation.\nRead and accept the license agreement when prompted.\n\n\n\n\nRead Me\n\n\n\n\n\nLicense Agreement\n\n\n\n\n5. Install Anaconda\nClick the “Install” button to start the installation process. This may take a few minutes.\n\n\n\nInstall\n\n\n\n\n6. Complete the Installation\nOnce installation is complete, you’ll see a confirmation message. Click “Continue” and close the installation wizard by clicking “Close”.\n\n\n\nInstallation Complete\n\n\n\n\n\nClose Installation Wizard\n\n\n\n\n7. Move the Installer File to Trash (Optional)\n\n\n\nMove the Installer to Trash\n\n\n\n\n8. If prompted to update the navigator, select “No, don’t show again”\n\n\n\nDon’t Update\n\n\n\n\n9. You’re NOT REQUIRED to Log in/Sign up for Anaconda Cloud; close the prompt by clicking the “x” button\n\n\n\nDon’t Log in/Sign up\n\n\n\n\n10. Access Spyder through Anaconda Navigator\n\nOpen Anaconda Navigator, which is now installed on your system.\n\n\n\n\nLaunch Anaconda Navigator\n\n\n\nLocate Spyder and click “Launch” to open the Spyder IDE.\n\n\n\n\nLaunch Spyder\n\n\n\n\n\nSpyder"
  },
  {
    "objectID": "python_primer/unit0/guides/anaconda-mac.html#conclusion",
    "href": "python_primer/unit0/guides/anaconda-mac.html#conclusion",
    "title": "Anaconda and Spyder Installation Guide for macOS",
    "section": "Conclusion",
    "text": "Conclusion\nCongratulations! You’ve successfully installed Anaconda and Spyder on your macOS computer. Utilize Spyder for scientific computing and Python development.\nFor further guidance on using Anaconda, refer to the official documentation at https://docs.anaconda.com/.\nIf you encounter any issues or have questions, seek assistance from the Anaconda community or consult the documentation for troubleshooting tips."
  },
  {
    "objectID": "python_primer/unit1/modules/module3.html",
    "href": "python_primer/unit1/modules/module3.html",
    "title": "Module 3: Booleans, strings, built-in functions, types",
    "section": "",
    "text": "By the end of this module you will be able to:\n\nPractice working with Boolean expressions and variables.\nPractice examples with strings\nStart to use built-in functions\nDelve into the notion of type"
  },
  {
    "objectID": "python_primer/unit1/modules/module3.html#objectives",
    "href": "python_primer/unit1/modules/module3.html#objectives",
    "title": "Module 3: Booleans, strings, built-in functions, types",
    "section": "",
    "text": "By the end of this module you will be able to:\n\nPractice working with Boolean expressions and variables.\nPractice examples with strings\nStart to use built-in functions\nDelve into the notion of type"
  },
  {
    "objectID": "python_primer/unit1/modules/module3.html#boolean-variables-two-examples",
    "href": "python_primer/unit1/modules/module3.html#boolean-variables-two-examples",
    "title": "Module 3: Booleans, strings, built-in functions, types",
    "section": "3.0 Boolean variables: two examples",
    "text": "3.0 Boolean variables: two examples\nRecall:\n\nAn integer variable takes on values like 5 and -33:\nx = 5\ny = -33\nA floating-point variable stores real numbers like:\nx = 5.0014\ny = -33.3333334\nA string variable stores strings or chars, as in:\ns = 'hello'\nc = 'z'\nA boolean variable stores one of two values: True or False\n\nFor example:\na = True\nprint(a)\n\nb = False\nprint(b)\n\nc = not a\nprint(c)\n\nd = a or b\nprint(d)\n\ne = a and b\nprint(e)\n\n\n\n\n\n\nExercise 3.1\n\n\n\nType up the above in my_boolean_example.py.\nSubmit your program my_boolean_example.py.\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\n\nThe words True and False are reserved words in Python.\nA boolean variable can store only one of these values:\na = True\nb = False\n\nTrue and False start with uppercase alphabets.\nThe quote-delimited strings 'True' and 'False' are not the same as True and False.\n\nJust as we could perform arithmetic on integer variables, so can we perform boolean operations on boolean variables.\nThe simplest one is not as shown below:\na = True\nc = not a\nExplanation about how the not-operation works:\n\nSince a has the value True then not a will have the value False\nThus, c will have the value False.\n\nSimilarly, not-operation can also be implemented as shown below\na = False\nc = not a\nprint(c)\nwill print True.\nLet us the consider or-operation:\nd = a or b\nExplanation about how the or-operation works:\n\na or b will be True when any one of the two i.e., a or b is True.\nAnother way to state it: a or b will be False only when both a and b are False.\nThe following table shows all the logical possibilities for the or-operation:\n\n\n\na\n\n\nb\n\n\nd = a or b\n\n\n\n\nFalse\n\n\nFalse\n\n\nFalse\n\n\n\n\nFalse\n\n\nTrue\n\n\nTrue\n\n\n\n\nTrue\n\n\nTrue\n\n\nTrue\n\n\n\n\nTrue\n\n\nFalse\n\n\nTrue\n\n\n\n\nLet us the consider and-operation:\ne = a and b\nExplanation about how the and-operation works:\n\na and b will be True only when both are True.\nThe following table shows all the logical possibilities for the and-operation:\n\n\n\na\n\n\nb\n\n\nc = a and b\n\n\n\n\nFalse\n\n\nFalse\n\n\nFalse\n\n\n\n\nFalse\n\n\nTrue\n\n\nFalse\n\n\n\n\nTrue\n\n\nTrue\n\n\nTrue\n\n\n\n\nTrue\n\n\nFalse\n\n\nFalse\n\n\n\n\n\n\n\nLet’s look at another example:\na = True\nb = True\n\na = not a       \nx = a and b\ny = a or b\nprint(x, y)\n\n\n\n\n\n\nExercise 3.2\n\n\n\nType up the above in my_boolean_example2.py.\nSubmit your program my_boolean_example2.py.\n\n\nThe explanation of the above program is as shown below:\n\nFirst, let’s look at the following lines of code:\na = True\nb = True\n\nHere, there are two boolean variables, each of which is assigned a (boolean) value.\nThink of the variables as “boxes” in the usual way but as boxes that can hold only boolean values (True or False).\n\nNext, let’s look at the following lines of code:\na = not a\n\nHere, the value in a before this executes is True\nSo, not a is False.\nThis gets stored in a\nSo, after the statement executes a will have the value False.\n\nFurther, let’s look at the following lines of code:\nx = a and b\n\nWe know that a has the value False in it, while b has the value True.\nThus, the and operator is applied to the values False and True.\nYou can picture this as: False and True.\nWhat is the result?\nSimilar to applying the “rules of multiplication” to two numbers, we apply the rules of and to False and True. \nThe result is: False.\nThus, the value False is assigned to the variable x.\n\nFinally, let’s look at the following lines of code:\ny = a or b\nBecause a is now False and b is True, the result in y will be:"
  },
  {
    "objectID": "python_primer/unit1/modules/module3.html#combining-boolean-operators",
    "href": "python_primer/unit1/modules/module3.html#combining-boolean-operators",
    "title": "Module 3: Booleans, strings, built-in functions, types",
    "section": "3.1 Combining Boolean operators",
    "text": "3.1 Combining Boolean operators\nConsider\na = True\nb = False\nc = True\nu = (a and b) or (a or b)\nv = (not u) or (not (b and c))\nprint(u, v)\nLet’s draw an expression diagram to help us understand what happens with the first expression: \n\n\n\n\n\n\nExercise 3.4\n\n\n\nType up the above in my_boolean_example3.py.\nSubmit your program my_boolean_example3.py.\nRecommended but not required for submission in this exercise: Draw an expression diagram to work out the result for the second expression (the value of v) above.\n\n\nBoolean expressions can be constructed with numeric variables and their comparison operators:\nk = 5\nm = 3\nn = 8\na = True\nb = False\n\nfirst = (m &lt; k) and (n &gt; k)\nsecond = ( (k+m == n) or (k-m &lt; 10) )\nthird = first and (not second)\nfourth = first or a\nprint(first, second, third, fourth)\n\n\n\n\n\n\nNote\n\n\n\n\nSince the variable m is assigned the integer 3, k is assigned the integer value 5, the expression (m &lt; k) in first = (m &lt; k) and (n &gt; k) evaluates to True.\n\n\n\nThe variable n is assigned the integer value 8. Therefore, the expression (n &gt; k) in first = (m &lt; k) and (n &gt; k) also evaluates to True.\nThus, the resulting expression in line of code below,\nfirst = (m &lt; k) and (n &gt; k)\ntakes the following form:\nfirst = True and True\nThe above expression evaluates to True from the rules (the table) for and-operation.\n\n\n\n\n\n\n\n\n\nExercise 3.6\n\n\n\nType up the above in my_boolean_example4.py.\nSubmit your program my_boolean_example4.py.\nRecommended but not required for submission in this exercise: Draw an expression diagram to work out the result for the remaining three expressions above."
  },
  {
    "objectID": "python_primer/unit1/modules/module3.html#using-a-boolean-variable",
    "href": "python_primer/unit1/modules/module3.html#using-a-boolean-variable",
    "title": "Module 3: Booleans, strings, built-in functions, types",
    "section": "3.2 Using a Boolean variable",
    "text": "3.2 Using a Boolean variable\nTo see how a Boolean variable is used in practice, we will work through a somewhat elaborate example that will teach us other useful things.\nLet’s start with this program:\ndef print_search_result(A, search_term):\n    if search_term in A:\n        print('Found ', search_term)\n\nB = [15, 3, 23, 9, 14, 4, 6, 2]\nprint_search_result(B, 4)\nIn the above example program, the goal is to create a function that takes a list, and a search value (or search term) and looks inside the list to see if it exists.\nDoes the program work?\n\n\n\n\n\n\nExercise 3.8\n\n\n\nType up the above program in my_search_example.py to confirm.\nSubmit your program my_search_example.py.\n\n\n\n\n\n\n\n\nNote\n\n\n\n\nWe have exploited the in-operator in Python to examine whether or not an element exists in a list:\nif search_term in A:\nThis will return either True or False.\nAnd Python does the work of traversing the list and peeking inside to see if value (4 in this case) is in the list.\n\n\n\nNow consider the problem of also printing the position where it’s found:\ndef print_search_result(A, search_term):\n    for k in range(len(A)):\n        if A[k] == search_term:\n            print('Found', search_term, 'at position', k)\n\nB = [15, 3, 23, 9, 14, 4, 6, 2]\nprint_search_result(B, 4)\n\n\n\n\n\n\nExercise 3.9\n\n\n\n\nTo check if the above program works, type it up in my_search_example2.py.\nMake any changes required to make sure that the program prints the position where element of the list is found.\n\nSubmit your program my_search_example2.py.\n\n\n\n\n\n\n\n\nNote\n\n\n\n\nWe are now traversing the list ourselves:\nfor k in range(len(A)):\nHere, the variable k will start at 0 and go up to the last index (one less than the length of the list).\nAt each iteration, the program checks to see if the search term is equal to the list element at the current position (determined by k):\nif A[k] == search_term:\nIf the condition above evaluates to True, it means the program found the list element we are looking for.\n\n\n\n\n\n\n\n\n\nExercise 3.10\n\n\n\nThere is nothing to submit in this exercise. However, it is important for you to complete it on your own to understand the execution of the program:\nConsider the list and the user-defined function call as shown in the program below.\nB = [15, 4, 23, 9, 14, 4, 6, 2]\nprint_search_result(B, 4)\nNote that the function print_search_result(B, 4) was typed up in the previous exercise 3.9.\nTry tracing through the above program and also what happens when we instead have below.\nB = [15, 4, 23, 9, 14, 4, 6, 2]\nprint_search_result(B, 5)\n\n\nWhat we’d like to do is print something when a search term is not found in the list.\nConsider the following program:\ndef print_search_result(A, search_term):\n    for k in range(len(A)):\n        if A[k] == search_term:\n            print('Found', search_term, 'at position', k)\n    print('Not found:', search_term)\n\nB = [15, 3, 23, 9, 14, 4, 6, 2]\nprint_search_result(B, 4)\nprint_search_result(B, 5)\n\n\n\n\n\n\nExercise 3.11\n\n\n\n\nType up the above in my_search_example3.py.\nSubmit your program my_search_example3.py.\n\nRecommended but not required for submission in this exercise: Think through the execution of your program my_search_example3.py to see if it worked as intended. Explain to yourself what went wrong in the program.\n\n\nLet’s try another variation to see if we can improve the program my_search_example3.py as shown below:\ndef print_search_result(A, search_term):\n    for k in range(len(A)):\n        if A[k] == search_term:\n            print('Found', search_term, 'at position', k)\n        else:\n            print('Not found:', search_term)\n\nB = [15, 3, 23, 9, 14, 4, 6, 2]\nprint_search_result(B, 4)\nprint_search_result(B, 5)\n\n\n\n\n\n\nExercise 3.12\n\n\n\n\nType up the above in my_search_example4.py.\nSubmit your program my_search_example4.py.\n\nRecommended but not required for submission in this exercise: Think through the execution of your program my_search_example4.py to see if it worked as intended. Explain to yourself what went wrong in the program.\n\n\n\nWe’ll now see how a simple Boolean variable is commonly used in these types of problems:\ndef print_search_result(A, search_term):\n    found = False\n    pos = -1\n    for k in range(len(A)):\n        if A[k] == search_term:\n            found = True\n            pos = k\n\n    if found:\n        print('Found', search_term, 'at position', pos)\n    else:\n        print('Not found:', search_term)\n\nB = [15, 3, 23, 9, 14, 4, 6, 2]\nprint_search_result(B, 4)\nprint_search_result(B, 5)\n\n\n\n\n\n\nExercise 3.13\n\n\n\n\nType up the above in my_search_example5.py.\nSubmit your program my_search_example5.py.\n\nThe following part of the exercise is recommended but not required for submission: Trace through the program my_search_example5.py to understand the execution of the the above program."
  },
  {
    "objectID": "python_primer/unit1/modules/module3.html#returning-a-truefalse-value",
    "href": "python_primer/unit1/modules/module3.html#returning-a-truefalse-value",
    "title": "Module 3: Booleans, strings, built-in functions, types",
    "section": "3.3 Returning a True/False value",
    "text": "3.3 Returning a True/False value\nThe most common use of Boolean expressions is to write functionz that return either True or False.\nSuppose we want to determine whether or not (Hint: whether or not ⇒ true or false) a list has a negative number:\ndef has_negative(A):\n    for k in A:\n        if k &lt; 0:\n            return True\n    return False\n\nB = [2, 4, 8, -10]\nprint(has_negative(B))\nC = [1, 3, 5]\nprint(has_negative(C))\n\n\n\n\n\n\nExercise 3.14\n\n\n\n\nType up the above in my_search_negative.py.\nSubmit your program my_search_negative.py.\n\nThe following part of the exercise is recommended but not required for submission: Trace through the program my_search_negative.py to understand the execution of the the above program.\n\n\n\n\n\n\n\n\nExercise 3.15\n\n\n\nIn my_search_negative2.py complete the function below to identify whether or not a list has exactly two negative numbers:\ndef has_two_negatives(A):\n    # Write your code here\n\nB = [2, 4, 8, -10]\nprint(has_two_negatives(B))  # Should print False\nC = [1, -3, -5]\nprint(has_two_negatives(C))  # Should print True\nD = [1, -3, -5, -7]\nprint(has_two_negatives(D))  # Should print False\nSubmit your program my_search_negative2.py."
  },
  {
    "objectID": "python_primer/unit1/modules/module3.html#new-topic-strings-and-slicing",
    "href": "python_primer/unit1/modules/module3.html#new-topic-strings-and-slicing",
    "title": "Module 3: Booleans, strings, built-in functions, types",
    "section": "3.4 New topic: strings and slicing",
    "text": "3.4 New topic: strings and slicing\nIt is common to want to pull out parts of strings.\nFor example, if the user in some application types 'DC 20052', we may want just the zip code:\ns = 'DC 20052'\nstate = s[0:2]\nzip = s[3:8]\nprint(state, zip)\nExplanation about how the slicing in strings works: \n\nThe slicing expression 0:2 refers to all the characters of the string from the first (i.e.,the 0-th indexed) character up to the character before the one at position-2 (i.e., associated with index-1).\nThus, 0:2 refers to characters at positions or indices 0 through 1.\nSimilarly, 3:8 refers to all the characterss from position- or index-3 up to 7.\nSlicing ranges are specified so that the left end is inclusive and the right end is exclusive:\nThus, 3:8 means “including 3” and “excluding 8”.\nRecall:\n\nFor any range of numbers like 3,4,5,6,7, exclusive would mean the numbers 4, 5, 6 (excluding 3, excluding 7).\nInclusive would include the ends: 3,4,5,6,7.\n\n\n\n\n\n\n\n\nExercise 3.16\n\n\n\nIn my_slicing.py write code to extract the actual phone number (202-994-4000) from\ns = 'phone: 202-994-4000'\n# Write your code here\nSubmit your program my_slicing.py.\n\n\nSlicing expressions work for lists in the same manner as strings:\nA = ['may','the','force','be','with','you']\nprint(A[2:5])\n\n\n\n\n\n\nExercise 3.18\n\n\n\n\nBefore typing it up in my_slicing2.py try and guess what the above will print.\nType up the program above in my_slicing2.py.\n\nSubmit your program my_slicing2.py.\n\n\nLet’s look at slicing when we don’t know the size:\n\nConsider the zipcode example where the 5-digit zip code may preceded by all kinds of text, as in:\n'DC 20052'\n'District of Columbia, 20052'\n'20052'\n'My zip code is 20052'\nSo, all we know is that the last 5 characters in the string need to be extracted.\nThen, we need to get the length of the string.\nLet’s put this in a function:\ndef extract_zip(s):\n    start = len(s) - 5\n    end = len(s)\n    return s[start:end]\n\nexample1 = 'DC 20052'\nexample2 = 'District of Columbia, 20052'\nexample3 = '20052'\nprint(extract_zip(example1))\nprint(extract_zip(example2))\nprint(extract_zip(example3))\nNote that\nend = len(s)\ngives us the index just past the last index.\nAnd\nstart = len(s) - 5\ngives the index 5 position before the end.\nSo, the slice becomes:\nreturn s[start:end]\n\n\n\n\n\n\n\nExercise 3.19\n\n\n\nIn my_slicing3.py, write a program that implements a function to extract the phone number in the same way as shown above, when the first part could be anything like “phone: 202-994-4000” or “my number is 202-994-4000”.\nSubmit your program my_slicing3.py.\n\n\n\n\n\n\n\n\nNote\n\n\n\nSlicing has more to it than two numbers. We’ll have more to say about this in Unit-2."
  },
  {
    "objectID": "python_primer/unit1/modules/module3.html#a-different-version-of-print",
    "href": "python_primer/unit1/modules/module3.html#a-different-version-of-print",
    "title": "Module 3: Booleans, strings, built-in functions, types",
    "section": "0.7 A different version of print",
    "text": "0.7 A different version of print\nConsider these two variations of using print:\nx = 2\ns = 'eat'\ny = 3.141\n\nprint('I love ' + str(x) + ' ' + s + ' ' + str(y))\n\nprint('I love', x, s, y)\n\n\n\n\n\n\nExercise 0.22\n\n\n\nType the above in my_print_example.py and submit it.\n\n\n\n\n\n\n\n\nNote\n\n\n\n\nThe first version above uses string concatenation to send one big string to print:\nprint( 'I love ' + str(x) + ' ' + s + ' ' + str(y) )\nIn the second version, the strings and variables given to print (x, s, y) are separated by commas.\nHere, print treats the four things as separate entities:\nprint('I love', x, s, y)\nAnd it, automatically inserts a space between the different things (that are separated by commas).\nNote that here, there is no need to convert numbers to strings."
  },
  {
    "objectID": "python_primer/unit1/modules/module0.html",
    "href": "python_primer/unit1/modules/module0.html",
    "title": "Module 0: A first look at lists",
    "section": "",
    "text": "By the end of this module you will be able to:\n\nUnderstand how a list is different from a variable\nExplore the syntax around using lists in programs\nUse lists in programs to solve problems\nPractice mental execution (tracing) and debugging related to lists"
  },
  {
    "objectID": "python_primer/unit1/modules/module0.html#objectives",
    "href": "python_primer/unit1/modules/module0.html#objectives",
    "title": "Module 0: A first look at lists",
    "section": "",
    "text": "By the end of this module you will be able to:\n\nUnderstand how a list is different from a variable\nExplore the syntax around using lists in programs\nUse lists in programs to solve problems\nPractice mental execution (tracing) and debugging related to lists"
  },
  {
    "objectID": "python_primer/unit1/modules/module0.html#an-example-of-a-list",
    "href": "python_primer/unit1/modules/module0.html#an-example-of-a-list",
    "title": "Module 0: A first look at lists",
    "section": "0.0 An example of a list",
    "text": "0.0 An example of a list\nConsider this program:\n# List example:\nA = [1, 4, 9, 16, 25]\n\nfor i in range(5):\n    print(A[i])\n\n# In contrast, a plain variable:\nk = 100\nprint(k)\n\n\n\n\n\n\nExercise 0.1\n\n\n\nIn my_list1.py, type up the above and examine the output. Then, inside the above for-loop, but before the first print statement, add an additional line of code to also print the value of i so that each value of i is printed on a line by itself. Submit this modified version of my_list1.py.\n\n\nRemember how we think of a variable as a box that stores values?\n\nThis is indeed how we think of the variable k above. \nIn contrast, a list variable is a single name given to a collection of boxes: \nThe above collection has a current size, in this case 5.\nThe values in a list are called elements of the list.\nThere is an implied order going from the first to the last element.\nIt turns out, we can access individual elements in the list using indices: \n\n\n\n\n\n\n\nNote\n\n\n\n\nList indices start at 0\nAnd end at one less than the size.\nThus, in the above example, the size of the list is 5.\nThe indices (positions in the list) are: 0, 1, 2, 3, 4.\nThe last valid position (or index), which is 4 here, is one less than the size, 5.\n\n\n\nConsider this program:\nA = [1, 4, 9, 16, 25]\n\n# Use len to get the current size:\nn = len(A)\nprint('Size of A: ' + str(n))\n\n# Add an element to the list:\nA.append(36)\nn = len(A)\nprint('Size of A: ' + str(n))\n\n# Change a particular element:\nA[3] = 100\nprint('The list: ' + str(A))\n\n\n\n\n\n\nExercise 0.2\n\n\n\nType up the above in program my_list2.py and submit it.\n\n\nLet’s point out:\n\nObserve how we obtain the current size and add an element: \nNext, observe square brackets being used for different purposes: \nWe could use a variable to access elements, as long as that variable has a valid integer value within the range of indices, for example:\nk = 3\nA[k] = 100\nRemember len?\n\nWe had used len earlier for the length of strings, as in\ns = 'hello'\nprint(len(s))    # Prints 5\nHere, len works to give us the length of a list, as in:\nA = [1, 4, 9, 16, 25]\nprint(len(A)) # print-statement will return the integer 5\n\nWe can access elements in the list in the following manner:\nA = [1, 4, 9, 16, 25]\n\ni = 3         # i's value 3 is valid for a size 5 list\nprint(A[i])\n\ni = 7         # 7 is not valid\nprint(A[i])\nIn the above example, there is no element A[7] in a list that only has 5 elements.\n\n\n\n\n\n\n\nExercise 0.3\n\n\n\nType up the above in my_list3.py and run it. The list A has only has 5 elements. Hence, there is no element A[7] in the list. The program would return an error. Fix the error by replacing i = 7 with another number (not 3). Make sure the program does not return an error. Submit your modified my_list3.py.\n\n\n\n\n\n\n\n\nExercise 0.4\n\n\n\nIn my_list4.py, make a list with the values 1,2,3,4,5,6,7,8,9,10. Then, set up a for-loop so that only the odd numbers are printed as in:\n1\n3\n5\n7\n9"
  },
  {
    "objectID": "python_primer/unit1/modules/module0.html#more-list-examples",
    "href": "python_primer/unit1/modules/module0.html#more-list-examples",
    "title": "Module 0: A first look at lists",
    "section": "0.1 More list examples",
    "text": "0.1 More list examples\nJust as we can add elements to list, so can we remove elements, as in:\nA = [64, 9, 25, 81, 49]\nprint(A)\n\nA.remove(9) \n#   This statement will remove the element, 9 from the list.\n#   The number 9, is not an index. \n#   It is a value of the element within the list.\n\nprint(A)\n\n\n\n\n\n\nExercise 0.6\n\n\n\nConfirm the output by typing up the above in my_list5.py. Then, explore what would go wrong if you try and remove something that’s not in the list. For example, change the line A.remove(9) to A.remove(10). Submit your my_list5.py with the former (A.remove(9)). \n\n\n\n\n\n\n\n\nNote\n\n\n\n\nThe elements in a list do not need to be in sorted order, as the above example shows. They can be in any order, but once in that order, they stay in that order unless we make a change to the elements in the list.\nAlthough our examples so far have lists of integers, we will later build lists with real numbers and strings.\n\n\n\nConsider this example:\n# List constructed by typing the elements in:\nA = [1, 4, 9, 16, 25]\nprint(A)\n\n# List built using code to construct elements:\nB = []                 # An empty list\nfor i in range(5):\n    k = (i+1) * (i+1) \n    B.append(k)\nprint(B)\n\n\n\n\n\n\nExercise 0.7\n\n\n\nType up the above in my_list6.py. Notice that the lists A and B have the same elements. Submit my_list6.py.\nThe following part of the exercise is not required for submission.\nHowever, it is important for you to complete it on your own to understand the execution of the program my_list6.py.\n\nTo confirm your output, trace through the changing values of i, k and the list B in each iteration of the for-loop in a spreadsheet or a document.\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\nIt is possible to create an empty list and give it a variable name as in:\nB = []                 # An empty list\nWe could then add elements by appending.\nOne can shorten the lines inside the loop:\nB = []                 # An empty list\nfor i in range(5):\n    B.append( (i+1) * (i+1) )\nHere, we’ve fed the arithmetic expression (i+1) * (i+1) directly into append, without using a separate variable k to first calculate and then append.\n\n\n\n\n\n\n\n\n\nExercise 0.8\n\n\n\nIn my_odd_list.py fill in the necessary code below to create a list with the first N odd numbers:\nN = 10\nodd_numbers = []\n# WRITE YOUR CODE HERE using one for-loop\nprint(odd_numbers)\nIn this case, the output should be:\n[1, 3, 5, 7, 9, 11, 13, 15, 17, 19]\n(These are the first 10 odd numbers).\n\n\nWe do not need to traverse in exactly the order of elements in the list:\n\nFor example:\nA = [15, 25, 35, 45, 55, 65, 75, 85, 95, 105]\n\nfor i in range(9, 0, -2):\n    print(A[i])\nHere, we’re starting at the last element, traversing the list from end to beginning in steps of 2.\n\n\n\n\n\n\n\nExercise 0.9\n\n\n\nType up the above program in my_list7.py and submit it.\nThe following part of the exercise is not required for submission.\nHowever, it is important for you to complete it on your own to understand the execution of the program my_list7.py.\n\nTo confirm your output, trace through the above code showing the values of i and A[i] at each iteration of the for-loop.\nConfirm with the result from your code, my_list7.py."
  },
  {
    "objectID": "python_primer/unit1/modules/module0.html#a-strange-thing-with-lists",
    "href": "python_primer/unit1/modules/module0.html#a-strange-thing-with-lists",
    "title": "Module 0: A first look at lists",
    "section": "0.2 A strange thing with lists",
    "text": "0.2 A strange thing with lists\nLet’s first look at copying between regular variables, as in:\nx = 5\n\ny = x     # Copy the value of x into y\n\nx = 6     # Change the value of x\n\nprint(x)  # x is no longer equal 5. Now, x = 6\nprint(y)  # Does it affect what's in y?\n          # No. y = 5. y retains original the value of x it was assigned (x = 5) \n\n\n\n\n\n\nExercise 0.10\n\n\n\nConsider the example above that involves copying a variable. The following can be observed in the program:\n\nFirst, the value of variable x is initialized, i.e., x = 5.\nNext, the value associated with variable x is assigned to a variable y, i.e., value of x is copied into y.\n\nThen, the value of x is changed, i.e., x = 6.\nFinally, the values of y and x are printed using print(y) and print(x).\nType up the program above in my_variable_copy.py and run it.\nWhen you run the program you will notice that the value of y is the same as the value of x that was copied into it.\n\nAny changes to x after its value was copied into y did not change the value of y.\n\n\nSubmit my_variable_copy.py.\n\n\n\nNext, consider this:\nA = [1, 4, 9, 16, 25]\nprint(A)    # A = [1, 4, 9, 16, 25]\n\nB = A\n\nA[0] = 49   # Change some value in list A\n\nprint(A)    # A = [49, 4, 9, 16, 25]\nprint(B)    # Does it affect what's in list B?\n            # Yes, B = [49, 4, 9, 16, 25]\n            # After the line of code B = A,\n            # any change in the elements of A also \n            # makes a corresponding \n            # change in the elements of B.\n\n\n\n\n\n\nExercise 0.11\n\n\n\nNow consider the example above that involves copying a list.\nThe following can be observed in the program:\n\nFirst, a list A of 5 elements is initialized, i.e., A = [1, 4, 9, 16, 25].\nThe list A is printed using print(A) and returns [1, 4, 9, 16, 25].\nNext, a list B is assigned to list A, i.e., B = A.\n\nThen, the element A[0] is changed, i.e., A[0] = 49.\nList A is printed again and now returns [49, 4, 9, 16, 25].\nFinally, the list B is printed using print(B).\nType up the above in my_list_copy.py and run it.\nWhen you run the program, you will notice something different than in the previous Exercise 0.10.\n\nFollowing the line of code where you typed B = A, the change in the elements of A caused the same change in the elements of B.\n\n\nSubmit my_list_copy.py.\n\n\nLet’s explain further:\n\nClearly something strange is going on with lists.\nOne way to think of it is to go back to our picture of a list: \nWe’ll now sketch out an analogy:\n\nThink of the list as a building with rooms (the boxes): \nThen, the list variable `A is really something that holds the building address (the building number).\nThe rooms in the building are numbered 0, 1, etc.\nThe first room is A[0], the second is A[1], etc.\n\nNow, consider an assignment like:\nB = A\nThen, in the building analogy, what we get is: \nThis is why, when we change the A list as in\nA[0] = 49    # Change some value in list A\nThen, we achieve \n\n\n\n\n\n\n\nNote\n\n\n\nNowhere in our code is the building number (4701) explicitly written. Building numbers (they are technically called pointers) are handled by Python, and made invisible to us because we don’t need them.  (Yes, we can print the building number if we wish, but that’s an advanced topic.)\n\n\n\nWe obviously want to know: is it possible to create a complete copy of A in B? As in: \nBecause then, if we change A, it does not affect B: \nThis is what it looks like in code:\nA = [1, 4, 9, 16, 25]\nprint(A)     # A = [1, 4, 9, 16, 25]\n\nB = A.copy() # This is NOT the same as B = A\n\nA[0] = 49    # Change some value in list A\n\nprint(A)     # A = [49, 4, 9, 16, 25]\nprint(B)     # Does it affect what's in list B?\n             # No, B = [1, 4, 9, 16, 25]\n             # After the line of code B = A.copy(),\n             # any change in elements of A, DOES NOT make\n             # a corresponding change in elements of B.\n\n\n\n\n\n\n\nExercise 0.12\n\n\n\nType up the above in my_list_copy2.py to find out if any values have changed in list B.\nSubmit my_list_copy2.py.\n\n\nSo, which (B = A or B = A.copy()) do we use?\n\nGenerally, you should use A.copy() unless you intentionally want the same “building number”.\nIn that, you have to be careful."
  },
  {
    "objectID": "python_primer/unit1/modules/module0.html#different-ways-of-iterating-through-a-list",
    "href": "python_primer/unit1/modules/module0.html#different-ways-of-iterating-through-a-list",
    "title": "Module 0: A first look at lists",
    "section": "0.3 Different ways of iterating through a list",
    "text": "0.3 Different ways of iterating through a list\nConsider this example:\nA = [1, 3, 5, 7, 9]\n\ntotal = 0\nfor i in range(5):\n    total = total + A[i]\n\nprint(total)\n\n\n\n\n\n\nExercise 0.13\n\n\n\nType up the above in my_total_example1.py and submit it.\nThe following part of the exercise is not required for submission.\nHowever, it is important for you to complete it on your own to understand the execution of the program my_total_example1.py.\n\nTo confirm your output, trace through the changing values of i, A and total through each iteration of the loop in a spreadsheet or a document.\n\n\n\nNow let’s look at two different ways of writing the same loop (we’ll only show the loop part):\n\nThe first one:\nfor i in range(len(A)):\n    total = total + A[i]\n\n\n\n\n\n\n\nNote\n\n\n\n\nInstead of figuring out the length of a list by looking at the list, we can ask Python to compute the length and use that directly:\nfor i in range(len(A)):\n    total = total + A[i]\nThis way, we don’t need to track the length ourselves (if elements get added or removed).\n\n\n\n\nThe second way is even better:\nfor k in A:\n    total = total + k\nHere:\n\nHere the iteration is directly over the contents of the list.\nThe variable k is not an index but takes on the actual values in the list.\nWith a list like\nA = [1, 3, 5, 7, 9]\n\ntotal = 0\nfor k in A:\n    total = total + k\nIn the first iteration k is 1, in the second k is 3, in the third k is 5, and so on.\nSo, naturally, these get added directly into the variable total.\n\nYou can think of the first approach (using an index i and A[i]) as index iteration.\nThe second (using the value directly), as content iteration.\nWhich one should one use?\n\nUse content-iteration, whenever you can.\nIn some cases, however, you’ll find index iteration is useful, especially when you need the position where something occurs in the list.\n\n\n\n\n\n\n\n\nExercise 0.14\n\n\n\nIn my_content_iteration.py, use content-iteration to print the contents of the list A below:\nA = [2020, 2016, 2012, 2008, 2004, 2000]\n\n# Write your code here:\nThe output should be one number per line in the order that the numbers appear in the list as shown below.\n2020\n2016\n2012\n2008\n2004\n2000\nSubmit the program, my_content_iteration.py"
  },
  {
    "objectID": "python_primer/unit1/modules/module0.html#working-with-multiple-lists",
    "href": "python_primer/unit1/modules/module0.html#working-with-multiple-lists",
    "title": "Module 0: A first look at lists",
    "section": "0.4 Working with multiple lists",
    "text": "0.4 Working with multiple lists\nSuppose we have two lists of the same length like this:\nA = [1, 4, 9, 16, 25]\nB = [1, 3, 5, 7, 11]\nLet’s examine different ways of performing addition on the elements.\nFirst, let’s add up the total of all 10 numbers:\nA = [1, 4, 9, 16, 25]\nB = [1, 3, 5, 7, 11]\n\ntotal = 0\nfor k in A:\n    total = total + k\n\nfor k in B:\n    total = total + k\n\nprint(total)\n\n\n\n\n\n\nExercise 0.15\n\n\n\nType the above in my_twolist1.py and submit the program.\nThe following part of the exercise is not required for submission.\nHowever, it is important for you to complete it on your own to understand the execution of the program my_twolist1.py.\n\nTo confirm your output, trace through the changing values of i, k and total through each iteration of the loop in a spreadsheet or a document.\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\nIn the above case, we added all the numbers contained in both lists, to get a single number.\nNotice how natural it is to use content-iteration.\nWhat if we want a third list whose elements are the additions of corresponding elements from each list?\n1    4    9    16    25\n1    3    5     7    11\n-----------------------\n2    7   14    23    36\nHere, the last row is a new (third) list.\n\n\n\nLet’s write code to perform element-by-element addition:\nA = [1, 4, 9, 16, 25]\nB = [1, 3, 5, 7, 11]\n\nC = []\nfor i in range(5):\n    element_total = A[i] + B[i]\n    C.append(element_total)\n\nprint(C)\n\n\n\n\n\n\nExercise 0.16\n\n\n\nType the above in my_twolist2.py.\n\nPrint the list inside the loop, by adding a print statement right after the append occurs.\nYour program output should be as shown below.\n2\n7\n14\n23\n36\n[2, 7, 14, 23, 36]\nSubmit your program my_twolist2.py with the added print statement.\n\nThe following part of the exercise is not required for submission.\nHowever, it is important for you to complete it on your own to understand the execution of the program my_twolist2.py.\n\nTry and trace through the values of i and element_total in each iteration of the loop and see for yourself how the list C changes across the iterations. Do this, as usual, in a spreadsheet or a document.\nExplain to yourself why, in this case, index-iteration is a better choice than content iteration."
  },
  {
    "objectID": "python_primer/unit1/modules/module0.html#moving-elements-around-in-a-list",
    "href": "python_primer/unit1/modules/module0.html#moving-elements-around-in-a-list",
    "title": "Module 0: A first look at lists",
    "section": "0.5 Moving elements around in a list",
    "text": "0.5 Moving elements around in a list\nConsider a list like:\nA = [1, 4, 9, 16, 25]\nNext, suppose we want to swap the elements in the 2nd and 4th positions within the same list (without creating a new list).\nThat is, we want to write code so that:\nA = [1, 4, 9, 16, 25]\n\n# ... code to swap 2nd and 4th elements ...\n\nprint(A)\n\n# Should print [1, 16, 9, 4, 25]\nTo achieve that:\nA = [1, 4, 9, 16, 25]\n\ntemp = A[1]\nA[1] = A[3]\nA[3] = temp\n\nprint(A)\n\n\n\n\n\n\nExercise 0.18\n\n\n\nType the above in my_list_swap1.py.\nThe following part of the exercise is not required for submission.\nHowever, it is important for you to complete it on your own to understand the execution of the program my_listswap1.py.\n\nTry and trace through the execution of the above showing the values in temp and the list after each line executes.\nDo this, as usual, in a spreadsheet or a document.\n\n\n\n\n\n\n\n\n\nExercise 0.19\n\n\n\nType the code you just wrote, i.e., my_list_swap1.py, in my_list_swap2.py.\n\nThen, replace the middle three lines with following:\nA[1] = A[3]\nA[3] = A[1]\nYou should notice that the program my_list_swap1.py swapped the elements in the list. But my_list_swap2.py copied the the elements in the list.\nThe output of my_list_swap2.py should be as shown below.\n[1, 16, 9, 16, 25]\nSubmit my_list_swap2.py\n\n\n\n\n\n\n\n\n\nExercise 0.20\n\n\n\nUse the “temp” variable idea to perform a left-rotate of a list in my_left_rotate.py. Thus, given\nA = [1, 4, 9, 16, 25]\n# ... your code here...\n\nprint(A)\n# Should print [4, 9, 16, 25, 1]\nThus everything but the first element moves leftwards, while the first element moves to the last place. Use a for-loop to move most (but not all) elements."
  },
  {
    "objectID": "python_primer/unit1/modules/module0.html#lists-of-strings-characters-or-real-numbers",
    "href": "python_primer/unit1/modules/module0.html#lists-of-strings-characters-or-real-numbers",
    "title": "Module 0: A first look at lists",
    "section": "0.6 Lists of strings, characters, or real numbers",
    "text": "0.6 Lists of strings, characters, or real numbers\nWe have thus far seen lists of integers. One can make a list of other kinds of elements.\nFor example:\n# Some real numbers:\nC = [1.1, 2.22, 3.333, 4.4444]\ntotal = 0\nfor x in C:\n    total = total + x\nprint('Average =', total/4)\n\n# A way to extract the characters in a string into a list:\ns = 'abcdef'\nB = list(s)\nprint(B)\n\n# A list of strings:\nA = ['cats', 'and', 'dogs']\ns = ''\nfor w in A:\n    s += w\nprint(s)\n\n\n\n\n\n\nExercise 0.21\n\n\n\nType the following program in my_other_lists.py:\nA = ['chutes', 'and', 'ladders']\ns = ''\nfor w in A:\n    s += w\nprint(s)\nNotice that the above program will print chutesandladders.\nModify the program so that the output of the program should be as shown below.\nchutes and ladders\nNote that there is a space between each word.\nSubmit my_other_lists.py."
  },
  {
    "objectID": "python_primer/unit1/modules/module0.html#conditionals-and-lists",
    "href": "python_primer/unit1/modules/module0.html#conditionals-and-lists",
    "title": "Module 0: A first look at lists",
    "section": "1.6 Conditionals and lists",
    "text": "1.6 Conditionals and lists\nSuppose we have a list of numbers, representing daily profits (sometimes negative, sometimes positive) and we only want to add up the positive numbers:\nearnings = [-5, 2, 3, -9, 12, 4, -30]\ntotal = 0\nfor k in earnings:\n    if k &gt;= 0:\n        total += k\n\nprint('Total profit =', total)\n\n\n\n\n\n\nExercise 1.20\n\n\n\nTrace through the values of total and k in the program above. There is nothing to submit for this exercise.\n\n\n\n\n\n\n\n\nExercise 1.21\n\n\n\nGiven a list like:\nA = [-5, 2, 4, -9, 12, 13, -30, -21, -20]\nwe see that 12, 13 and -21, -20 are pairs of consecutive numbers.\n\nType up the program below called my_consecutive.py, which uses a loop and a conditional to identify consecutive pairs and print them.\nA = [-5, 2, 4, -9, 12, 13, -30, -21, -20]\nfor i in range(len(A) - 1):\n    if abs(A[i] - A[i + 1]) == 1:\n        print(\"Consecutive pair found: \",A[i], A[i + 1])\n\nFor the above list, the output should be:\nConsecutive pair found: 12 13\nConsecutive pair found: -21 -20\n\n\nNext, let’s write a program that asks the user to enter a number, that we then check is in a list of numbers:\n# The list of numbers:\nA = [-5, 2, 4, -9, 12, 13, -30]\n\n# Receive what the user types in (as a string):\nuser_str = input('Enter an integer: ')\n\n# Convert string to integer:\nk = int(user_str)\n\n# Check whether in the list:\nif k in A:\n    print(k,'is in the list')\nelse:\n    print(k,'is not in the list')\n\n\n\n\n\n\nExercise 1.23\n\n\n\nType up the above program in my_listcheck.py, run it for the following user inputs and examine the output in each case:\n\n100\n35.364 (For a float-type input explain to yourself why you may get an error.)\n4\n\nRun each case listed above and understand the output or error you are getting.\nSubmit the program my_listcheck.py.\n\n\n\n\n\n\n\n\nNote\n\n\n\nThe in operator checks for membership in the list:\nif k in A:\n\n\n\n\n\n\n\n\nExercise 1.24\n\n\n\nSuppose you are given two lists like:\nA = [-5, 2, 4, -9, 12, 13, -30, -21, -20]\nB = [2, -9, 11, 16, 13]\nNotice that some elements of A (like 2) also exist in B. In my_twolist.py, use the list membership idea to print those elements of A that are also in B. For the above example, the output should be:\n2 in A also found in B\n-9 in A also found in B\n13 in A also found in B"
  },
  {
    "objectID": "python_primer/unit1/modules/module0.html#more-examples-with-lists",
    "href": "python_primer/unit1/modules/module0.html#more-examples-with-lists",
    "title": "Module 0: A first look at lists",
    "section": "1.7 More examples with lists",
    "text": "1.7 More examples with lists\nConsider the following program that aims to find duplicates in a list:\nA = [2, 9, 2, 6, 4, 3, 3, 2]\nfor k in A:\n    if k in A:\n        print('Duplicate found:', k)\nIn the list, we can see that 2 occurs thrice, and 3 occurs twice. Both should be listed as duplicates. Is this the case?\n\n\n\n\n\n\nExercise 1.25\n\n\n\nTrace through the loop’s iterations in the above program and explain to yourself why it does not work.\nThere is nothing to submit for this exercise.\n\n\nNow consider this variation:\nA = [2, 9, 2, 6, 4, 3, 3, 2]\nfor i in range(len(A)-1):\n    for j in range(i+1, len(A)):\n        if A[i] == A[j]:\n            print('Duplicate found:', A[i])\n\n\n\n\n\n\nExercise 1.26\n\n\n\nType up the above program in my_listcheck2.py and submit it.\nThe following part of the exercise is not required for submission:\n\nTrace through the loop’s iterations in the above program in a separate spreadsheet or document. Explain the output to yourself. Why does the inner loop start with i+1?"
  },
  {
    "objectID": "python_primer/unit1/modules/module0.html#functions-and-lists",
    "href": "python_primer/unit1/modules/module0.html#functions-and-lists",
    "title": "Module 0: A first look at lists",
    "section": "2.7 Functions and lists",
    "text": "2.7 Functions and lists\nCan a function receive a list as parameter? Can it return one? Is this useful? Yes, yes, yes.\nLet’s start with a list as parameter:\ndef compute_total(B):\n    total = 0\n    for k in B:\n        total += k\n    return total\n\nA = [1, 3, 5, 7]\nt = compute_total(A)\nprint(t)\n\n\n\n\n\n\nExercise 2.18\n\n\n\nTry tracing through the execution of the above program, including loop interactions. The tracing activity is for you understand the execution of the program and you don’t need to submit a written answer. However, it is encouraged that you try it to fully-understand the execution of the above program and to confirm your result.\nThe following portion of the exercise is required for submission of this exercise:\n\nType up the above in my_func_example11.py by including a print(k) inside the for-loop.\nSubmit your program my_func_example11.py.\n\n\n\n\n\n\n\n\n\nExercise 2.19\n\n\n\nIn my_even_numbers.py, complete the code in the function below so that the even numbers in a list are printed out:\ndef print_even(A):\n    # Insert your code here\n\nA = [1, 3, 5, 6, 7, 8]\nprint_even(A)\nWrite the function so that the output is as shown below:\nFound even:  6\nFound even:  8\nHint: Recall how to use the remainder operator from the previous module (conditionals and loops).\n\nComplete the above program by including your code under the comment (i.e., text followed by the #-symbol)\nYou can include the comment in the your code.\nExecute the program my_even_numbers.py.\nSubmit your program my_even_numbers.py.\n\n\n\nNext, let’s look at an example where a list is returned:\ndef build_odd_list(n):\n    L = []\n    for i in range(0, n):\n        k = 2*i + 1\n        L.append(k)\n    return L\n\nprint(build_odd_list(5))\n\n\n\n\n\n\nExercise 2.21\n\n\n\n\nTry tracing through the execution of the above program, including loop interactions. The tracing activity is for you understand the execution of the program and you don’t need to submit a written answer. However, it is encouraged that you try it to fully-understand the execution of the above program and to confirm your result.\nThe following portion of the exercise is required for submission of this exercise:\n\nType up the above in my_odd_list.py by including a print(k) inside the for-loop after the L.append(k).\nSubmit your program `my_odd_list.py.\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\nExecution begins with\nprint(build_odd_list(5))\nThis results in: \nOnce the return occurs, we could think of this as:\nprint( [1, 3, 5, 7, 9] )\nThis gets sent to print, which prints.\nOne could make this more explicit: \n\n\n\nNext, let’s look at a list example with multiple returns:\ndef find_first_negative(A):\n    for k in A:\n        if k &lt; 0:\n            # First try print(k) here\n            return k\n            # Then try print(k) here\n    return 0\n\nB = [1, 2, -3, 4, -5, 6]\nC = [1, 2, 3, 4]\n\nprint(find_first_negative(B))\nprint(find_first_negative(C))\n\n\n\n\n\n\nExercise 2.22\n\n\n\nBefore typing this up in my_first_negative.py to confirm. That is, use the tracing approach we’ve used before: write out the values of variables and how they change from one iteration to the next. Then, replace the first comment so that you print(k) inside the loop. Then, move the print statement (still inside the loop) to after the return k statement. What do you observe? There is nothing to submit in the above portion of this exercise.\nType up the above program in my_first_negative.py. Then do the following:\n\nExecute the program and examine the output.\nNext, replace the first comment so that you print(k) inside the if-conditional.\nExecute your program my_first_negative.py and examine the output.\nThen, delete the print(k) you wrote in place of the first comment.\nNow replace the second comment with print(k) statement so that it appears after the return k statement.\nExceute your program my_first_negative.py and examine the output for any change with the earlier execution.\nSubmit your program my_first_negative.py with the modification suggested in point #5.\n\n\n\n\n\n\n\n\n\nExercise 2.23\n\n\n\nIn my_last_negative.py, modify the above program to find the last negative number (if one exists) in a list. So, after completing the code below\ndef find_last_negative(A):\n    # Insert your code here\n\nB = [1, 2, -3, 4, -5, 6]\nC = [1, 2, 3, 4]\nit should print\n-5\n0\nSubmit your program my_last_negative.py."
  },
  {
    "objectID": "python_primer/unit1/modules/module0.html#returns-that-dont-return-anything",
    "href": "python_primer/unit1/modules/module0.html#returns-that-dont-return-anything",
    "title": "Module 0: A first look at lists",
    "section": "2.8 returns that don’t return anything",
    "text": "2.8 returns that don’t return anything\nConsider this program:\ndef print_first_negative(A):\n    for k in A:\n        if k &lt; 0:\n            print('Found: ',k)\n            return \n    print('No negatives found')\n\nB = [1, 2, -3, 4, -5, 6]\nprint_first_negative(B)\nC = [1, 2, 3, 4]\nprint_first_negative(C)\n\n\n\n\n\n\nExercise 2.25\n\n\n\nType up the above in my_first_negative2.py, execute and check for any errors.\nSubmit your program my_first_negative2.py if there are no errors.\n\n\nLet’s point out:\n\nWhenever a return statement is executed in a function, execution exits the function right away.\nWhen a return statement does not return a variable’s value, execution leaves the function but does not give a value back to the invoking code.\nThus the return statement in the program below, does not return a value but merely causes execution to leave the function and get back to line just after the function was invoked.\ndef print_first_negative(A):\n    for k in A:\n        if k &lt; 0:\n            print('Found: ',k)\n            return\n    print('No negatives found')\nAlthough it’s not needed, one could return at the end of a non-value-returning function:\ndef print_first_negative(A):\n    for k in A:\n        if k &lt; 0:\n            print('Found: ',k)\n            return\n    print('No negatives found')\n    return\nWhy do we have multiple return’s in a function? Why not always wait until execution reaches the end of a function?\n\nIt is very useful to be able to return from anywhere in a function’s code.\nThe reason is, as soon as the function’s “job” is done (example: finding the first negative), we want to leave the function."
  },
  {
    "objectID": "python_primer/unit1/modules/module0.html#a-fundamental-difference-between-list-and-basic-parameters",
    "href": "python_primer/unit1/modules/module0.html#a-fundamental-difference-between-list-and-basic-parameters",
    "title": "Module 0: A first look at lists",
    "section": "2.9 A fundamental difference between list and basic parameters",
    "text": "2.9 A fundamental difference between list and basic parameters\nConsider this program:\ndef swapint(a, b):\n    temp = a\n    a = b\n    b = temp\n    print(a, b)\n\nx = 5\ny = 6\nswapint(x, y)\nprint(x, y)     # Will this print 5 and 6, or 6 and 5?\n\n\n\n\n\n\nExercise 2.26\n\n\n\nBefore typing up the above in my_swap_int.py and submitting, can you guess what the output will be ?\n\nType up and execute the program my_swap_int.py.\nSubmit your program my_swap_int.py.\n\n\n\nLet’s explain:\n\nExecution of the program begins with the line\nx = 5\nWhen the function is called soon after:\nswapint(x, y)\nthen execution enters the function with the values in x and y copied into a and b: \nThen, by the time we reach the print statement: \nThus, the values in a and b do indeed get swapped.\nBut this does not affect x and y because they are actually different variables.\n\n\n\n\n\n\n\nExercise 2.27\n\n\n\nTo help you understand the program, in a separate document draw the three boxes for a, b, and temp, at each step in the function’s execution.\nThere is nothing to submit in this exercise.\n\n\nNow, consider a similar program with lists:\ndef swap_list_first(A, B):\n    temp = A[0]\n    A[0] = B[0]\n    B[0] = temp\n\nX = [1, 3, 5, 7]\nY = [2, 4, 6]\nswap_list_first(X, Y)\nprint(X, Y)\n\n\n\n\n\n\nExercise 2.28\n\n\n\nTo help you understand the above program, in a separate document draw the three boxes for A, B, and temp, at each step in the function’s execution.\nThere is nothing to submit in this exercise.\n\n\nLet’s see what’s going on:\n\nList variables are fundamentally different from numeric variables.\nThink of a list variable has having a reference ID to the actual list contents:\n\nThis is like an “address” in memory.\nIf you have this “address” you can go to the list and do things with it.\nList variables actual store these addresses (which, interestingly, turn out to be numbers).\n\nWe will draw a conceptual diagram to highlight this point: \nThus, when the function starts execution, the “references” in X and Y are copied into A and B.\nThis means A and B refer to the same list contents.\nSo, A[0] is the same as X[0], for example.\nNext, after executing the three lines inside the function but before returning: \nNotice that temp is a regular integer.\n\n\n\n\n\n\n\nExercise 2.29\n\n\n\nType up the above program with the function swap_list_first(A, B) in my_swap_list_first.py.\n\nExecute the program and examine the output.\nSubmit your program my_swap_list_first.py.\n\n\n\n\nThe key takeaways:\n\nWhen you send number variables to a function, they get copied, and so the function can’t “do” anything to the variables you present as arguments.\nBut if you send a list, a function can change the contents.\nThis means you need to be careful about intent when writing functions that involve larger entities like lists. \n\n\n\n\n\n\n\nExercise 2.31\n\n\n\nConsider the following program:\ndef change_int(a):\n    a = a + 1\n\ndef change_list(A):\n    A[0] = A[0] + 1\n\nx = 5\nchange_int(x)\nprint(x)\n\nB = [1, 2, 3]\nchange_list(B)\nprint(B)\n\nType up the above in my_change_list.py.\nExecute the program my_change_list.py and examine the output.\nSubmit your program my_change_list.py."
  },
  {
    "objectID": "python_primer/unit1/modules/module5.html",
    "href": "python_primer/unit1/modules/module5.html",
    "title": "Module 5: Review",
    "section": "",
    "text": "The main goal of this module is to step back and review the following core concepts in programming:\n\nLoops\nConditionals\nLists\nFunctions"
  },
  {
    "objectID": "python_primer/unit1/modules/module5.html#objectives",
    "href": "python_primer/unit1/modules/module5.html#objectives",
    "title": "Module 5: Review",
    "section": "",
    "text": "The main goal of this module is to step back and review the following core concepts in programming:\n\nLoops\nConditionals\nLists\nFunctions"
  },
  {
    "objectID": "python_primer/unit1/modules/module5.html#variables",
    "href": "python_primer/unit1/modules/module5.html#variables",
    "title": "Module 5: Review",
    "section": "5.0 Variables",
    "text": "5.0 Variables\nConsider the following program:\na = 3                \nx = 3.14\ns = 'hello'\nthis_is_fun = False\nodds = [1, 3, 5, 7]\n\nx = 2.718\nodds[2] = 9\nThe variables in the above program have the following four aspects to them:\n\nA name, like x or this_is_fun above.      ⇒ Variable names don’t change during execution, they are given by the programmer.\nA current value.      ⇒ At any moment during execution, a variable has a value.  This value can change (often does) during execution.\nA scope. More about this in Unit-2.\nA type, such as int (integer), float (floating point number), str (string), bool (Boolean), list (and there are a few more to be covered in an advanced topic).\n\nLet’s examine what happens when each line in the above program executes:\n\nWhen the first line executes: \nAfter the second line executes: \nAfter the third line: \nAfter the fourth: \nAfter the fifth: \nThen, one of the variables does have its value replaced: \nFinally, one of the elements in the list gets replaced: \nNow, there is a somewhat highly technical point to be made:\n\nThe “box” is what we’re using to conceptualize what a variable is, and how it behaves when we change it.\nGenerally, this is how you should think of it.\nHowever, some books will present certain kinds of variables differently, with more detail.\nUnderneath the hood, in fact, string and list variables are a bit different.\n\nSo, for the sake of completeness, we’ll just point out this more detailed version: \nIn the above program:\n\nString and list variables are themselves small boxes.\nThese variables contain a reference (conceptualized by the black arrow above) to the actual data.\nThe actual data for a string (the letters in it) are stored side by side, which is why we can “get at” letters via code like s[2] (3rd char in string).\nThis more detailed version will make sense when you eventually get to see objects (a feature of Python) in the future."
  },
  {
    "objectID": "python_primer/unit1/modules/module5.html#how-to-read-and-mentally-execute-programs",
    "href": "python_primer/unit1/modules/module5.html#how-to-read-and-mentally-execute-programs",
    "title": "Module 5: Review",
    "section": "5.1 How to read and mentally execute programs",
    "text": "5.1 How to read and mentally execute programs\nLet’s start with a simple example:\nx = 2\ny = 3\nx = x + y\n\nfor i in range(6):\n    x = x + i\n\nprint('x =', x)\nLet’s look at this in steps:\n\nFirst, start by noticing the chunks of code: \nSecond, walk through the execution of the first chunk, and notice that the value of x is what’s used later: \n\n\n\n\n\n\n\nNote\n\n\n\n\nIf it helps to picture the boxes for x and y, then do so.\nLook at the statement\nx = x + y\nand say to yourself: “First, let’s look at the right side, and the values of x and y now”.\nGo backwards in the code to see the values of x and y.\nThen perform the operation to get the new value of x (5 in this case) that replaces what was there (which was 2).\n\n\n\n\nNext, notice key aspects of the loop without yet executing iteration by iteration: \nThen you get down to the iterative level and execute iteration by iteration:\n\n                           i      x\n  Before loop starts:             5\n  After first iteration    0      5\n  After i is 1             1      6\n  After i is 2             2      8\n  After i is 3             3      11\n  After i is 4             4      15\n  After i is 5             5      20\n\nFinally, there’s the print: \n\n\n\n\n\n\n\nExercise 5.1\n\n\n\n\nExamine and mentally execute the following program:\n\ni = 1\nj = 4\nA = [2, 4, 6, 8, 10, 12]\n\ntotal = 0\nfor k in range(i, j+1):\n    total = total + A[k]\n\nprint('total =', total)\n\nThen, type up the above program in my_execution_practice.py.\n\nExecute your program my_execution_practice.py and check if the result matches what you expected.\nTry doing this a few times until you are certain.\n\nSubmit your program my_execution_practice.py.\n\n\n\nNow, let’s look at reading a program with a conditional that is more complex:\nx = 7\ny = 6\nz = 5\nc = 'b'\n\nif x &lt; 5:\n    x = x + 10\nelif x &gt; y:\n    if (x &gt; 0) and (x+y &gt; z):\n        if c == 'a':\n            print('yes, a')\n        else:\n            if c == 'b':\n                print('no, b')\n    else:\n        print('boo')\nelse:\n    print('ok, that is enough')\nWe’ll do this in steps, working from the “outside going in”:\n\nWe’ll start by noticing some variables and values being assigned, followed by a large nested conditional: \n\n\n\n\n\n\n\nNote\n\n\n\n\nThe conditional has both an elif and anelse` code block.\nThe conditions depend on the variables that precede it.\n\n\n\n\nNext, we identify which part of the outer conditional executes: \nThen, working inwards, we examine and see that the elif code block is itself a big conditional: \n\nThe combined Boolean expression\nif (x &gt; 0) and (x+y &gt; z):\ndoes turn out to be True, and so we enter the if-block that follows: \nThe if-condition below fails:\nif c == 'a':\nand so execution proceeds into the else-block: \n\n\n\n\nClearly, in this case, the condition succeeds and we get to the print: \nObserve that if the condition was\nif c == 'z':\nthen we would jump right out of the whole: \n\n\n\n\n\n\n\nTip\n\n\n\nThis example illustrates how critical it is to make sure the indentation is correct.\n\n\n\nFor example, consider these three variations:\n\nIndent-case #1:\nif c == 'a':\n    print('yes, a')\nelse:\n    if c == 'b':\n        print('no, b')\n        print('hello')\nIndent case #2:\nif c == 'a':\n    print('yes, a')\nelse:\n    if c == 'b':\n        print('no, b')\n    print('hello')\nIndent case #3:\nif c == 'a':\n    print('yes, a')\nelse:\n    if c == 'b':\n        print('no, b')\nprint('hello')\nCan you see why they’re all different?\n\n\n\n\n\n\n\n\nExercise 5.2\n\n\n\n\nType up the following program in my_execution_practice2.py.\n\nx = 7\ny = 6\nz = 5\nc = 'b'\n\nif x &lt; 5:\n    x = x + 10\nelif x &gt; y:\n    if (x &gt; 0) and (x+y &gt; z):\n        if c == 'a':\n            print('yes, a')\n        else:\n            if c == 'b':\n                print('no, b')\n    else:\n        print('boo')\nelse:\n    print('ok, that is enough')\n\nExecute your program my_execution_practice2.py and examine the output as shown below:\nno, b\nModify your program by replacing the inner-most if-else code block with Indent case #3 described above.\nExceute your modified program and observe the output that is now changed to the following:\nno, b\nhello\nSubmit your modified program my_execution_practice2.py.\nAnswering the following part of the exercise is recommended but not required for submission:\n\nTry different assignments to c in the inner-most if-else code block.\nThat is, try c = 'a', then c = 'b'.\nExplain to yourself why these may result in different outputs.\n\n\n\n\nConsider this variation (we’ve added a few print’s):\nx = 7\ny = 6\nz = 5\nc = 'b'\n\nif x &lt; 5:\n    x = x + 10\nelif x &gt; y:\n    print('one')\n    if (x &gt; 0) and (x+y &gt; z):\n        print('two')\n        if c == 'a':\n            print('yes, a')\n        else:\n            if c == 'b':\n                print('no, b')\n            print('three')\n        print('four')\n    else:\n        print('boo')\n    print('five')\nelse:\n    print('ok, that is enough')\n    print('six')\n\nprint('seven')\n\n\n\n\n\n\nExercise 5.3\n\n\n\n\nMentally execute the above program and indentify the print statements that get executed.\nType up the above program in my_execution_practice3.py.\nExecute your program my_execution_practice3.py and check if the results match what you expected.\n\nExecute the program until all outputs are understood.\n\nSubmit your program my_execution_practice3.py.\n\n\n\n\n\n\n\n\n\n\nExercise 5.4\n\n\n\n\nExamine and mentally execute the following program:\n\nA = [-1, 2, 3, -5, 6, 7]\n\ntotal = 0\nfor i in range(len(A)):\n    if A[i] &gt; 0:\n        if A[i] % 2 == 0:\n            total = total + A[i]\n        else:\n            print('rejected:', A[i])\n    else:\n        print('illegal:', A[i])\n\nprint(total)\n\nType up the above program in my_execution_practice4.py.\nExecute your program my_execution_practice4.py and check if the results match what you expected.\n\nExecute the program until all outputs are understood.\n\nSubmit your program my_execution_practice4.py.\n\n\n\n\n\n\n\n\n\n\nExercise 5.6\n\n\n\nConsider the following program:\ndef printword(n):\n    if n == 1:\n        print('one')\n    elif n == 2:\n        print('two')\n    elif n == 3:\n        print('three')\n    elif n == 4:\n        print('four')\n    else:\n        print('cannot handle n &gt; 4')\n\nprintword(1)\nprintword(2)\nprintword(3)\nprintword(4)\nprintword(5)\n\nIn my_conditional.py, rewrite the function printword(n) so that it does the same thing but without using any elif code blocks.\nSubmit your program, my_conditional.py."
  },
  {
    "objectID": "python_primer/unit1/modules/module5.html#functions-without-parameters",
    "href": "python_primer/unit1/modules/module5.html#functions-without-parameters",
    "title": "Module 5: Review",
    "section": "5.2 Functions without parameters",
    "text": "5.2 Functions without parameters\nConsider the following example:\ndef print_two_xs():\n    print('xx')\n\nprint('start')\nprint_two_xs()\nprint_two_xs()\nprint('end')\nLet’s look at the execution step by step:\n\nFirst, Python reads through and stores the function definition: \nThen execution starts with the first print, followed by the first function call (or function invocation, if you like big words).\n\nAt this point, execution enters the function:\n\nAfter the function executes, execution proceeds to just after the function call: \nIn this particular case, the very next line is a call to the same function: \nAfter which: \n\n\nConsider the following program:\ndef print_two_xs():\n    print('xx')\n\ndef print_three_ys():\n    print('yyy')\n\ndef print_more():\n    print_two_xs()\n    print_three_ys()\n    print('z')\n\nprint('start')\nfor i in range(8):\n    if i % 3 == 0:\n        print_two_xs()\n    elif i % 3 == 1:\n        print_three_ys()\n    else:\n        print_two_xs()\n        print_three_ys()\n    print_more()\nprint('end')\n\n\n\n\n\n\nExercise 5.8\n\n\n\n\nExamine and mentally execute the above program.\nType up the above program in my_execution_practice5.py.\nExecute your program my_execution_practice5.py and check if the results match what you expected.\n\nExecute the program until all outputs are understood.\n\nSubmit your program my_execution_practice5.py."
  },
  {
    "objectID": "python_primer/unit1/modules/module5.html#functions-with-parameters",
    "href": "python_primer/unit1/modules/module5.html#functions-with-parameters",
    "title": "Module 5: Review",
    "section": "5.3 Functions with parameters",
    "text": "5.3 Functions with parameters\nHere’s an example of a function with parameters:\ndef print_stuff(n):\n    print('n =', n)\n    n = 2*n\n    print('twice n =', n)\n    n = n // 4\n    print('half n =', n)\n\nm = 4\nprint(m)\nprint_stuff(m)\nprint(m)\nLet’s point out what we can understand in the above program:\n\nThe parameter variable n gets its value from the argument variable: \nRecall: // is the integer-division operator.\nLater in the function, the parameter variable gets its value changed: \nIt’s important to realize that we could have named the argument variable n as well: \n\nAny code inside the function that uses or modifies n affects only the parameter variable n (the n inside the function and not the n outside the function).\n\n\n\n\n\n\nExercise 5.10\n\n\n\nConsider the following program:\ndef print_stuff(n):\n    print('n =', n)\n    n = 2*n\n    print('twice n =', n)\n    n = n // 4\n    print('half n =', n)\n    print('m =', m)   # Trying to access m\nm = 4\nprint(m)\nprint_stuff(m)\nprint(m)\nprint('n =', n)       # Trying to access n will generate an error and should be deleted for this program to work\n\nType up the above program in my_variable_access.py.\nExecute your program my_variable_access.py.\n\nMake the modification suggested in the last line of the program to eliminate the error.\n\nSubmit your program my_variable_access.py without any errors.\nAnswering the following part of the exercise is recommended but not required for submission:\n\nIdentify the errors and understand why you were getting them. \n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\nYou will notice that m is accessible in the function whereas the parameter variable n is not accessible outside.\nThis is a topic (called scope) that we’ll address in Unit-2."
  },
  {
    "objectID": "python_primer/unit1/modules/module5.html#functions-that-return-values",
    "href": "python_primer/unit1/modules/module5.html#functions-that-return-values",
    "title": "Module 5: Review",
    "section": "5.4 Functions that return values",
    "text": "5.4 Functions that return values\nLet’s look at an example:\ndef incr(n):\n    m = n + 1\n    return m\n\ni = 5\nj = incr(i)\nk = incr( incr( incr(j) ) )\nprint(k)\nConsider the moment the first call to the incr() function occurs:\nj = incr(i)\n\nHere, the value in argument variable i is copied into parameter variable n: \nThen, the value m becomes 6, which is returned when the return statement executes: \nMoments later (in a tiny fraction of a second), you can think of the function call itself as replaced by the return value: \nAfter the return occurs, remember that the parameter and other function-defined variables disappear.  (Fresh versions will be created whenever another function call occurs.)\nNow let’s examine the following code block:\nk = incr( incr( incr(j) ) )\nAt this moment j has the value 6.\nThe inner-most call happens first:\nk = incr( incr( incr(6) ) )\nwhich goes to incr(), which returns 7, which results in\nk = incr( incr( 7 ) )\nThen, for the next call to incr(), the value 7 is copied into the parameter variable  which returns 8 as shown below:\nk = incr( 8 )\nAnd finally k = incr( 8 ) results in\nk = 9\nLastly, remember that a return statement can have expressions. Which means we can shorten incr() to:\ndef incr(n):\n    return n+1\nWe could also place another function call in the return statement itself:\ndef incr(n):\n    return n+1\n\ndef double_incr(n):\n    return incr(incr(n))\nThis is a shorter way of writing\ndef incr(n):\n    return n+1\n\ndef double_incr(n):\n    k = incr(incr(n))\n    return k\n\nNow consider a function with multiple returns:\ndef strange(n):\n    print('start-of-strange')\n    if n &lt; 0:\n        return 0\n    elif n == 0:\n        return 1\n    else:\n        s = 1\n        for k in range(n+1):\n            s = s + k\n        return s\n    print('end-of-strange')\n\nprint(strange(-3))\nprint(strange(0))\nprint(strange(3))\nIn the first call to the function strange(), the parameter n will have the value -3.\n\nIn this case, we see ‘start-of-strange’ printed.\nThe if-condition is True, which means the first return executes:\ndef strange(n):\n    print('start-of-strange')\n    if n &lt; 0:\n        return 0  \n    elif n == 0:\n        return 1\n    else:\n        s = 1\n        for k in range(n+1):\n            s = s + k\n        return s\n    print('end-of-strange')\n\nprint(strange(-3))    \nExecution leaves the function immediately, which means nothing else in the function executes.\n\n\n\n\n\n\n\nExercise 5.11\n\n\n\n\nType up the above program in my_strange_example.py.\nExecute your program my_strange_example.py.\n\nFor the remaining two calls to the function strange() with arguments 0 and 3, can you tell whether ‘end-of-strange’ gets printed or not?\n\nSubmit your program my_strange_example.py."
  },
  {
    "objectID": "python_primer/unit1/modules/module5.html#lists-are-different",
    "href": "python_primer/unit1/modules/module5.html#lists-are-different",
    "title": "Module 5: Review",
    "section": "5.5 Lists are different",
    "text": "5.5 Lists are different\nConsider\ndef add_one(n):\n    n = n + 1\n    print('incr: n=', n)\n\ndef list_add_one(A):\n    for k in range(0, len(A)):\n        A[k] = A[k] + 1\n    print('list_incr: A=', A)\n\np = 3\nadd_one(p)\nprint(p)\n\nB = [1, 2, 3]\nlist_add_one(B)\nprint(B)\n\n\n\n\n\n\nExercise 5.12\n\n\n\n\nType up the above program in my_list_example.py.\nSubmit your program my_list_example.py.\n\n\n\nObserve:\n\nThe add_one() function has no effect on the variable p, since the value in p gets copied into n.\nThe parameter variable n does get 1 added (as the print in add_one() confirms.\nOne the other hand, print(B) shows that the elements of B have 1 added to each of them.\nWhy is this? Why are lists different as parameters?\n\nList variables are actually references, sometimes called pointers.\nThink of a reference or pointer as a special token that provides access to the list elements.\nWhoever has the token can access the list elements.\nWhen the contents of variable B are copied into parameter variable A, then the variable A has the special token.\nWhich means variable A access the list elements and can change those.\n\nWhy was the Python language designed this way?\n\nIt turns out that copying over big lists into parameter variables can greatly slow down execution.\nThus, lists (and other such complex objects) don’t have their elements copied.\nInstead, it’s only the reference (which is really a single number, under the hood) gets copied.\n\n\nFor practice, let’s look at a list example with Boolean values (True, False):\ndef list_or(A):\n    x = True\n    for k in range(0, len(A)):\n        x = x or (not A[k])\n    return x\n\nB = [True, True, False, False]\nprint(list_or(B))\n\n\n\n\n\n\nExercise 5.13\n\n\n\n\nType up the above program in my_list_example2.py.\nSubmit your program my_list_example2.py.\nAnswering the following part of the exercise is recommended but not required for submission:\n\nTrace through each iteration of the loop in the function list_or(), showing x, k, and each A[k].\n\n\n\n\nAnd another example for practice:\ndef within1(x, y):\n    # Write your code here to return True or False\n    # Return True if the difference between x and y is 1 or less\n\ndef first_diff(A, B):\n    k = 0\n    while (k &lt; len(A)) and (within1(A[k], B[k])):\n        k = k + 1\n    if k == len(A):\n        return -1\n    else:\n        return k\n\nX = [1, 2, 3, 4]\nY = [2, 2, 3, 3]\nZ = [1, 1, 1, 4]\nprint(first_diff(X,Y))    # Should print -1\nprint(first_diff(X,Z))    # Should print 2\n\n\n\n\n\n\nExercise 5.14\n\n\n\n\nIn the above program, the function first_diff() is intended to take two lists\n\nCompare elements in the same positions, and\nIdentify the first position where the two lists differ by more than 1.\nIf no such difference exists, the function should return -1.\n\nIn my_list_example3.py, complete the code in the within1() function so that it returns True only when the difference between x and y is 1 or less. Thus, True when x=1, y=2, or when x=4, y=3, or when x=5, y=5.\nSubmit your program my_list_example3.py.\nAnswering the following part of the exercise is recommended but not required for submission:\n\nTrace through the iteration in the while-loop."
  },
  {
    "objectID": "python_primer/unit1/modules/module5.html#why-are-functions-useful",
    "href": "python_primer/unit1/modules/module5.html#why-are-functions-useful",
    "title": "Module 5: Review",
    "section": "5.6 Why are functions useful?",
    "text": "5.6 Why are functions useful?\nFunctions are very useful for four different reasons:\n\nCode written in a function can be re-used.\n\nFor example, compare the following programs:\n\nX = [1, 3, 5, 7]\ntotal = 0\nfor k in X:\n    total += k\navg = total / len(X)\nprint(avg)\n\nY = [2, 4, 6, 8, 10]\ntotal = 0\nfor k in Y:\n    total += k\navg = total / len(Y)\nprint(avg)\nwith\ndef mean(A):\n    total = 0\n    for k in A:\n        total += k\n    return total / len(A)\n\nX = [1, 3, 5, 7]\nprint(mean(X))\nY = [2, 4, 6, 8, 10]\nprint(mean(Y))\nThe second big reason is composability, as the following example shows:\nz = incr( diff(x, y) )\n(You can imagine what the functions incr() and diff() do.)\nAnother example showing compactness with functions:\ns = '  hello  '\nprint(len(s.strip()))\nA long program broken up into functions will make the program more readable and therefore more easily understood.\nThe biggest reason, perhaps, is that it has become one of two important ways by which multiple programmers use each others’ code.\nExample: you have used functions in drawtool and Python functions like math.random().\n\nHow do you know when to create functions vs. writing long code?\n\nThere are no rules. The judgement comes with practice.\nGenerally, tiny computations like increment don’t need functions.\nAny significant computation that is likely to be re-used should probably be in a functions.\nUse functions when breaking things into functions greatly improves readability."
  },
  {
    "objectID": "python_primer/data_types.html",
    "href": "python_primer/data_types.html",
    "title": "Data Types",
    "section": "",
    "text": "Note\n\n\n\nReferencing the content on this webpage:\nBulusu, Kartik V. (2025, January). MAE 6291: Internet-of-Things for Engineers. [Course lecture notes, codes and presentations]. Department of Mechanical and Aerospace Engineering, The George Washington University.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTopic(s)\n\n\nDescription\n\n\nSlide deck(s)\n\n\n\n\n\n\n\nA First look at lists\n\n\ndesc here\n\n\nModule 0 \n\n\n\n\nArrays\n\n\ndesc here\n\n\nModule 1 \n\n\n\n\nTuples, Sets and Dictionaries\n\n\ndesc here\n\n\nModule 2"
  },
  {
    "objectID": "python_primer/unit2/modules/advising.html",
    "href": "python_primer/unit2/modules/advising.html",
    "title": "Advising Information: if you want to continue with some computing in the future",
    "section": "",
    "text": "Mid Semester Survey\n\n\n\n\nPlease take a few moments to complete the Mid-Semester Survey for our course before Saturday 03/30/2024 by 11:59 PM.\nYour input will help us understand if you need advising regarding a minor in Computer Science. Plus, here’s some extra incentive: filling out the survey will count as one of your quizzes for the course, and you’ll earn 10 points!\nScan the QR code below or click here to access the survey:\nQuick links\nThe math in CS: an explanation\nDifference between B.A. and B.S in Computer Science\nDoing a minor in CS\nImportant things to know about a minor or second major in CS\nContinuing with CS post-graduation\nFAQ"
  },
  {
    "objectID": "python_primer/unit2/modules/advising.html#what-are-your-plans-even-if-vague-at-this-time",
    "href": "python_primer/unit2/modules/advising.html#what-are-your-plans-even-if-vague-at-this-time",
    "title": "Advising Information: if you want to continue with some computing in the future",
    "section": "1    What are your plans (even if vague at this time)?",
    "text": "1    What are your plans (even if vague at this time)?\nDo any of the following might apply to you?\n\nYou’d like to switch into the computer science program, either for the B.S. program or the B.A. program (there’s a difference - see Section 3 below).\nYou want to keep your major but want to explore whether it’s possible to get a dual-major or second-major in computer science.\nYou may be interested in a computer science minor, and want to learn what it involves, and whether you should do one.\nYou see more computing in your future, but don’t have the time for it now.\nYou’ve heard about the math requirements in computer science, and are wondering if there’s an alternative.\n\nYou might have other questions such as: Is the rest of CS harder than 1012? What can you do with a CS minor?\nWe’ll address these cases and questions below but let’s start with understanding this business of math in CS."
  },
  {
    "objectID": "python_primer/unit2/modules/advising.html#why-does-cs-have-math-in-it-and-how-much",
    "href": "python_primer/unit2/modules/advising.html#why-does-cs-have-math-in-it-and-how-much",
    "title": "Advising Information: if you want to continue with some computing in the future",
    "section": "2    Why does CS have math in it? And how much?",
    "text": "2    Why does CS have math in it? And how much?\n\n\n\nThe first few courses in computer science are:\n\nCS-1111: Introduction to Software Development.\nThis is the introductory programming course for majors in the Java programming language. The good news is, you are primed for success in this course because you already know key concepts such as loops, conditionals and functions.\nCS-1112: Algorithms and Data Structures.\nRemember lists, arrays, sets, and dictionaries? This course dives deep into these structures and also spends time on algorithmic ideas.\n\n\n\n\n\n\n\nNote\n\n\n\nYou need to have completed Math-1220 or Math-1231 to take this course. And a minimum grade of C in CS-1111.\nMath-1220 or Math-1231 are different versions of Calculus.\n\n\n\nCS-1311: Discrete Structures.\nThis is the second math course, and the first “math in CS” course. Here’s what you should know about CS-1311: even if math did not work out for you in high-school, CS-1311 might be fine if you really work at it. CS-1311 does not require any of the traditional pre-calc math (trigonometry etc) as background, but you do need to be comfortable with symbols and algebra.\n\n\n\n\n\n\n\nNote\n\n\n\nYou need to have completed Math-1220 or Math-1231 to take this course.\n\n\n\nCS-2113: Software Engineering .\nThis is the third in the programming sequence where you’ll learn to write more sophisticated code to build real applications.\n\n\n\n\n\n\n\nNote\n\n\n\nThis has a prerequisite of CS-1112 (with a minimum grade of C), and you need to have completed Math-1231 or the combination of 1220 and 1221 to take this course.\n\n\nSo, now let’s answer a few questions about math:\n\nWhat kinds of math, and how much?.\n\nThe minor requires two math courses:\n\nCalculus, which can be taken as a single intensive course (Math-1231) or as two courses (Math 1220 and 1221).\nDiscrete-structures (CS-1311), which is a more CS-related math course offered by the CS department itself.\n\nIn addition to Calculus and Discrete structures, the B.A in CS major requires a statistics elective (which you are likely to take in almost any major) and a Linear Algebra course.\nIn addition to Calculus and Discrete structures, the B.S in CS major has four additional math courses: Discrete Structures II, Foundations of Computing, Statistics, and Linear Algebra.\n\n\n\n\n\n\n\n\nNote\n\n\n\nThe BS program has a specific list of Statistics courses that are allowed, which does NOT include the oft-taken 1051 or 1053. (The BA does allow 1051/3).\n\n\n\nWhy is there math in CS? Programming doesn’t appear to need math.\n\nWhile it’s true that you don’t need any math to program websites or write code for mobile apps, computer science is a lot more than just programming. For instance, artificial intelligence is an area of computer science that seeks to build programs that rival (in fact, exceed) humans in intelligence. There’s a fair amount of math behind this type of computing. Other areas that overlap with math include: cryptography, data science, robotics, graphics.\nA lot of computer science becomes interesting if you are willing to take on a reasonable amount of math.\nTheoretical computer science, which is quite mathematical, asks fundamental questions about the theory behind computing. For example, if you’ve wondered why the Python compiler can’t tell whether your program will run correctly, it’s because we can (mathematically) prove that no such compiler can be created.\n\nAre there options if I’m not interested in doing the math?.  Yes. See the “Post-graduation online programs” section below."
  },
  {
    "objectID": "python_primer/unit2/modules/advising.html#the-two-bachelors-programs-in-computer-science-ba-and-bs",
    "href": "python_primer/unit2/modules/advising.html#the-two-bachelors-programs-in-computer-science-ba-and-bs",
    "title": "Advising Information: if you want to continue with some computing in the future",
    "section": "3    The two Bachelor’s programs in computer science (BA and BS)",
    "text": "3    The two Bachelor’s programs in computer science (BA and BS)\n\n\n\n\nThe BA in CS:\n\nThis program is designed to allow students to easily dual major or to take two minors.\nWhat this means: Suppose you want to combine a major in Political Science with a major in Computer Science. Then, the BA-Computer-Science might be the best option for you.\nAlternatively, you can do the BA-Computer-Science and take two minors. For example, a minor in Political Science and a minor in History.\nThe overall CS and math requirements are fewer than those required for the BS in CS.\nIf you choose the BA program, you will need to decide whether the non-CS part is another major, or two majors. In other words, you cannot do the BA-CS without either taking two minors or taking another major.\nThe curriculum is listed here\n\nThe BS in CS:\n\nThis is the gold-standard rigorous computer science program, covering all of undergraduate CS, and with many electives as options.\nThe BS in CS is an engineering-accredited program that meets the stringent criteria of programs accredited by the Accreditation Board of Engineering & Technology, the national accrediting agency for engineering programs.\nThe curriculum is listed here\n\n\n\n\n\n\n\n\nAbout the BS\n\n\n\nIf you are transferring late into the BS, you’ll need to keep in mind that there are quite a few requirements and so, you should check that they are do-able in your time-frame.\n\n\nIf either of the above (BS or BA) is your next step:\n\nTo transfer into SEAS as a CS major, you’ll need to follow the  internal transfer steps. Be aware that there are specific deadlines for this and that there are specific admission requirements to be able to transfer into SEAS.\nTo take CS as a second major:\n\nFollow these steps and deadlines\nFill out either the BS double-major application or the  BA double-major application\nInclude your unofficial transcript, and home school’s double-major form, along with the above form, and email to seasadvising@gwu.edu"
  },
  {
    "objectID": "python_primer/unit2/modules/advising.html#doing-a-minor-in-computer-science",
    "href": "python_primer/unit2/modules/advising.html#doing-a-minor-in-computer-science",
    "title": "Advising Information: if you want to continue with some computing in the future",
    "section": "4    Doing a minor in computer science",
    "text": "4    Doing a minor in computer science\n\n\n\nThe CS minor consists of six courses:\n\nCS-1111: Intro to Software Development\nCS-1112: Algorithms & Data Structures\n\nCS-1112 has CS-1111 as a prerequisite. Also, because CS-1112 requires Math-1220 or Math-1231, you will also need to take one of Math-1220 or Math-1231.\n\nCS-1311: Discrete Structures\nCS-2113: Software Engineering\n\nCS-2113 has CS-1112 as a prerequisite. Also, because CS-2113 requires Math-1221 or Math-1231, you will also need one of these.\n\nCS Elective 1\nCS Elective 2\n\nAll CS Electives for the minor must come from pre-approved list: see this page for more information about the CS minor\nTo apply you need:\n\nTo submit the application no later than the start of the 5th semester of study at GW.\nA grade of B- or higher in MATH 1231 or the combination of MATH-1220/1221, or AP Credit for MATH 1231.\nA grade of B or higher in CSCI 1111 or CSCI 1011 or CSCI 1121\nA minimum overall GPA of 3.0 at time of application\n\nMinor applications are accepted on a rolling basis with a processing time of up to 2 weeks. Please include a copy of your unofficial transcript, your school’s minor declaration form, the SEAS CS minor declaration form and send to seasadvising@gwu.edu."
  },
  {
    "objectID": "python_primer/unit2/modules/advising.html#important-things-to-know-for-either-the-minor-or-second-major",
    "href": "python_primer/unit2/modules/advising.html#important-things-to-know-for-either-the-minor-or-second-major",
    "title": "Advising Information: if you want to continue with some computing in the future",
    "section": "5    Important things to know for either the minor or second major",
    "text": "5    Important things to know for either the minor or second major\n\n\n\n\nCS-1012 does NOT count towards the minor.\nYou should plan on taking CS-1111 in the Spring because the Fall offering of CS-1111 is restricted to SEAS majors.\nAlong with CS-1111 in the Spring, you ought to take either MATH-1231 or Math-1220 in the Spring. If you happened to take CS-1111 in the Fall, you could opt for MATH-1220 in the same Fall (and take MATH-1221 in the Spring).\nIf you take CS-1111 in the Spring, you should take CS-1112 in the Fall.\nPass/No-Pass grades are NOT allowed for either the minor or major with the condition that the student must pass a placement exam to proceed to the next course in the sequence.\nBecause applying for the minor has a stringent GPA requirement, you might be better off transferring into SEAS.\nInterested students must apply no later than the start of their 5th semester of study at GW, or completion of 60th credit, whichever comes later."
  },
  {
    "objectID": "python_primer/unit2/modules/advising.html#post-graduation-online-programs",
    "href": "python_primer/unit2/modules/advising.html#post-graduation-online-programs",
    "title": "Advising Information: if you want to continue with some computing in the future",
    "section": "6    Post-graduation online programs",
    "text": "6    Post-graduation online programs\n\n\n\nThe Department of Computer Science offers two programs for students who cannot fit additional computer science while doing their Bachelor’s:\n\nThe Gateway to Computer Science graduate certificate.\nThe Master’s in Applied Computer Science program.\n\nBoth are designed to be open to anyone, especially for those with no background at all in computing, and both are free of math requirements. They are online and can be taken at a gradual pace while working."
  },
  {
    "objectID": "python_primer/unit2/modules/module0.html",
    "href": "python_primer/unit2/modules/module0.html",
    "title": "Module 0: Arrays",
    "section": "",
    "text": "The goal of this module is to introduce the all important feature called arrays, of central importance in working with numeric data."
  },
  {
    "objectID": "python_primer/unit2/modules/module0.html#objectives",
    "href": "python_primer/unit2/modules/module0.html#objectives",
    "title": "Module 0: Arrays",
    "section": "",
    "text": "The goal of this module is to introduce the all important feature called arrays, of central importance in working with numeric data."
  },
  {
    "objectID": "python_primer/unit2/modules/module0.html#first-a-list-of-lists",
    "href": "python_primer/unit2/modules/module0.html#first-a-list-of-lists",
    "title": "Module 0: Arrays",
    "section": "0.0 First, a list of lists",
    "text": "0.0 First, a list of lists\nRecall a basic list:\n# A list of numbers:\nevens = [2, 4, 6, 8, 10]\n\n# A list of strings:\ngreetings = ['hello', 'hi', 'howdy', 'aloha']\n\n# Access list elements using square brackets and index\nx = evens[1] + evens[3]\nprint(x)\n\n# We can change the value at an individual position\nevens[0] = x\n\n# Recall: len() gives us the length of the list\nprint('length:', len(evens), 'contents:', evens)\n\n# Example of using in to search inside a list:\nif (not 'hey' in greetings):\n    print('missing hey')\n\n# Add something new to the end of a list\nevens.append(12)\n\n# Write code here to increment each element by 2\n\nprint(evens)\n\n\n\n\n\n\nExercise 0.1\n\n\n\n\nFirst, in my_list_example.py, type up the above to see what it prints (without including the missing code).\nThen, in my_list_example2.py, add the missing code to increment each list element by 2, giving you the output as:\n12\nlength: 5 contents: [12, 4, 6, 8, 10]\nmissing hey\n[14, 6, 8, 10, 12, 14]\n\nSubmit the following two programs:\n\nmy_list_example.py\nmy_list_example2.py\n\n\n\nLet’s recall a few things we learned about lists via this example: \nWhy are lists useful?\n\nThe real power comes from being able to use a loop to do th following:\n\nCreate elements, as shown below.\nfor i in range(1, 10, 2):\n    A.append(2*i)\nPerform some action on each element, as show below.\nfor i in range(len(A)):\n    A[i] = 2 * A[i]\nCreate multiple lists as shown below.\nfor i in range(len(A)):\n   B[i] = A[i] + 5\nPerform list iterations over indices as shown above and over content as shown below.\ntotal = 0\nfor k in A:\n    total = total + k\n\n\nAs it turns out, we can make a “list-of-lists”, i.e., a list whose elements are themselves lists.\nFor example:\nA = [ [2,4,6,8,10], [1,3,5,7,9] ]\n\nx = A[1]          # The 2nd element is a list\nprint(x)          # Prints [1,3,5,7,9]\n\ny = A[1][3]       # 4-element of 2nd list\nprint(y)          # 7\n\nprint(len(A))     # 2\nprint(len(A[0]))  # 5\n\n\n\n\n\n\nNote\n\n\n\n\nThe inner square brackets are used for the two lists contained in the one larger list:\nA = [ [2,4,6,8,10], [1,3,5,7,9] ]\nAnd the outermost square brackets indicate the single list with two items:\nA = [ [2,4,6,8,10], [1,3,5,7,9] ]\nA[1] refers to the 2nd element of the whole thing, which means A[1] is the 2nd inner list:\nA = [ [2,4,6,8,10],[1,3,5,7,9] ]\nx = A[1]          # The 2nd element is a list\nprint(x)          # Prints [1,3,5,7,9]\nSince A[1] is a list itself, we can access its elements using an additional set of square brackets:\nA = [ [2,4,6,8,10],[1,3,5,7,9] ]\n\ny = A[1][3]       # 4-element of 2nd list\nprint(y)          # 7\nAnd the len() function applied to the whole list will give 2, while applying it to one of the constituent lists will give that list’s length:\nprint(len(A))     # 2\nprint(len(A[0]))  # 5\n\n\n\n\n\n\n\n\n\nExercise 0.2\n\n\n\nConsider the following code:\nA = [[1,2,3,4], [4,5,6,7], [8,9,10,11,12]]\nx = A[?][?]\nprint(x)     # Should print 7\n\n# Write code to increment every element using a nested for-loop:\n\n\nprint(A)\n# Output should be: [2, 3, 4, 5], [5, 6, 7, 8], [9, 10, 11, 12, 13]]\n\nIn my_list_example3.py, add the right numbers to replace the question marks.\nThen, write a nested for-loop to increment every element of every constituent list.\n\nSubmit your program my_list_example3.py.\n\n\nCan one make a list-of-lists-of-lists?\n\nThink of a single list as one dimensional.\nA = [2, 4, 6, 8, 10]\nprint(A[3])\nIn a one-dimensional list, we need a single number to access a data value in the list.\nprint(A[3])\nA list of lists is two dimensional.\nA = [ [2,4,6,8,10], [1,3,5,7,9] ]\nprint(A[0][2])\nIn a two-dimensional list, we need two numbers to access a data value in the list.\nprint(A[0][2])\nThink of a list of lists of lists as three-dimensional, which means three numbers fix the position of a element.\n\nFor example:\nA = [ [ [1,2], [3,4], [5,6] ], [ [7,8], [9,10], [11,12] ] ]\n\nprint(A[0][2][1])     # Prints 6\nIt’s a bit hard to see the list of lists of lists:\nThere’s the outermost list with two elements. The first element of the outer list is A[0].\nA = [ [ [1,2], [3,4], [5,6] ], [ [7,8], [9,10], [11,12] ] ]\nLooking inside A[0], we see a list of lists:\nA = [ [ [1,2], [3,4], [5,6] ], [ [7,8], [9,10], [11,12] ] ]\nThe third element of the list is A[0][2], that is also a list [5,6]:\nA = [ [ [1,2], [3,4], [5,6] ], [ [7,8], [9,10], [11,12] ] ]\n\nAnd the 2nd element inside this list is A[0][2][1]:\nA = [ [ [1,2], [3,4], [5, 6] ], [ [7,8], [9,10], [11,12] ] ]\n\n\n\n\n\n\n\n\nNote\n\n\n\n\nSo think of A[0][2][1]:\n\nGet the first outer list A[0] (which is a list)\nGet the this list’s 3rd element A[0][2] (this produces a list)\nGet this last list’s 2nd element A[0][2][1]."
  },
  {
    "objectID": "python_primer/unit2/modules/module0.html#arrays-a-more-efficient-type-of-list",
    "href": "python_primer/unit2/modules/module0.html#arrays-a-more-efficient-type-of-list",
    "title": "Module 0: Arrays",
    "section": "0.1 Arrays: a more efficient type of list",
    "text": "0.1 Arrays: a more efficient type of list\nWhile lists are useful and easy to use, they are a bit inefficient “under the hood”:\n\nVery large lists (million elements and higher) can slow down a program.\nAnd a list-of-lists is even slower for large sizes, and takes up unneccessary extra space (compared to arrays).\nSome of the most compelling uses involve the array equivalent of a list-of-lists-of-lists: an image.\nAs we will see, a regular color image will turn out to be a three dimensional array while a black-and-white image will turn out to be a two-dimensional array.\n\nAbout arrays:\n\nArrays were created as a separate structure in Python to enable efficient processing of lists of numbers, especially multidimensional lists.\nBecause arrays are in a separate part of Python, the syntax around arrays is a bit different, for example:\nA = np.array([1,2,3,4])\nArrays constitute a large topic in Python, and its advanced features can be fairly complex.\nOur goal here is only a light introduction so that we can work with images.\n\nLet’s start with an example of a single dimensional array, the cousin of a plain list:\nimport numpy as np\n\nA = np.array([1,2,3,4])\n\nprint(type(A))             # What does this print?\nA[1] = 5                   # Replace 2nd element\nprint(A)                   # [1 5 3 4]\nprint(A.shape[0])          # 4\nprint('len(A)=',len(A))    # 4\n\n# A[4] = 9\n# A.append(9)\n\n\n\n\n\n\nExercise 0.4\n\n\n\n\nType up the above in my_array_example.py along with the comments.\nSubmit your program my_array_example.py.\nAnswering the following part of the exercise is recommended but not required for submission:\n\nTry un-commenting in turn each of the two commented-out lines at the end, and understand the errors that were produced.\nRestore your program by commenting out both.\n\n\n\n\nLet’s point out a few things:\n\nTo gain efficiency, arrays trade away some flexibility and ease of use.\nFor example, we now need to import this special package called numpy:\nimport numpy as np\nOnce we do this, the syntax for making an array with actual data is, as we’ve seen:\nA = np.array([1,2,3,4])\n\n\n\n\n\n\nNote\n\n\n\nA brief aside on the Python keyword as:\n\nWe use as to create shortcuts.\nWe could write the above code as show below:\nimport numpy\nA = numpy.array([1,2,3,4])\nThe as keyword lets us create a short form.\nWe could have made it even shorter:\nimport numpy as n\nA = n.array([1,2,3,4])\nbut this is frowned up on Python culture.\nOver time, a sort-of convention about naming has taken place in Pythonworld.\nWhich is why you’ll see all example code using numpy as np. End of digression.\n\n\n\nNotice that that actual data that is fed into an array function of numpy is a list:\nimport numpy as np\nA = np.array( [1,2,3,4] )\nThe actual array so created is in fact in the variable A.\nTo work with elements in the array, we use square brackets with the variable A:\nA[1] = 5                   # Replace 2nd element\nThe standard function len() works as we expect:\nprint('len(A)=',len(A))\nHowever, the array has a feature that is more general called shape:\nprint(A.shape[0])          # 4\n\nAt first this seems cumbersome, and for single-dimensional arrays, it is.\nBut for multiple dimensions, it’s convenient to have the length of each dimension handy.\nThis is what shapehas.\nshape[0]has the first dimension (the length of the array along the first dimension).\nshape[1]has the length along the second-dimension, and so on.\nOf course, for a single dimensional array, there’s only shape[0].\n\nOne of the efficiency tradeoffs is that an array has a fixed size. Which means, to add a new element, we have to rebuild the array.\nThus, to add an element in the above example, we need to write:\nA = np.append(A, 9)\nprint(A)        # [1 5 3 4 9]\nThis creates a new array with the added element.\nTypically most scientific applications do not change sizes on the fly, and so, this is not a serious restriction.\n\nNumpy has powerful features that simplify manipulation of numeric arrays.\nFor example, consider the following program:\nimport numpy as np\n\nA = np.array([1, 2, 3])\nB = np.array([4, 5, 6])\n\nC = A + B            # Direct element-by-element addition\nprint(C)             # [5 7 9]\n\nD = np.add(A, B)     # The same, via the add() function in numpy\nprint(D)             # [5 7 9]\n\nE = B - A            # Elementwise subtraction\nprint(E)             # [3 3 3]\n\n\n\n\n\n\nExercise 0.5\n\n\n\n\nType up the above in my_array_example2.py.\nAdd a line that multiplies the arrays A and B element-by-element, and prints the result [ 4 10 18].\n\nHint: Use np.multiply()\n\nSubmit your program my_array_example2.py.\n\n\n\n\n\n\n\n\n\nExercise 0.6\n\n\n\nlet’s remind ourselves about how lists work.\n\nType up the following program in my_list_version.py:\n\n\nX = [1, 2, 3]\nY = [4, 5, 6]\nZ = X + Y\nprint(Z)          # What does this print?\n\n# Write code here to compute Z as element-by-element addition\n# of X and Y (to give [5, 7, 9])\n\nprint(Z)\n\nThen add code to perform element-by-element addition.\nSubmit your program my_list_version.py.\n\n\n\nNumpy also has a number of functions that act on arrays and return arrays, for example:\n\nOne can apply a function like square-root element-by-element:\nA = np.array( [1, 4, 9, 16] )\nB = np.sqrt(A)\nprint(B)        # [1. 2. 3. 4.]\nOne of the most convenient is to have numpy create an array with random elements:\n\nNumpy has its own random-generation tool:np.random\nThis has a function randint() that takes the desired range (inclusive of first, excluding last), and the desired size of the array.\n\n# Roll a die 20 times\nA = np.random.randint(1, 7, size=20)  \nThis produces an array of size 20 with each element randomly chosen from among the numbers 1,2,3,4,5,6.\n\nOne can also test membership using the in operator:\n\nFor example, suppose we roll a die 20 times and want to know whether a 6 occured:\n# Roll a die 20 times\nA = np.random.randint(1, 7, size=20)  \nif 6 in A:\n    print('Yes, there was a 6')\n\n\n\n\n\n\n\nExercise 0.7\n\n\n\n\nIn my_dice_problem.py fill in code below to estimate the chances that you get a total of 7 at least once when rolling a pair of dice 10 times.\n\nsuccesses = 0\nnum_trials = 1000\nfor n in range(num_trials):\n    # Fill your code here\n\nprint( successes/num_trials )\n\nTo do so, generate one array called A of length 10 with random numbers representing one die (selected from 1 through 6).\nThen generate a second array called B that represents the 10 rolls of the second die.\nA success occurs when A[i]+B[i] is 7 for some i.\n\nSubmit your program my_dice_problem.py.\nAnswering the following part of the exercise is recommended but not required for submission:\n\nCan you solve this without actually accessing the i-th element in a loop?"
  },
  {
    "objectID": "python_primer/unit2/modules/module0.html#d-arrays",
    "href": "python_primer/unit2/modules/module0.html#d-arrays",
    "title": "Module 0: Arrays",
    "section": "0.2 2D arrays",
    "text": "0.2 2D arrays\nHere, 2D is short for two-dimensional.\nLet’s begin with a conceptual depiction of a 1D (one-dimensional) array:\n\nFirst, suppose we create an array of 5 numbers as in:\nA = np.array([50, 55, 60, 65, 70])\nA convenient way to visualize this is to draw these numbers in a series of adjacent “boxes” as shown below: \nBecause we need a way to use our keyboard to enter elements, we use a particular kind of syntax, comma-separation with square-brackets to specify the elements.\nWe use a similar type of syntax to access a particular element in this array, as shown below:\nprint(A[2])\nWe can also change an element in an array:\nA[2] = 61\nwhich will result in the visualization\n\n\nTo explain how a 2D array works, let’s start with its conceptual visualization, via an example:\n\nConsider this visualization of a 2D array: \nWe use the term row to describe the contents going across one of the series of boxes going left to right: \nAnd the term column (shortened to col in our pictures) to describe the series of boxes going vertically top to bottom: \n\n\n\n\n\n\n\nNote\n\n\n\n\nThe number of elements in a row is the number of columns.\nThe number of elements in a column is the number of rows.\n\n\n\n\nAgain, because our limited keyboard doesn’t let us draw boxes, we need a way to type in a 2D array. We do so by writing out a 2D array as a series of comma-separated rows:\nA = np.array([ [ 50,  55,  60,  65,  70],\n            [   100, 105, 110, 120, 125],\n            [   150, 155, 160, 165, 170],\n            [   200, 205, 210, 215, 220] ])\n\n\n\n\n\n\nNote\n\n\n\nIn the above example of 2D numpy array, we’ve added whitespace (that’s allowed) to line up the rows so that it’s as close to our visual understanding as possible.\n\n\nTo access a particular element, we need the row number and column number, as in:\nprint(A[1,3])     # NOT A[1][3]\n\n\n\n\n\n\nNote\n\n\n\nImportant:\n\nIn a list-of-lists box-separation is used in indexing.\n\n# List of lists:\nX = [ [2,4,6,8,10], [1,3,5,7,9] ]\nprint(X[0][2])\n\nIn numpy arrays comma-separation is used in indexing.\n\n# 2D array:\nX = np.array([ [2,4,6,8,10], [1,3,5,7,9] ])\nprint(X[0,2])\nUnfortunately, arrays allow box-separation as well (for access) but this causes problems in other array operations (slicing): so please use comma-separation with a single set of square brackets for arrays.\n\n\n\nJust as we used a for-loop for a single array, it is very typical to use a nested for-loop for a 2D array:\n\nFor comparison, let’s look at a 1D array:\nA = np.array( [1, 4, 9, 16] )\nfor i in range(A.shape[0]):        # Recall: A.shape[0] is the size\n    print(A[i])\nThe equivalent for a 2D array is:\nA = np.array([ [50,   55,  60,  65,  70],\n            [100, 105, 110, 120, 125],\n            [150, 155, 160, 165, 170],\n            [200, 205, 210, 215, 220] ])\n\nfor i in range(A.shape[0]):        # number of rows\n    for j in range(A.shape[1]):    # number of columns\n        print(A[i,j])\nTo make the code a bit more readable, we could write\nnum_rows = A.shape[0]\nnum_cols = A.shape[1]\nfor i in range(num_rows):\n    for j in range(num_cols):\n        print(A[i,j])\n\n\n\n\n\n\n\nExercise 0.9\n\n\n\nConsider this conceptual 2D array:\n\n\nIn my_2D_array.py, write code to create the array.\nThen write a nested for-loop to print the array so that the output has one row on each line, with whitespace between elements, as show below:\n\n10  12  15  \n6  8  10  \n2  -1  -5  \n-4  4  5  \n\nSubmit your program my_2D_array.py.\n\n\n\n\n\n\n\n\n\nExercise 0.10\n\n\n\n\nIn my_2D_array2.py, use the same array above and structure a nested for-loop to compute the sum of elements down each column so that the output is:\n\nColumn 0 total is 14\nColumn 1 total is 23\nColumn 2 total is 25\n\nSubmit your program my_2D_array2.py.\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nAbout 2D arrays:\n\nAlthough our examples show arrays of integers, the Numpy package supports a wide variety of data types, including floats, chars, strings and such.\nThere are even specially “compacted” versions of integers to enable working with extremely large arrays.\nThere are two common (and quite different) uses of 2D arrays:\n\nOne is for a mathematical construct called a matrix, which you’d learn in a course called linear algebra.\nThe other is for images, which we’ll look at next."
  },
  {
    "objectID": "python_primer/unit2/modules/module0.html#a-greyscale-image-is-really-a-2d-array-of-integers",
    "href": "python_primer/unit2/modules/module0.html#a-greyscale-image-is-really-a-2d-array-of-integers",
    "title": "Module 0: Arrays",
    "section": "0.3 A greyscale image is really a 2D array of integers",
    "text": "0.3 A greyscale image is really a 2D array of integers\nConsider the following program:\nfrom drawtool import DrawTool\nimport numpy as np\n\ndt = DrawTool()\ndt.set_XY_range(0,10, 0,10)\ndt.set_aspect('equal')\n\ngreypixels = np.array([ [50,   55,  60,  65,  70],\n                        [100, 105, 110, 120, 125],\n                        [150, 155, 160, 165, 170],\n                        [200, 205, 210, 215, 220] ])\ndt.set_axes_off()\ndt.draw_greyimage(greypixels)\n\ndt.display()\n\n\n\n\n\n\nExercise 0.12\n\n\n\n\nType up the above in my_image_example.py and download drawtool.py into the same folder.\nWhen you run the program, you should see the following result:\n\n\n\n\nSubmit your program my_image_example.py.\n\nWe are only looking for a working program i.e., my_image_example.py.\n\n\n\n\nWhat is a greyscale image?\n\nBy greyscale, we mean black-and-white (no colors) but more specifically (and typically) 256 shades of grey.\nConsider this illustration showing an image on the left with a small part of it zoomed in: \nAny digital image is really a 2D arrangement of small squares called pixels, in rows and columns (just like an array).\nIn a greyscale image, each pixel is colored a shade of grey.\nIn standard greyscale images, there are 256 shades of grey numbered 0 through 255 where 0 is black, and 255 is white.\nNow let’s go back to the code and examine what we wrote:\ngreypixels = np.array([ [50,   55,  60,  65,  70],\n                        [100, 105, 110, 120, 125],\n                        [150, 155, 160, 165, 170],\n                        [200, 205, 210, 215, 220] ])\n\nThe first number (50) is a shade of dark grey (almost black).\nThe next number (55) along that row specifies a slightly lighter (but still quite dark) shade of grey.\nNow consider 200, the first number in the 4th row: this is a shade of light grey, while 220 at the end is nearly white.\n\nThus, a greyscale image is nothing but a 2D array of integers whose values range between 0 and 255 (inclusive).\nOur eyes are fooled into seeing a seamless image because of high resolution. Whereas our eye can see the individual pixels in the example above, a regular image has thousands of pixels, which is enough to fool the eye.\nIn a color image, as we will later see, we’ll need three numbers for each pixel (the amounts of red, green, blue).\nAbout the greyscale machine pictured above:\n\nThis is an image of the ACE computer, one of the world’s earliest computers, designed by none other than Alan Turing, computer science pioneer and WWII hero.\nTo give you a sense of how primitive these were, your laptop with 8GB RAM has more than 60 million times the memory of the ACE. And yet, the ACE was a landmark technological wonder at its time.\n\n\n\nLet’s now work with an actual image:-\nfrom drawtool import DrawTool\nimport numpy as np\n\ndt = DrawTool()\ndt.set_XY_range(0,10, 0,10)\ndt.set_aspect('equal')\n\ngreypixels = dt.read_greyimagefile('eniac.jpg')\n# greypixels is a 2D array\n\ndt.set_axes_off()\ndt.draw_greyimage(greypixels)\n\n# Add code to print the number of rows, number of columns\n# Should print: rows = 189  columns = 267\n\ndt.display()\n\n\n\n\n\n\nExercise 0.14\n\n\n\n\nType up the above in my_image_example3.py and download eniac.jpg.\nAdd code to print the number of rows and number of columns\n\nHint: some_variable.shape[0] relates to the rows and em&gt;some_variable.shape[1] relates to the columns\n\n\nSubmit your program my_image_example3.py. - We are only looking for a working program i.e., my_image_example3.py.\nAnswering the following part of the exercise is recommended but not required for submission: - Spend 15 minutes learning about the ENIAC, its inventors, its significance, and write a short paragraph about this in your pdf.\n\n\nImage formats:\n\nWhen an image is stored as a file, the file needs to contain all the integers that comprise the 2D array (for greyscale images)\nLarge images can take quite a bit of space. For example, a 1000-row x 1000-column image will have one million pixels.\nYet many images have vast expanses of the same color or intensity and they offer a chance to compress (use less space by being clever).\nImage formats arose as a result of wanting to both compress the storage and to store meta-info about images.\nPopular formats include: JPG, PNG, TIFF and Bitmap.\nTypically the last part of the filename (the “.jpg” in “eniac.jpg”) tells you the format.\nPython provides a way of reading from these formats so that we don’t have to worry about the details.\n\nLet’s now modify a greyscale image:\nfrom drawtool import DrawTool\nimport numpy as np\n\ndt = DrawTool()\ndt.set_XY_range(0,10, 0,10)\ndt.set_aspect('equal')\n\ngreypixels = dt.read_greyimagefile('eniac.jpg')\n\ngreypixels2 = np.copy(greypixels)\nnum_rows = greypixels2.shape[0]\nnum_cols = greypixels2.shape[1]\n\nlightness_factor = 10\n\nfor i in range(num_rows):\n    for j in range(num_cols):\n        value = greypixels[i,j] + lightness_factor\n        if value &gt; 255:\n            value = 255\n        greypixels2[i,j] = value\n\ndt.set_axes_off()\ndt.draw_greyimage(greypixels2)\n\n# To save an image, use the save_greyimage() function:\n# dt.save_greyimage(greypixels2,'eniac-light.jpg')\n\ndt.display()\n\n\n\n\n\n\nExercise 0.15\n\n\n\n\nType up the above program in my_image_example4.py and save it in the same folder where you downloaded drawtool.py and eniac.jpg in the earlier exercise.\nExecute the program my_image_example4.py\nChange the lightness_factor to 100.\nSubmit your program my_image_example4.py.\n\nWe are only looking for a working program i.e., my_image_example4.py.\n\n\nAnswering the following part of the exercise is recommended but not required for submission: - Try different values (in the range 10 to 100) of the lightness_factor and observe the change in the image."
  },
  {
    "objectID": "python_primer/unit2/modules/module0.html#a-color-image-is-a-3d-array-of-integers",
    "href": "python_primer/unit2/modules/module0.html#a-color-image-is-a-3d-array-of-integers",
    "title": "Module 0: Arrays",
    "section": "0.4 A color image is a 3D array of integers",
    "text": "0.4 A color image is a 3D array of integers\nAbout color images:\n\nIn a color image, each pixel will have a color instead of a “greyness” factor.\nUnfortunately, one cannot easily represent colors with a single number.\nThere are many ways of using multiple numbers to encode colors.\nWe’ll use the most popular one: specify the strengths of the three primary colors (Red, Green, Blue).\nThis approach is so popular that we refer to it simply as RGB.\nThe “amount” of red is a number between 0 and 255, the amount of green is another such number, as is the amount of green.\nThus, each color is a triple of numbers, for example:\n\n(255,0,0) is all red (no green, no blue)\n\n  \n\n(0,255,0) is all green (no red, no blue)\n\n  \n\n(0,0,255) is all blue (no red, no green)\n\n  \n\n\nLet’s try a few more:\n\n(255,255,0)\n\n  \n\n(100,255,255)\n\n  \n\n(200,200,200)\n\n  \n\n(grey is R,G,B all equal)\n(0,0,0)\n\n  \n\n(255,255,255) is white\n\n\nWhen each pixel needs three numbers and there’s a grid of pixels, how do we store the numbers?\n\nWe use a small array (of size 3) to store the triple.\nThen each pixel in the 2D array of pixels will have an array of size 3.\nThis is a 3D array!\n\nLet’s look at an example:\nfrom drawtool import DrawTool\nimport numpy as np\n\ndt = DrawTool()\ndt.set_XY_range(0,10, 0,10)\ndt.set_aspect('equal')\n\npixels = np.array(\n    [ [ [255,0,0], [200,0,0], [150,0,0], [50,0,0] ], \n      [ [255,50,0], [200,100,0], [150,150,0], [50,200,0] ], \n      [ [255,50,50], [200,100,100], [150,150,150], [50,200,200] ], \n      [ [0,50,50], [0,100,100], [0,150,150], [0,200,200] ], \n      [ [0,0,50], [0,0,100], [0,0,150], [0,0,200] ]\n  ]) \n\n\ndt.set_axes_off()\ndt.draw_image(pixels)\n\ndt.display()\n\n\n\n\n\n\nExercise 0.17\n\n\n\n\nType up the above in my_color_example.py and save it in the same folder where you downloaded drawtool.py\nWhen you run the program, you should see the following result:\n\n\n\n\nSubmit your program my_color_example.py.\n\nWe are only looking for a working program i.e., my_color_example.py.\n\n\n\n\n\nLet’s point out the structure inherent in the above 3D array: \nNext, let’s work with actual color images with an example application: converting color to greyscale:\nfrom drawtool import DrawTool\nimport numpy as np\n\ndt = DrawTool()\ndt.set_XY_range(0,10, 0,10)\ndt.set_aspect('equal')\n\n# The image file is expected to be in the same folder\npixels = dt.read_imagefile('washdc.jpg')\n\nnum_rows = pixels.shape[0]\nnum_cols = pixels.shape[1]\n\ngreypixels = dt.make_greypixel_array(num_rows, num_cols)\nfor i in range(num_rows):\n    for j in range(num_cols):\n        # Average of red/green/blue\n        avg_rgb = (pixels[i,j,0] + pixels[i,j,1] + pixels[i,j,2]) / 3\n        # Convert to int\n        value = int(avg_rgb)\n        greypixels[i,j] = value\n\ndt.set_axes_off()\ndt.draw_greyimage(greypixels)\n\n# Notice: saving to a different image format (PNG):\ndt.save_greyimage(greypixels, 'washdc-grey.png')\n\ndt.display()\n\n\n\n\n\n\nExercise 0.18\n\n\n\n\nType up the above in my_color_example3.py and download washdc.jpg.\nExecute the program my_color_example3.py\n\nThe program should convert and save the color image into a greyscale and save it in your folder with a filename, washdc-grey.png.\n\nSubmit your program my_color_example3.py.\n\nWe are only looking for a working program i.e., my_color_example3.py.\n\n\nAnswering the following part of the exercise is recommended but not required for submission:\n\nTry and figure out file size of the original versus the new greyscale one.\nFind out more about JPG vs PNG formats of images, to understand why PNG format needs more storage space than the JPG format.\n\n\n\nNext, consider the following program:\nfrom drawtool import DrawTool\nimport numpy as np\n\ndt = DrawTool()\ndt.set_XY_range(0,10, 0,10)\ndt.set_aspect('equal')\n\npixels = dt.read_imagefile('washdc.jpg')\n\nnum_rows = pixels.shape[0]\nnum_cols = pixels.shape[1]\n\nfor i in range(num_rows):\n    for j in range(num_cols):\n        if ( (pixels[i,j,1] &gt; pixels[i,j,0]) \n             and (pixels[i,j,2] &lt; 0.5*pixels[i,j,1]) ):\n            pixels[i,j,0] = 0\n            pixels[i,j,1] = 0\n            pixels[i,j,2] = 255\n\ndt.set_axes_off()\ndt.draw_image(pixels)\n\ndt.display()\n\n\n\n\n\n\nExercise 0.20\n\n\n\n\nType up the above in my_color_example4.py. You already have washdc.jpg\nSubmit your program my_color_example4.py.\n\nWe are only looking for a working program i.e., my_color_example4.py.\n\n\nAnswering the following part of the exercise is recommended but not required for submission:\n\nTry making the following changes and run your program my_color_example4.py to observe your outputs:\n\n\npixels[i,j,0] = 0\npixels[i,j,1] = 255\npixels[i,j,2] = 0\nand\npixels[i,j,0] = 255\npixels[i,j,1] = 0\npixels[i,j,2] = 0\n\nUnderstand why the image is changing with the above inputs.\n\n\n\nWhat did we just do?\n\nWe are examining the R,G,B values for each pixel, to see if the condition (G &gt; R) and (B &lt; G) is satisfied.\nWhen the condition is satisfied, we are overwriting the pixel with a new (all blue) color.\nWhat we’re trying to do is identify greenery by asking: when do we have the Green value a bit larger than the Red value and much larger than the Blue value?\nWhy is this useful?\n\nThis is essentially what many satellite-image applications do:\n\nidentify areas of interest for urban planning, crop surveys, environmental assessment (think: rainforest), and so on.\n\nNotice that this rule does not capture all greenery."
  },
  {
    "objectID": "python_primer/unit2/modules/module0.html#arrays-and-slicing",
    "href": "python_primer/unit2/modules/module0.html#arrays-and-slicing",
    "title": "Module 0: Arrays",
    "section": "0.5 Arrays and slicing",
    "text": "0.5 Arrays and slicing\nSlicing can be applied to arrays in the same way that we used them earlier for lists with one major difference, as we’ll point out.\nFor example:\nimport numpy as np\n\nprint('list slicing')\nA = [1, 4, 9, 16, 25, 36]\nB = A[1:3]                 # B has [4, 9]\nprint(B)\nB[0] = 5                   # B now has [5, 9]\nprint(B)\nprint(A)                   # What does this print?\n\nprint('array slicing')\nA = np.array( [1, 4, 9, 16, 25, 36] )\nB = A[1:3]                 # B \"sees\" [4, 9]\nprint(B)\nB[0] = 5                   # What happens now?\nprint(B)\nprint(A)                   # What does this print?\n\n\n\n\n\n\nExercise 0.23\n\n\n\nType up the above in my_slicing_example.py.\nSubmit your program my_slicing_example.py. \n\n\nLet’s explain the major difference in list-slicing and array-slicing:\n\nThe slicing expression 1:3in A[1:3] refers to all the elements from position 1 (inclusive) to just before position 3 (so, not including position 3).\nWith lists, a new list is created with these elements:\nA = [1, 4, 9, 16, 25, 36]\nB = A[1:3]\nSo, writing into the new list (B) does not affect the old list (A) from which the slice was taken.\nBut with arrays, a slice is only a view as if we were giving a name to a zoomed-in-part:\nA = np.array( [1, 4, 9, 16, 25, 36] )\nB = A[1:3]\nHere, array B refers to the segment (that’s still in A) from positions 1 to 2.\nThis is why in arrays, if you make a change to B, you are actually changing A.\nWhy did they do this?\n\nThe reason is, many image processing applications require working on parts of images.\nThen, with regular slicing, if we were to pull out parts and modify them, we’d have to write them back in.\nSlicing makes it convenient to write directly into parts of images.\n\n\nSlicing is a big sub-topic so we’ll just point out a few useful things to remember via an example:\nimport numpy as np\n# Color image:\nA = np.array(\n    [ [ [255,0,0], [200,0,0], [150,0,0], [50,0,0] ], \n      [ [255,50,0], [200,100,0], [150,150,0], [50,200,0] ], \n      [ [255,50,50], [200,100,100], [150,150,150], [50,200,200] ], \n      [ [0,50,50], [0,100,100], [0,150,150], [0,200,200] ], \n      [ [0,0,50], [0,0,100], [0,0,150], [0,0,200] ]\n  ]) \n\nB = A[4:5,:,: ]   # The last row\nprint(B) \nC = A[:,1:2,:]    # The second column\nprint(C)\nD = A[:3,:2,:]    # The pixels in rows 0-2 and cols 0-1 \nprint(D)\n\n\n\n\n\n\nNote\n\n\n\n\nA different slice can be specified for each dimension of a multidimensional array.\nWhen neither end of a slicing range is specified, that implies all the elements, as in:\nB = A[4:5, :,: ]   # The last row\nHere, the stand-alone colons imply the whole range for the 2nd and 3rd array index positions.\nIt is possible to specify just one limit as in:\nD = A[:3, :2,:]    # The pixels in rows 0-2 and cols 0-1 &lt;\nIn the first (row) case, we’re saying “all rows from the start up to row 2”.\n\n\n\nLet’s apply slicing to creating a cropped image:\nfrom drawtool import DrawTool\nimport numpy as np\n\ndt = DrawTool()\ndt.set_XY_range(0,10, 0,10)\ndt.set_aspect('equal')\n\npixels = dt.read_imagefile('washdc.jpg')\n\n# Crop from row 50 to 179, and column 50 to 199\npixels2 = pixels[50:180, 50:200]\n\ndt.set_axes_off()\ndt.draw_image(pixels2)\n\ndt.display()\n\n\n\n\n\n\nExercise 0.24\n\n\n\n\nType up the above program in my_slicing_example2.py. You already have washdc.jpg\nExecute the program my_slicing_example2.py.\nSubmit your program my_slicing_example2.py.\n\nWe are only looking for a working program i.e., my_slicing_example2.py.\n\n\nAnswering the following part of the exercise is recommended but not required for submission:\n\nTry changing the cropping in the line pixels2 = pixels[50:180, 50:200] so that the Washington Monument shows up centered in your cropped image, with little else around it."
  },
  {
    "objectID": "python_primer/unit2/modules/install-pandas-plotly.html",
    "href": "python_primer/unit2/modules/install-pandas-plotly.html",
    "title": "Install Plotly and Pandas via Anaconda",
    "section": "",
    "text": "Note\n\n\n\nWindows users, see the instructions for Windows below\n\n\n\nGo to https://www.anaconda.com/products/individual#macos, then scroll down near the bottom, and install the Python 64-Bit Graphical installer. This installs software to help you install Anaconda.\nVerify your installation by pressing Command+Space and typing ‘Anaconda’ in Spotlight. If you see Anaconda-Navigator as shown below, you have installed it. \nNow continue with Spotlight, open Anaconda Navigator and click on the environments tab on the left hand side. \nClick on the environment that says “base (root)” and in the top center of the screen on the drop down menu, select “All” instead of “Installed”. \nIn the “Search Packages” bar, type in “pandas”. Select the checkbox next to the “pandas” package and click “Apply” in the bottom left corner of the interface. If you cannot find plotly, pandas, or networkx packages, click “Update index”.\nRepeat Steps 4 and 5, but this time instead of “pandas”, install the “plotly” package.\nRepeat Steps 4 and 5, and install the “networkx” package."
  },
  {
    "objectID": "python_primer/unit2/modules/install-pandas-plotly.html#installation-instructions-for-mac-osx",
    "href": "python_primer/unit2/modules/install-pandas-plotly.html#installation-instructions-for-mac-osx",
    "title": "Install Plotly and Pandas via Anaconda",
    "section": "",
    "text": "Note\n\n\n\nWindows users, see the instructions for Windows below\n\n\n\nGo to https://www.anaconda.com/products/individual#macos, then scroll down near the bottom, and install the Python 64-Bit Graphical installer. This installs software to help you install Anaconda.\nVerify your installation by pressing Command+Space and typing ‘Anaconda’ in Spotlight. If you see Anaconda-Navigator as shown below, you have installed it. \nNow continue with Spotlight, open Anaconda Navigator and click on the environments tab on the left hand side. \nClick on the environment that says “base (root)” and in the top center of the screen on the drop down menu, select “All” instead of “Installed”. \nIn the “Search Packages” bar, type in “pandas”. Select the checkbox next to the “pandas” package and click “Apply” in the bottom left corner of the interface. If you cannot find plotly, pandas, or networkx packages, click “Update index”.\nRepeat Steps 4 and 5, but this time instead of “pandas”, install the “plotly” package.\nRepeat Steps 4 and 5, and install the “networkx” package."
  },
  {
    "objectID": "python_primer/unit2/modules/install-pandas-plotly.html#installation-instructions-for-windows",
    "href": "python_primer/unit2/modules/install-pandas-plotly.html#installation-instructions-for-windows",
    "title": "Install Plotly and Pandas via Anaconda",
    "section": "Installation instructions for Windows",
    "text": "Installation instructions for Windows\n\nGo to https://www.anaconda.com/products/individual#macos, then scroll down near the bottom, and install the Python 64-Bit Graphical installer. This installs software to help you install Anaconda.\nFor “Select Installation Type” install for “Just Me” (recommended).\nChoose a destination folder to install Anaconda in. Our recommendation is to install it in C:\\Users\\YourName\\anaconda3.\nUnder “Advanced Installation Options” choose “Register Anaconda3 as my default Python 3.8” only.\nNow open Anaconda Navigator and click on the environments tab on the left hand side.\n\nClick on the environment that says “base (root)” and in the top center of the screen on the drop down menu, select “All” instead of “Installed”. \nIn the “Search Packages” bar, type in “pandas”. Select the checkbox next to the “pandas” package and click “Apply” in the bottom left corner of the interface. \nRepeat Steps 6 and 7, but this time instead of “pandas”, install “plotly”.\nRepeat Steps 6 and 7, and install the “networkx” package."
  },
  {
    "objectID": "anaconda-mac.html",
    "href": "anaconda-mac.html",
    "title": "Anaconda Installation Guide for macOS",
    "section": "",
    "text": "This guide will walk you through the process of installing Anaconda, a popular Python distribution, on your macOS computer. Anaconda provides a convenient way to manage Python packages and environments for data science and scientific computing.\n\n\n\nBefore you begin, ensure you have the following:\n\nA macOS computer.\nAn internet connection.\nSufficient disk space for the installation.\n\n\n\n\n\n\nVisit the Anaconda download page at https://www.anaconda.com/download.\n\n\n\nClick on the “Download” button under the macOS section depending on you System-on-chip (Intel/M1/M2) to download the Anaconda installer for macOS.\n\n\n\nDownload Anaconda\n\n\n\n\n\n\nLocate the downloaded file (usually in your “Downloads” folder).\nDouble-click the Anaconda disk image (.dmg) file to open it and click on “Allow” when prompted.\n\n\n\n\nRun Installer\n\n\n\n\n\nAllow Installation\n\n\n\n\n\n\nFollow the on-screen instructions to begin the installation.\nRead and accept the license agreement when prompted.\n\n\n\n\nRead Me\n\n\n\n\n\nLicense Agreement\n\n\n\n\n\nClick the “Install” button to begin the installation process. This may take a few minutes.\n\n\n\nInstall\n\n\n\n\n\nOnce the installation is complete, you will see a confirmation message. Click the “Continue” button and finally close the installation wizard by clicking on the “Close” button.\n\n\n\nInstallation Complete\n\n\n\n\n\nClose Installation Wizard\n\n\n\n\n\n\n\n\nMove the Installer to Trash\n\n\n\n\n\n\n\n\nDon’t Update\n\n\n\n\n\n\n\n\nDon’t Log in/Sign up\n\n\n\n\n\n\nTo verify the installation launch a local Jupyter Server by clicking on the “launch” button for Jupyter Notebook.\n\n\n\nLaunch Jupyter Server\n\n\nYou should see a terminal open and the Jupyter Notebbok server launched in a browser window.\n\n\n\nJupyter Server Launched\n\n\n\n\n\n\nCongratulations! You’ve successfully installed Anaconda and Jupyter on your macOS computer. You can now use Anaconda to create Python environments, manage packages, and work on data science projects.\nFor more information on using Anaconda, refer to the official documentation at https://docs.anaconda.com/.\nIf you encounter any issues or have questions, don’t hesitate to seek help from the Anaconda community or consult the documentation for troubleshooting tips.\n\n\n\nThis is a Quarto website. To learn more about Quarto websites visit https://quarto.org/docs/websites. Author: Kartik Bulusu Contact: bulusu © 2023 All rights reserved"
  },
  {
    "objectID": "anaconda-mac.html#introduction",
    "href": "anaconda-mac.html#introduction",
    "title": "Anaconda Installation Guide for macOS",
    "section": "",
    "text": "This guide will walk you through the process of installing Anaconda, a popular Python distribution, on your macOS computer. Anaconda provides a convenient way to manage Python packages and environments for data science and scientific computing."
  },
  {
    "objectID": "anaconda-mac.html#prerequisites",
    "href": "anaconda-mac.html#prerequisites",
    "title": "Anaconda Installation Guide for macOS",
    "section": "",
    "text": "Before you begin, ensure you have the following:\n\nA macOS computer.\nAn internet connection.\nSufficient disk space for the installation."
  },
  {
    "objectID": "anaconda-mac.html#installation-steps",
    "href": "anaconda-mac.html#installation-steps",
    "title": "Anaconda Installation Guide for macOS",
    "section": "",
    "text": "Visit the Anaconda download page at https://www.anaconda.com/download.\n\n\n\nClick on the “Download” button under the macOS section depending on you System-on-chip (Intel/M1/M2) to download the Anaconda installer for macOS.\n\n\n\nDownload Anaconda\n\n\n\n\n\n\nLocate the downloaded file (usually in your “Downloads” folder).\nDouble-click the Anaconda disk image (.dmg) file to open it and click on “Allow” when prompted.\n\n\n\n\nRun Installer\n\n\n\n\n\nAllow Installation\n\n\n\n\n\n\nFollow the on-screen instructions to begin the installation.\nRead and accept the license agreement when prompted.\n\n\n\n\nRead Me\n\n\n\n\n\nLicense Agreement\n\n\n\n\n\nClick the “Install” button to begin the installation process. This may take a few minutes.\n\n\n\nInstall\n\n\n\n\n\nOnce the installation is complete, you will see a confirmation message. Click the “Continue” button and finally close the installation wizard by clicking on the “Close” button.\n\n\n\nInstallation Complete\n\n\n\n\n\nClose Installation Wizard\n\n\n\n\n\n\n\n\nMove the Installer to Trash\n\n\n\n\n\n\n\n\nDon’t Update\n\n\n\n\n\n\n\n\nDon’t Log in/Sign up\n\n\n\n\n\n\nTo verify the installation launch a local Jupyter Server by clicking on the “launch” button for Jupyter Notebook.\n\n\n\nLaunch Jupyter Server\n\n\nYou should see a terminal open and the Jupyter Notebbok server launched in a browser window.\n\n\n\nJupyter Server Launched"
  },
  {
    "objectID": "anaconda-mac.html#conclusion",
    "href": "anaconda-mac.html#conclusion",
    "title": "Anaconda Installation Guide for macOS",
    "section": "",
    "text": "Congratulations! You’ve successfully installed Anaconda and Jupyter on your macOS computer. You can now use Anaconda to create Python environments, manage packages, and work on data science projects.\nFor more information on using Anaconda, refer to the official documentation at https://docs.anaconda.com/.\nIf you encounter any issues or have questions, don’t hesitate to seek help from the Anaconda community or consult the documentation for troubleshooting tips.\n\n\n\nThis is a Quarto website. To learn more about Quarto websites visit https://quarto.org/docs/websites. Author: Kartik Bulusu Contact: bulusu © 2023 All rights reserved"
  },
  {
    "objectID": "python3-mac.html",
    "href": "python3-mac.html",
    "title": "Installing Python on macOS",
    "section": "",
    "text": "Before you begin, ensure you have the following:\n\nA macOS computer.\nAn internet connection.\nAdequate disk space for the installation."
  },
  {
    "objectID": "python3-mac.html#prerequisites",
    "href": "python3-mac.html#prerequisites",
    "title": "Installing Python on macOS",
    "section": "",
    "text": "Before you begin, ensure you have the following:\n\nA macOS computer.\nAn internet connection.\nAdequate disk space for the installation."
  },
  {
    "objectID": "python3-mac.html#step-1-download-and-install-python",
    "href": "python3-mac.html#step-1-download-and-install-python",
    "title": "Installing Python on macOS",
    "section": "Step 1: Download and Install Python",
    "text": "Step 1: Download and Install Python\n\nVisit the official Python website: https://www.python.org/downloads/macos/\nDownload the latest version of Python for macOS by clicking on the “Download Python X.Y.Z” button (replace X.Y.Z with the latest version).\nOpen the downloaded installer and follow the installation instructions. Make sure to check the box that says “Add Python X.Y to PATH.”"
  },
  {
    "objectID": "python3-mac.html#step-2-verify-python-installation",
    "href": "python3-mac.html#step-2-verify-python-installation",
    "title": "Installing Python on macOS",
    "section": "Step 2: Verify Python Installation",
    "text": "Step 2: Verify Python Installation\nTo ensure that Python is installed correctly, open your terminal and run the following command:\npython3 --version"
  },
  {
    "objectID": "python3-mac.html#step-3-install-jupyter-notebook",
    "href": "python3-mac.html#step-3-install-jupyter-notebook",
    "title": "Installing Python on macOS",
    "section": "Step 3: Install Jupyter Notebook",
    "text": "Step 3: Install Jupyter Notebook\nTo install Jupyter Notebook, run the following command in your terminal:\npip3 install jupyter\nThis command will download and install Jupyter Notebook, a powerful tool for interactive Python development."
  },
  {
    "objectID": "python3-mac.html#step-4-export-python-bin-path-in-.zshrc",
    "href": "python3-mac.html#step-4-export-python-bin-path-in-.zshrc",
    "title": "Installing Python on macOS",
    "section": "Step 4: Export Python Bin Path in ~/.zshrc",
    "text": "Step 4: Export Python Bin Path in ~/.zshrc\nNow, you will export the Python bin path in your ~/.zshrc file to make it accessible in your terminal sessions. To open ~/.zshrc for editing, follow these simplified steps:\n\nOpen your terminal.\nType the following command and press Enter:\n\nopen -e ~/.zshrc\nThis command will open your ~/.zshrc file in the default text editor.\n\nIn the text editor, add the following line at the end of the file:\n\nexport PATH=$PATH:$(python3 -m site --user-base)/bin\n\nSave the file and close the text editor."
  },
  {
    "objectID": "python3-mac.html#step-5-create-.zshrc-if-not-found",
    "href": "python3-mac.html#step-5-create-.zshrc-if-not-found",
    "title": "Installing Python on macOS",
    "section": "Step 5: Create ~/.zshrc if Not Found",
    "text": "Step 5: Create ~/.zshrc if Not Found\nIf you receive an error indicating that the ~/.zshrc file does not exist, you can create it using the following command:\ntouch ~/.zshrc\nThis command will create an empty ~/.zshrc file if it doesn’t already exist.\nNow repeat Step 4."
  },
  {
    "objectID": "python3-mac.html#step-6-apply-changes",
    "href": "python3-mac.html#step-6-apply-changes",
    "title": "Installing Python on macOS",
    "section": "Step 6: Apply Changes",
    "text": "Step 6: Apply Changes\nTo apply the changes, either restart your terminal or run the following command:\nsource ~/.zshrc\nYour Python installation is now set up and configured for use on macOS."
  },
  {
    "objectID": "python3-mac.html#step-7-launch-jupyter-notebook",
    "href": "python3-mac.html#step-7-launch-jupyter-notebook",
    "title": "Installing Python on macOS",
    "section": "Step 7: Launch Jupyter Notebook",
    "text": "Step 7: Launch Jupyter Notebook\nTo start Jupyter Notebook, open your terminal and run the following command:\njupyter notebook\nThis command will launch the Jupyter Notebook in your default web browser, allowing you to create and run Python notebooks for interactive coding and data analysis."
  },
  {
    "objectID": "python3-mac.html#conclusion",
    "href": "python3-mac.html#conclusion",
    "title": "Installing Python on macOS",
    "section": "Conclusion",
    "text": "Conclusion\nYou have successfully installed Python and Jupyter Notebook on your macOS system, configured the user-specific Python bin path, and exported it to your ~/.zshrc file for easy access. You can now use Jupyter Notebook for interactive coding and data analysis.\nHappy coding!\n\n\n\nThis is a Quarto website. To learn more about Quarto websites visit https://quarto.org/docs/websites. Author: Kartik Bulusu Contact: bulusu © 2023 All rights reserved"
  },
  {
    "objectID": "python_primer/unit2/modules/module1.html",
    "href": "python_primer/unit2/modules/module1.html",
    "title": "Module 1: Tuples, Sets, Dictionaries",
    "section": "",
    "text": "Our goal in this almost-final module was to:\n\nIntroduce the all-important topics of tuples, sets and dictionaries.\nLightly sketch a few advanced topics to introduce ideas and show some examples, without expecting mastery of all the details.\n\nIn the next module, we will dive into examples from across the disciplines. Some of these advanced topics will be useful\nSo, one might ask: what’s left in Python to learn?\nQuite a bit it turns out:\n\nLike many modern programming languages, Python is large enough that one needs a few courses to experience all of it.\nSome concepts are advanced enough to need weeks to cover (example: objects).\nOthers need a background in data structures to understand how they work (example: dictionaries).\nYet others involve library functions and external packages.\n\nDo you need to learn more? Is what we’ve learned enough to achieve a good deal?\nWe’ll have more to say about this in a later module."
  },
  {
    "objectID": "python_primer/unit2/modules/module1.html#objectives",
    "href": "python_primer/unit2/modules/module1.html#objectives",
    "title": "Module 1: Tuples, Sets, Dictionaries",
    "section": "",
    "text": "Our goal in this almost-final module was to:\n\nIntroduce the all-important topics of tuples, sets and dictionaries.\nLightly sketch a few advanced topics to introduce ideas and show some examples, without expecting mastery of all the details.\n\nIn the next module, we will dive into examples from across the disciplines. Some of these advanced topics will be useful\nSo, one might ask: what’s left in Python to learn?\nQuite a bit it turns out:\n\nLike many modern programming languages, Python is large enough that one needs a few courses to experience all of it.\nSome concepts are advanced enough to need weeks to cover (example: objects).\nOthers need a background in data structures to understand how they work (example: dictionaries).\nYet others involve library functions and external packages.\n\nDo you need to learn more? Is what we’ve learned enough to achieve a good deal?\nWe’ll have more to say about this in a later module."
  },
  {
    "objectID": "python_primer/unit2/modules/module1.html#tuples",
    "href": "python_primer/unit2/modules/module1.html#tuples",
    "title": "Module 1: Tuples, Sets, Dictionaries",
    "section": "1.0 Tuples",
    "text": "1.0 Tuples\n\nIn this section and the ones that follow, we’ll touch lightly upon a few topics that are or were “not on the exam” but will be useful in general.\nSome of these concepts will be directly used in the next module.\nSuppose we want to write a function that computes both the square and cube of a number:\nOne option is to write two separate functions\ndef square(x):\n    return x*x\n\ndef cube(x):\n    return x*x*x\n\nx = 5\nprint(x, square(x), cube(x))\nWe can alternatively write one function that computes and returns two things:\ndef do_both(x):\n    square = x*x\n    cube = square*x \n    return (square, cube)\n\nx = 5\n(y, z) = do_both(x)\nprint(x, y, z)\nNotice that the return statement returns a pair of values:\nreturn (square, cube)\nAnd that the pair is enclosed in parentheses.\nAnd notice that, since two values are being returned, we need a pair to capture the return values:\n(y, z) = do_both(x)\nWe can go beyond a pair to any number of such “grouped” variables:\ndef do_more(x):\n    square = x*x\n    cube = square*x \n    fourth = cube*x\n    fifth = fourth*x\n    return (square, cube, fourth, fifth)\n\nx = 5\n(a, b, c, d) = do_more(x)\nprint(x, a, b, c, d)\nSuch a grouping of variables is called a tuple.\n\nTuples are similar to lists in many ways, but different in one crucial aspect:\n\nFirst, let’s examine how to write the same do_both() function above but using lists:\ndef do_both_list(x):\n    square = x*x\n    cube = square*x \n    return [square, cube]\n\nx = 5\n[y, z] = do_both_list(x)\nprint(x, y, z)\nThis works just fine.\nAnother way in which a tuple is like a list is in using square-brackets and position indices to access individual elements, as in:\n# List version:\nL = do_both_list(x)\nprint(L[0], L[1])      # L[0] has the square, L[1] has the cube\n\n# Tuple version:\nt = do_both(x)\nprint(t[0], t[1])      # t[0] has the square, t[1] has the cube\nHowever, here’s the difference:\n# List version:\nL = do_both_list(x)\nL[0] = 0              # This is allowed\n\n# Tuple version:\nt = do_both(x)\nt[0] = 0              # This is NOT allowed\nThus, you can replace a list element but you cannot replace a tuple element.\nThis is in fact a bit subtle, as this example shows:\nx = 3\ny = 4\nt = (x, y)   # The tuple's value is now fixed.\nprint(t)     # (3, 4)\nx = 2\nprint(t)     # (3, 4)\n\n\n\n\n\n\nNote\n\n\n\n\nOnce the tuple is instantiated (that’s the technical term for “made”) then the tuple’s value cannot be changed.\nTuples are immutable.\n\n\n\nYou can of course assign a different tuple value to a tuple variable as in:\nt = (1, 2)\nprint(t)\nt = (3, 4)\nprint(t)\nHere, we’re simply replacing one fixed-value tuple with another.\nTuples are therefore said to be an immutable type.\n\nSimilarly, strings are also an immutable object-type.\n\n\n\n\n\n\n\nNote\n\n\n\n\nWhy use tuples at all?\n\nIt’s to allow programmers to signal clearly that their tuples shouldn’t be changed.\nThis turns out to be convenient for mathematical tuples (like points on a graph), which are similar.\n\n\n\n\nGroups of tuples can be combined into lists and other data structures.\n\nIt’s very useful in working with points (the mathematical point you draw with coordinates) and other mathematical structures that need more than one number to describe.\nFor example, here’s a program that, given a list of points, finds the leftmost point (the one with the least x value).\n\ndef leftmost(L):\n    leftmost_guess = L[0]\n    for q in L:\n        if q[0] &lt; leftmost_guess[0]:\n            leftmost_guess = q\n    return leftmost_guess\n\nlist_of_points = [(3,4), (1,2), (3,2), (4,3), (5,6)]\n(x,y) = leftmost(list_of_points)\nprint('leftmost:', (x,y) )\n# leftmost: (1, 2)\n\n\n\n\n\n\nExercise 1.1\n\n\n\nType up the above in my_tuple_example.py.\nSubmit your program my_tuple_example.py.\nAnswering the following part of the exercise is recommended but not required for submission: - Trace through the iterations and record them in a separate document or spreadsheet.\n\n\n\n\n\n\n\n\nExercise 1.2\n\n\n\nConsider the following:\nimport math\n\ndef distance(p, q):\n    return math.sqrt( (p[0]-q[0])**2 + (p[1]-q[1])**2 )\n\ndef find_closest_point(p, L):\n    # Write your code here to find the closest point in L to p\n    # and to return both the point and the distance to it from p.\n\nlist_of_points = [(3,4), (1,2), (3,2), (4,3), (5,6)]\nquery_point = (5,4)\n\n(c, d) = find_closest_point(query_point, list_of_points)\nprint('closest:',c,' at distance', d)\n# Should print: \n# closest: (4, 3)  at distance 1.4142135623730951\n\nIn my_tuple_example2.py,\n\nFill in the missing code to find the closest point in a list of points to a given query point and\nReturn both the closest point and the distance to the query point as a tuple.\n\nSubmit your program my_tuple_example2.py."
  },
  {
    "objectID": "python_primer/unit2/modules/module1.html#sets",
    "href": "python_primer/unit2/modules/module1.html#sets",
    "title": "Module 1: Tuples, Sets, Dictionaries",
    "section": "1.1 Sets",
    "text": "1.1 Sets\nThe general mathematical term set means a “collection of like things but without duplicates”.\nPython has special syntax and operations to support this mathematical notion:\n\nHere are two sets being defined:\nA = {2, 4, 5, 6, 8}       # Curly brackets\nB = {'hello', 'hi', 'hey', 'howdy'}\nThe first set contains five numbers, whereas the second contains four strings.\n\nConsider this variation\nA = {2, 4, 5, 6, 8}\nB = {'hello', 'hi', 'hey', 'howdy'}\n\nC = {8, 5, 4, 6, 2, 4, 5, 5}\nprint(C)\nif A == C:\n    print('they are equal')\nelse:\n    print('they are not equal')\nGiven what we’ve said about sets, what will be printed?\n\n\n\n\n\n\nExercise 1.3\n\n\n\n\nType up the above in my_set_example.py to find out.\nSubmit your program my_set_example.py.\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\nEven though a set may not have duplicates, we are actually allowed to try to create duplicates:\nC = {8, 5, 4, 6, 2, 4, 5, 5}\nPython simply removes the duplicates.\nPython also organizes sets so that sets can be compared for equality: Thus, printing the set\nC = {8, 5, 4, 6, 2, 4, 5, 5}\nactually results in\n{2, 4, 5, 6, 8}\n\n\n\nWhat can we do with sets?\n\nThe most common operation is to see whether some value is in some set we’ve defined using the keyword in:\ndef check_vowel(x):\n    vowels = {'a','e','i','o','u'}\n    if x in vowels:\n        print(x, 'is a vowel')\n    else:\n        print(x, 'is not a vowel')\n\ncheck_vowel('a')\ncheck_vowel('b')\nOther, more mathematical operations, feature different ways of combining sets. For example:\nA = {2, 4, 5, 6, 8}\nB = {1, 3, 5, 6}\n\nD = A | B    # union\nprint(D)\nHere, D contains every element across both sets.\nOther such operators include:\n\nintersection (elements that are in both sets)\ndifference (elements in one set that are not in the other)\n\nSince our goal is merely to give you a taste of these advanced topics, we won’t say much more about these operations.\n\nLet’s look at an application:\n\nIn text processing, the term stopword is often used to describe commonly used words that serve little or no purpose in text analysis:\n\nWhen you analyze digitized texts for meaning, topic and dialogue (for example), words like “the”, “of”, “and” get in the way of analysis.\nThey are often discarded from text analysis that seeks to analyze more significant words.\n\nWe’ll ask the question: what proportion of text typically consists of stopwords? (The answer is surprising, as we’ll see).\nTo answer the question, we’ll scan text word-by-word and see if each word is in the set of stopwords.\nAlthough there are hundreds of stopwords, we’ll keep things simple by targeting a few.\n\nLet’s write this up:\nimport wordtool as wt \n\n# The 25 most common stopwords\nstopwords = {'the','be','to','of','and','a','in','that','have','I',\n             'it','for','not','on','with','he','she','you','do','as',\n             'at','his','her','they','by'}\n\nwt.open_file_byword('alice.txt')\n\ns = wt.next_word()\nnum_stopwords = 0\ntotal_words = 0\n\nwhile s != None:\n    if s in stopwords:\n        num_stopwords += 1   # Count stopwords\n    total_words += 1         # And all words\n    s = wt.next_word()\n\npercent_stopwords = 100 * (num_stopwords/total_words)\n# print the following:\nstring_to_print = '% of stopwords:{0:.2f}'.format(percent_stopwords)\nprint(string_to_print)\n# and print the following:\n# print(percent_stopwords)\n\n\n\n\n\n\nExercise 1.4\n\n\n\n\nDownload the text Alice in Wonderland and save it in the same folder as your code\nType up the above program in my_stopwords.py.\nSubmit your program my_stopwords.py.\n\nAnswering the following part of the exercise is recommended but not required for submission:\n\nCompare the percentage of stopwords in these two famous texts: Alice in Wonderland and Darwin’s The Origin of the Species.\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nAs an aside, we’ll point out something about string formatting, which is also an advanced topic:\n\nIt’s plain ugly (and often useless) to print out all the digits in a floating number like:\n% of stopwords: 31.969357958208498\nInstead, we’d like\n% of stopwords: 31.97\nSpecifying to Python how you’d like a number formatted, unfortunately, is a bit of a chore using somewhat cryptic commands embedded within strings:\nstring_to_print = '% of stopwords:{0:.2f}'.format(percent_stopwords)\nprint(string_to_print)\nWe’ll explain this one with the understanding that a proper look into this topic is beyond the scope of this course:\n\nFirst, one builds the target strings using typical quotes, as in:\nstring_to_print = '% of stopwords: '\nThen, attach the format function with the desired variable whose value we wish to print nicely:\nstring_to_print = '% of stopwords: '.format(percent_stopwords)\nThen, figure out where in the string you want the resulting number and use curly brackets:\nstring_to_print = '% of stopwords: {0}'.format(percent_stopwords)\nHere, 0 means the first such number. If had a second number, we’d use 1, and so on.\nFinally, specify both how many digits after the decimal point, and that this number is a float:\nstring_to_print = '% of stopwords: {0:.2f}'.format(percent_stopwords)\n\nYes, a bit cryptic and difficult to understand. But eventually, when you get used to it, it’s powerful when you are doing a lot of text output."
  },
  {
    "objectID": "python_primer/unit2/modules/module1.html#dictionaries",
    "href": "python_primer/unit2/modules/module1.html#dictionaries",
    "title": "Module 1: Tuples, Sets, Dictionaries",
    "section": "1.2 Dictionaries",
    "text": "1.2 Dictionaries\nConsider this problem:\n\nWe have a data file that looks like this:\napple\nbanana\napple\npear\nbanana\nbanana\napple\nkiwi\norange\norange\norange\nkiwi\norange\nThis might represent, for example, a record of sales at a fruit stand.\nWe’d like to count how many of each fruit.\nOne way would be to define a counter for each kind:\nnum_apples = 0\nnum_bananas = 0\nnum_pears = 0\nnum_kiwis = 0\nnum_oranges = 0\nwith open('fruits.txt','r') as data_file:\n    line = data_file.readline()\n    while line != '':\n        fruit = line.strip()\n        if fruit == 'apple':\n            num_apples += 1\n        elif fruit == 'banana':\n            num_bananas += 1\n        elif fruit == 'pear':\n            num_pears += 1\n        elif fruit == 'kiwi':\n            num_kiwis += 1\n        elif fruit == 'orange':\n            num_oranges += 1\n        else:\n            print('unknown fruit:', fruit)\n        line = data_file.readline()\n\nprint('# apples:', num_apples)\nprint('# bananas:', num_bananas)\nprint('# pears:', num_pears)\nprint('# kiwi:', num_kiwis)\nprint('# oranges:', num_oranges)\n\n\n\n\n\n\n\nExercise 1.5\n\n\n\n\nType up the above in my_fruits.py and use the data file fruits.txt to confirm.\nNext, in my_fruits2.py, change the program to accommodate the additional fruits in fruits2.txt.\n\nSubmit the following two programs:\n\nmy_fruits.py\nmy_fruits2.py\n\n\n\nAside from being tedious, this approach has other issues:\n\nOne would like to be able to write a general program that does not need to know which fruits are in a file.\nWhat if there were a thousand different kinds of items (not fruits, say, but department-store items)?\nA single mistake in a variable can cause the counts to be wrong.\n\nFortunately, the use of dictionaries will make it easy:\n# Make an empty dictionary\ncounters = dict()\n\nwith open('fruits.txt','r') as data_file:\n    line = data_file.readline()\n    while line != '':\n        fruit = line.strip()\n        if fruit in counters.keys():\n            # If we've seen the fruit before, increment.\n            counters[fruit] += 1\n        else:\n            # If this is the first time, set the counter to 1\n            counters[fruit] = 1\n        line = data_file.readline()\n\nprint(counters)\n\n\n\n\n\n\nExercise 1.6\n\n\n\n\nType up the above in my_fruits3.py and first apply it to fruits.txt.\nThen to fruits2.txt.\nSubmit my_fruits3.py with fruits2.txt as the input to your program.\n\nAnswering the following part of the exercise is recommended but not required for submission:\n\nExplain to yourself what you had to change in the code to make it work for the second file.\n\n\n\nNow let’s explain:\n\nA dictionary is a technical term that is only somewhat related to an actual English dictionary.\nThink of an English dictionary as something where you look up a word and receive its meaning.\nThey operations here are look up and receive an associated value (the word’s meaning, in this case).\nIn Python, a dictionary is a structure that lets you associate one kind of data with another.\nThe technical equivalent of a word is called a key and the equivalent of the meaning is called the value.\nSo, a dictionary is a collection of key-value pairs.\nHere’s an example:\nd = {'apple': 3, 'banana': 3, 'pear': 1, 'kiwi': 2, 'orange': 4}\nIn this case, we’re associating\n\nThe value 3 with the key ‘apple’\nThe value 3 with the key ‘banana’\nThe value 1 with the key ‘pear’\nThe value 2 with the key ‘kiwi’\nThe value 4 with the key ‘orange’\n\nConveniently, Python allows array indexing using the key:\nd = {'apple': 3, 'banana': 3, 'pear': 1, 'kiwi': 2, 'orange': 4}\n\nprint(d['apple'])  # Prints 3\n\nd['banana'] = 0    \n# Which changes the value associated with 'banana' to 3\nThe above is an example of a dictionary that’s already built (after we’ve processed the data).\nTo process data on-the-fly, we need an additional operation that an English dictionary does not really have:\n\nWe need to be able to add something that’s not already there.\nTo add a new key, we simply use it as an index:\n\nd = {'apple': 3, 'banana': 3, 'pear': 1, 'kiwi': 2, 'orange': 4}\n\nd['plum'] = 0\nWith this understanding we can now revisit the code in the fruit example:\nWe’ve seen how to read a file line-by-line before\nwith open('fruits.txt','r') as data_file:\n    line = data_file.readline()\n    while line != '':\n        fruit = line.strip()           # Remove whitespace on either side\n\n        # This is where we'd do something with the datda\n\n        line = data_file.readline()    # Get the next line\nThe rest is merely the dictionary part:\nwith open('fruits.txt','r') as data_file:\n    line = data_file.readline()\n    while line != '':\n        fruit = line.strip()           # Remove whitespace on either side\n\n        if fruit in counters.keys():\n            # If we've seen the fruit before, increment.\n            counters[fruit] += 1\n        else:\n            # If this is the first time, set the counter to 1\n         counters[fruit] = 1\n\n        line = data_file.readline()    # Get the next line\n\n\n\n\n\n\n\nExercise 1.7\n\n\n\nUse the knowledge gained from the above example to work on this exercise.\n\nYou should have downloaded the textAlice in Wonderland and saved it in the same folder as your code.\nIn my_stopwords2.py, write code that uses a dictionary to compute the relative occurrence of stopwords in alice.txt.\nFor alice.txt the output should look like this (not necessarily in the same order) using the string formatting from the previous section.\nSubmit your program my_stopwords2.py"
  },
  {
    "objectID": "python_primer/unit2/modules/module1.html#multiple-files",
    "href": "python_primer/unit2/modules/module1.html#multiple-files",
    "title": "Module 1: Tuples, Sets, Dictionaries",
    "section": "1.4 Multiple files",
    "text": "1.4 Multiple files\nLarge Python applications consists of tens of thousands of lines of code.\nMost such applications actually consist of hundreds of Python programs bundled together and where one program can call functions in another.\nWe’ve already seen examples with the use of drawtool and wordtool.\n\n\n\n\n\n\nNote\n\n\n\nWhy are applications broken into multiple files?\n\nOne large file is unwieldy to understand and work with in an editor (imagine the scrolling difficult with a thousand lines).\nIt’s much easier to separate out functionality and test each piece. Robustly tested programs can be left alone while refining those that need work.\nSeparated functionality is useful in other projects.\nIf one piece needs upgrading, you can upgrade just that part if it’s in a separate file.\n\n\n\nLet’s build a simple example that we will be using toward submitting the Exercise 1.9:\n\nSuppose we put together a file called my_math_functions.py which has the following code:\nimport math\n\npi = 3.141\n\ndef square(x):\n    return x*x\n\ndef cube(x):\n    return x*x*x\n\ndef distance(x1, y1, x2, y2):\n    # Write your code here\nThen in an another file called my_math_application.py you could write the following code:\nimport my_math_functions as m\n\nx = 2\ny = m.square(5)\nprint(y)\n\nx2 = 3\ny2 = m.cube(x2)\nprint(y2)\n\nd = m.distance(x,y, x2, y2)\nprint(d)\nNotice the import statement at the top of the file as shown below:\nimport my_math_functions as m\nThis has the import keyword, the name of the other file, and a shortcut.\nTo access something from another file, we use the dot (period):\ny = m.square(5)\nOne can access a variable in the other file as well.\nprint(m.pi)\n\n\n\n\n\n\n\nNote\n\n\n\n\nIf we did not have the shortcut, we’d have to write code like the one shown below:\nimport my_math_functions \n\nx = 2\ny = my_math_functions.square(5)\nprint(y)\nThe above code is perfectly legit but a bit tedious.\n\n\n\n\n\n\n\n\n\nExercise 1.9\n\n\n\n\nComplete the code for the function distance() and write the above two programs (viz., my_math_functions.pyand my_math_application.py. These program were discussed earlier in this section. The output of the program my_math_application.py that imports my_math_functions.py should look like the following:\n\n25\n27\n2.23606797749979\n\nSubmit the following programs to complete this exercise:\n\n\nmy_math_functions.py\nmy_math_application.py"
  },
  {
    "objectID": "python_primer/unit2/modules/module1.html#string-formatting-and-numbers",
    "href": "python_primer/unit2/modules/module1.html#string-formatting-and-numbers",
    "title": "Module 1: Tuples, Sets, Dictionaries",
    "section": "1.5 String formatting and numbers",
    "text": "1.5 String formatting and numbers\nConsider this program:\nx = 0\nfor i in range(5):\n    print('i=', i, 'x=', x)\n    x += 0.1\n\n\n\n\n\n\nExercise 1.10\n\n\n\n\nType up the above program in my_format.py.\nSubmit your programmy_format.py.\n\n\n\nYou observed output that looks like what is shown below:\ni= 0 x= 0\ni= 1 x= 0.1\ni= 2 x= 0.2\ni= 3 x= 0.30000000000000004\ni= 4 x= 0.4\n\n\n\n\n\n\nNote\n\n\n\nWhy the ugly output?\n\nThere are really three questions here, the second of which is a bit subtle.\nThe first one is: why doesn’t Python see that most of the other values are bring printed nice, so why not print 0.3 instead of 0.30000000000000004?\nThe second, more sutble one, is: our for-loop clearly wants to increment by 0.1, which means x should be 0.3 and not 0.30000000000000004.\nThe third implied question is: how do we actually limit the number of digits printed after the decimal?\n\n\n\nLet’s answer these questions:\n\nWhy doesn’t Python recognize unnecessary digits?\n\nThis is because Python does not want to second guess the programmer’s intent.\nMaybe you do want the digits.\n\nHow did 0.3 become 0.30000000000000004?\n\nA computer’s memory has two kinds of limitations, and one “feature”.\n\nIt cannot store beyond a certain accuracy (and computers differ based on their hardware).\nWhen calculations are performed, this storage limitation forces some arithmetic to be slightly wrong (many digits after the decimal point).\n\nThe “feature” is that computers store binary numbers, not our kind of decimal numbers. This means a decimal version of a binary number might have to be an approximation.\n\nOK, how do we actually print nicely?\n\nThis is a bit of an advanced topic, so we’ll only provide a simple example.\nThe solution is to use a special set of formatting commands, like the ones you saw a long time ago (remember ?)\n\n\nHere’s how it works for the above program:\nx = 0\nfor i in range(5):\n    format_string = 'i = {0:2d}  x = {1:.2f}'\n    string_to_print = format_string.format(i, x)\n    print(string_to_print)\n    x += 0.1\nLet’s explain:\n\nA format string is the eventual desired string that needs to be printed but with some placeholders:\nformat_string = 'i = {0:2d}  x = {1:.2f}'\nIn this case, there are two placeholders:\nformat_string = 'i = {0:2d}  x = {1:.2f}'\nPlaceholders are enclosed in curly brackets.\nEach placeholder begins with a number that will eventually determine which variable gets its value into the placeholder.\nSo, here we have variables 0 and 1:\nformat_string = 'i = {0:2d}  x = {1:.2f}'\nWe feed the values via the format() function:\nformat_string = 'i = {0:2d}  x = {1:.2f}'\nstring_to_print = format_string.format(i, x)\nThis is what lets format() put the value of i in place of the “0” and the value of x in place of the “1”.\nAll that’s left to explain are the cryptic commands that follow the “0” and “1” respectively:\nformat_string = 'i = {0:2d}  x = {1:.2f}'\n\nThe first one says, in effect, “use a minimum of 2 spaces and expect an integer”.\nThe second says “expect a float and restrict the number of post-decimal digits to 2”.\n\n\nString formatting has more to it, but that’s all we’ll say about it here."
  },
  {
    "objectID": "python_primer/unit2/modules/module1.html#randomness",
    "href": "python_primer/unit2/modules/module1.html#randomness",
    "title": "Module 1: Tuples, Sets, Dictionaries",
    "section": "1.6 Randomness",
    "text": "1.6 Randomness\nAs we’ve seen throughout the course, it is useful to be able to have Python generate random numbers:\n\nWe use random numbers to answer statistical questions.\nRandom numbers were also useful in creating patterns, as in art.\n\nHowever, there’s an important thing to know about random generation.\nConsider this program:\nimport random\n\n#random.seed(123)\n\nfor i in range(5):\n    x = random.uniform(1.0, 10.0)\n    print(x)\n\n\n\n\n\n\nExercise 1.11\n\n\n\n\nType up the above my_random_example.py.\nRun it multiple times and observe the output.\nNext, un-comment the following line and run it again multiple times:\n\n#random.seed(123)\n\nThen, change the number 123 in the seed to any number between 1 and 1000, and once more run the program many times.\nSubmit your program my_random_example.py by including random.seed(123) to complete this assignment.\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nHow random generation works\n\nPython uses a mathematical function with a so-called “seed” to produce random numbers.\nThe numbers aren’t really random, because a particular seed will produce the same numbers, which is why they’re called pseudorandom numbers.\nHowever, if we’re doing things like computing averages, a pseudorandom sequence, provided it’s long enough, is a reasonably good approximation.\nIs there ever a reason to fix a seed?\n\nTurns out, yes. It’s very useful for debugging.\nUsing a seed causes your program to be repeatable (with the same pseudorandom sequence).\nSo, typically, one uses a seed when getting your program to work.\nAfter it’s working, you can comment out the seed.\n\nIf a seed is not provided, Python uses the local time or something like that as the seed, so that repeated runs produce different results."
  },
  {
    "objectID": "python_primer/unit2/modules/module2.html",
    "href": "python_primer/unit2/modules/module2.html",
    "title": "Module 2: Next Steps in Python",
    "section": "",
    "text": "This is a somewhat light module aimed at introducing a new member of the family: datatool\n\nWe’ve already worked with drawtool and wordtool.\nDrawtool is based on a popular Python graphing package called Matplotlib:\n\nMatplotlib is a powerful package for all kinds of plotting.\nHowever, it can be difficult to understand how to use effectively.\nTo simplify, we developed drawtool so that you can perform both plotting and simple drawing.\n\nPlotly is a recent competitor of Matplotlib:\n\nPlotly is designed to be web-friendly, to let Python programs have output that renders in a browser, so that websites can display nice graphics.\nPlotly has stronger support for maps (as in geographic maps) than Matplotlib.\nHowever, just like Matplotlib, it can be difficult to use, especially since there are two fundamentally different kinds of maps.\n\nPandas is perhaps the most popular Python package aimed at data handling and data science applications. It too takes a while to learn.\nThus, to simplify, we have developed datatool, to make it easy to do typical things like plotting graphs but also to work with data files, and especially, maps.\n\n\n\n\n\n\n\nNote\n\n\n\nDatatool does not display via its own GUI. Instead, datatool uses a browser, depending on whether you are using Mac or Windows:\n\nMac/Linux: If you don’t have Firefox, you will need to install Firefox and have that running (open a tab to any webpage).\nWindows: Your default browser will do.\n\n\n\n\nAlso, you will need to be connected (online) because datatool downloads map data from certain websites."
  },
  {
    "objectID": "python_primer/unit2/modules/module2.html#objectives",
    "href": "python_primer/unit2/modules/module2.html#objectives",
    "title": "Module 2: Next Steps in Python",
    "section": "",
    "text": "This is a somewhat light module aimed at introducing a new member of the family: datatool\n\nWe’ve already worked with drawtool and wordtool.\nDrawtool is based on a popular Python graphing package called Matplotlib:\n\nMatplotlib is a powerful package for all kinds of plotting.\nHowever, it can be difficult to understand how to use effectively.\nTo simplify, we developed drawtool so that you can perform both plotting and simple drawing.\n\nPlotly is a recent competitor of Matplotlib:\n\nPlotly is designed to be web-friendly, to let Python programs have output that renders in a browser, so that websites can display nice graphics.\nPlotly has stronger support for maps (as in geographic maps) than Matplotlib.\nHowever, just like Matplotlib, it can be difficult to use, especially since there are two fundamentally different kinds of maps.\n\nPandas is perhaps the most popular Python package aimed at data handling and data science applications. It too takes a while to learn.\nThus, to simplify, we have developed datatool, to make it easy to do typical things like plotting graphs but also to work with data files, and especially, maps.\n\n\n\n\n\n\n\nNote\n\n\n\nDatatool does not display via its own GUI. Instead, datatool uses a browser, depending on whether you are using Mac or Windows:\n\nMac/Linux: If you don’t have Firefox, you will need to install Firefox and have that running (open a tab to any webpage).\nWindows: Your default browser will do.\n\n\n\n\nAlso, you will need to be connected (online) because datatool downloads map data from certain websites."
  },
  {
    "objectID": "python_primer/unit2/modules/module2.html#getting-set-up-for-datatool",
    "href": "python_primer/unit2/modules/module2.html#getting-set-up-for-datatool",
    "title": "Module 2: Next Steps in Python",
    "section": "2.0 Getting set up for datatool",
    "text": "2.0 Getting set up for datatool\nIf you’ve downloaded Anaconda as directed earlier in the course, you should already have Pandas and Plotly installed.\nLet’s give this a test.\n\n\n\n\n\n\nNote\n\n\n\nTo use datatool, you must follow the separate instructions for Mac and Windows:\n\nMac users: you need to have Firefox running and open to any page, such as this one.\nWindows users: Your default browser will do.\n\n\n\n\n\n\n\n\n\nExercise 2.1\n\n\n\nDownload datatool.py, simpledata.csv, and line_graph_example.py, and then run the latter. This should automatically open a new tab in Firefox showing this figure: \nIf this did NOT work, then you will need to install Pandas and Plotly via Anaconda and use Spyder (instead of Thonny).\n\n\n\n\n\n\n\n\nTip\n\n\n\nYou also need to be connected because datatool downloads some map-drawing files from designated websites."
  },
  {
    "objectID": "python_primer/unit2/modules/module2.html#csv-data",
    "href": "python_primer/unit2/modules/module2.html#csv-data",
    "title": "Module 2: Next Steps in Python",
    "section": "2.1 CSV data",
    "text": "2.1 CSV data\nWhen hearing buzzwords like “data science” or “data analytics”, one is led to ask: exactly what is meant by data, and what form does it take on computers?\nWe need to be aware of two such forms:\n\nOne is the form it takes as a file.\nThe other is: how do we store it in our Python code?\n\nHere are some basic types of data files:\n\nText data. This is just plain text but can be found (and stored) as files of different kinds: Word files, plain text files (as we’ve seen with our text examples), and webpages (which contain text).\n\nExample: see this file\nHere, the data is in plain text format, which means we can use something like wordtool to iterate through words, letters etc.\nOnce we’ve read the words in the file, our program could store the words in a list.\n\nNumeric-only data. This kind of data is often presented in plain text files:\n\nExample: see this file, which has pressure-difference readings from two weather stations in the Pacific (it’s called the Southern Oscillation, used to predict El-Nino).\nThere’s one reading for each month, a list of 12 numbers.\nNumbers are often stored in arrays inside a program.\n\nImage data. Images are stored in various formats such as JPG or PNG.\n\nExample: see this JPG file.\nAs we’ve seen, a color image is stored as 3D array in a program.\n\n\nCSV files for mixed data:\n\nMost real world data sets combine different data together.\nFor example, even in purely numeric data (such as the weather data example above), we might have multiple “columns” of data as in:\nOscillation  Year          Year       Month\n----------------------------------------------\n-0.7         1955        1955         1\n1.3         1955        1955         2\n0.1         1955        1955         3\n-0.9         1955        1955         4\n0.8         1955        1955         5\n1.6         1955        1955         6\n1.7         1955        1955         7\n1.4         1955        1955         8\n1.4         1955        1955         9\n1.5         1955        1955        10\n1.4         1955        1955        11\n0.9         1955        1955        12\nBut even more commonly, numeric and text data are often found together, as in:\n    city      lat      long       country iso2 iso3  population\n   Tokyo  35.6897  139.6922         Japan   JP  JPN    37977000\n Jakarta  -6.2146  106.8451     Indonesia   ID  IDN    34540000\n   Delhi  28.6600   77.2300         India   IN  IND    29617000\n  Mumbai  18.9667   72.8333         India   IN  IND    23355000\n  Manila  14.5958  120.9772   Philippines   PH  PHL    23088000\nShanghai  31.1667  121.4667         China   CN  CHN    22120000\nSao Paulo -23.5504  -46.6339        Brazil   BR  BRA    22046000\n   Seoul  37.5833  127.0000  Korea, South   KR  KOR    21794000\nMexico City  19.4333  -99.1333        Mexico   MX  MEX    20996000\nGuangzhou  23.1288  113.2590         China   CN  CHN    20902000\nThis type of table-like format is possibly the most common type of data.\nWhile one could store this in a plain text file as in this example, it is much more convenient to use the CSV format.\nThe same data in CSV format looks like this:\ncity,lat,long,country,iso2,iso3,population\nTokyo,35.6897,139.6922,Japan,JP,JPN,37977000\nJakarta,-6.2146,106.8451,Indonesia,ID,IDN,34540000\nDelhi,28.66,77.23,India,IN,IND,29617000\nMumbai,18.9667,72.8333,India,IN,IND,23355000\nManila,14.5958,120.9772,Philippines,PH,PHL,23088000\nShanghai,31.1667,121.4667,China,CN,CHN,22120000\nSao Paulo,-23.5504,-46.6339,Brazil,BR,BRA,22046000\nSeoul,37.5833,127.0,\"Korea, South\",KR,KOR,21794000\nMexico City,19.4333,-99.1333,Mexico,MX,MEX,20996000\nGuangzhou,23.1288,113.259,China,CN,CHN,20902000\n\nWhitespace is removed\nCommas are used to separate data.\n\n\nFor the above example, this is the CSV file, which you can store and open in Excel or Google-sheets.\n\nYou can see why CSV stands for “Comma Separated Values”.\n\nNext, let’s write some code to work with CSV files.\nfrom datatool import datatool\n\ndt = datatool()\ndt.load_csv('cities.csv')\ndt.print_data()\n\n\n\n\n\n\nExercise 2.2\n\n\n\nFirst, download cities.csv. Then, type up the above in my_data_example.py and confirm that you see the same data printed out. You will notice an additional “row number” column as the first column.\n\n\nIt is often convenient CSV data into an array, as in this example:\nfrom datatool import datatool\n\ndt = datatool()\ndt.load_csv('cities.csv')\n\nD = dt.get_data_as_array()\nprint(D)\n\n\n\n\n\n\nExercise 2.3\n\n\n\nIn my_data_example2.py, add code to print the average city population using these 10 cities. You should get 25643500.00 (larger than the third most populous U.S. state)."
  },
  {
    "objectID": "python_primer/unit2/modules/module2.html#using-datatool-for-plotting",
    "href": "python_primer/unit2/modules/module2.html#using-datatool-for-plotting",
    "title": "Module 2: Next Steps in Python",
    "section": "2.2 Using datatool for plotting",
    "text": "2.2 Using datatool for plotting\nOften, one of the first things we do with data is to plot the data, or at least parts of it.\nWith datatool, that is as simple as this:\nfrom datatool import datatool\n\ndt = datatool()\ndt.load_csv('simpledata.csv')\n\n# A basic line graph. 'X' and 'Y' are the column headers.\ndt.line_graph('Y', 'X')\n\ndt.display()\nLet’s examine the data:\n\nThe CSV file looks like this:\nX,Y\n1,1\n2,2\n3,3\n4,5\n5,8\n6,13\n7,21\n8,34\n9,55\n10,89\nThis is merely a list of points with x,y coordinates.\n\n\n\n\n\n\n\nExercise 2.4\n\n\n\nIn my_plot_example.py, plot ‘X’ against ‘Y’ to get \n\n\n\n\n\n\n\n\nTip\n\n\n\nMac Users: Don’t forget to have Firefox running before you run the program.\n\n\nOne can plot categorical (non-numeric) data as well:\nfrom datatool import datatool\n\ndt = datatool()\ndt.load_csv('cities.csv')\n\ndt.line_graph('city', 'population')\n\ndt.display()\n\n\n\n\n\n\nExercise 2.5\n\n\n\nType up the above in my_plot_example2.py to observe a decidedly nonlinear relationship between city rank and population.\n\n\nIt is possible to depict multiple curves on one plot:\n\nConsider this data set: simpledata2.csv,\nX,Y,Z,W\n1,1,89,88\n2,2,55,53\n3,3,34,31\n4,5,21,16\n5,8,13,5\n6,13,8,5\n7,21,5,16\n8,34,3,31\n9,55,2,53\n10,89,1,88\nHere, there are four columns.\nWe will plot the 2nd, 3rd, and 4th columns against the 1st:\nfrom datatool import datatool\n\ndt = datatool()\n\ndt.load_csv('simpledata2.csv')\n\n# Note: how to place a title on a graph:\ndt.set_title('X vs Y, W, Z')\n\ndt.line_graph('X', 'Y')\ndt.line_graph('X', 'Z')\ndt.line_graph('X', 'W')\n\ndt.display()\n\n\n\n\n\n\n\nTip\n\n\n\nWhen Plotly (via datatool) displays in the browser, there are additional controls included, such as zoom in/out: \n\n\nNext, let’s use datatool to plot a bar chart:\nfrom datatool import datatool\n\ndt = datatool()\n\ndt.load_csv('simpledata2.csv')\n\ndt.bar_chart('X', 'Y')\ndt.bar_chart('X', 'Z')\n\ndt.display()\nWhich produces \n\n\n\n\n\n\nExercise 2.6\n\n\n\nIn my_plot_example2.py, use the cities.csv data to plot a bar chart of city populations as in \n\n\nNext up: bubble charts\nfrom datatool import datatool\n\ndt = datatool()\n\ndt.load_csv('simpledata2.csv')\n\ndt.bubble_chart('X', 'Y', bubblesize='Y')\n\ndt.display()\nWhich produces \n\n\n\n\n\n\nNote\n\n\n\n\nWe need to tell datatool which column to use for the size of the bubbles.\nIt is possible to use one column for the center of each bubble (as if plotting points) and another for bubble sizes.\n\n\n\n\n\n\n\n\n\nExercise 2.7\n\n\n\nIn my_plot_example4.py, use the cities.csv dataset to plot a bubble chart of city populations as in:"
  },
  {
    "objectID": "python_primer/unit2/modules/module2.html#using-datatool-for-drawing",
    "href": "python_primer/unit2/modules/module2.html#using-datatool-for-drawing",
    "title": "Module 2: Next Steps in Python",
    "section": "2.3 Using datatool for drawing",
    "text": "2.3 Using datatool for drawing\nDatatool as drawing functions similar to drawtool:\nfrom datatool import datatool\n\ndt = datatool()\n\n# Set the range along each axis:\ndt.set_x_range(0, 10)\ndt.set_y_range(0, 10) \n\n# Set line width:\ndt.set_draw_width(2)\n\n# Draw some lines and shapes\ndt.set_draw_color('blue')\ndt.draw_line(2,3, 8,9)\ndt.set_draw_color('green')\ndt.draw_rectangle(7,2, 3,4)\ndt.draw_ellipse(7,2, 3,4)\ndt.set_draw_color('red')\ndt.draw_arrow(3,8, 5,7, 5, 2)\n\n# Draw text \ndt.draw_text(8.5, 4, 'Bullseye')\n\ndt.display()\nWhich produces"
  },
  {
    "objectID": "python_primer/unit2/modules/module2.html#using-datatool-with-generated-data",
    "href": "python_primer/unit2/modules/module2.html#using-datatool-with-generated-data",
    "title": "Module 2: Next Steps in Python",
    "section": "2.4 Using datatool with generated data",
    "text": "2.4 Using datatool with generated data\nIn some situations, we end up generating data with our code. This means the data is not in some CSV file.\nFor example, suppose we want to plot the numbers 0 through 10 and their squares using:\nfor i in range(11):\n    x = i\n    y = x * x        # The square of x\n\n# We'd like to plot these x,y values as points in a graph\nThere are two options:\n\nCreate a CSV from the above program, and then load that into datatool.\nAvoid creating a file and directly feed the data into datatool.\n\nLet’s use the latter approach since it avoids having to create a file.\nfrom datatool import datatool\nimport numpy as np\n\ndt = datatool()\n\n# Make an empty array with zeroes (dtype='f' means float numbers)\n# Other kinds are 'int'\nA = np.zeros( (11, 2), dtype='f')\n\n# Now fill the array with generated data:\nfor i in range(11):\n    x = i\n    y = x * x\n    A[i,0] = x     # First col has x\n    A[i,1] = y     # Second has y\n\n# We now want to plot the second column in A against the first\n\n# Hand the array over to datatool, specifying column names:\ndt.set_data_from_array(A, col_headers=['X','Y'])\n\ndt.line_graph('X', 'Y')\n\ndt.display()\nWhich produces \n\n\n\n\n\n\nNote\n\n\n\n\nNotice how we ask Numpy to create an array of the right size:\nA = np.zeros( &lt;b&gt;(11, 2)&lt;/b&gt;, dtype='f')\nThat is, 11 rows for the numbers 0 through 10 and 2 columns for the x,y values.\nNotice that (11, 2) is specified as a tuple. (Recall tuples from Module 1 of this unit.)\nThe array A now has 11 rows and 2 columns, with each entry set to 0.\nAfter that, we fill in the values we generate:\nfor i in range(11):\n    x = i\n    y = x * x\n    A[i,0] = x  \n    A[i,1] = y  \nWhich we could shorten to:\nA[i,0] = i  \nA[i,1] = i * i  \nThe CSV equivalent (which we don’t need here) would look like this:\n0,0\n1,1\n2,4\n3,9\n4,16\n5,25\n6,36\n7,49\n8,64\n9,81\n10,100"
  },
  {
    "objectID": "python_primer/unit2/modules/module2.html#using-datatool-for-maps",
    "href": "python_primer/unit2/modules/module2.html#using-datatool-for-maps",
    "title": "Module 2: Next Steps in Python",
    "section": "2.5 Using datatool for maps",
    "text": "2.5 Using datatool for maps\nOne of the more exciting uses of Plotly is to display maps and draw on them.\nLet’s think about what a map really is:\n\nWhereas a standard 2D plot depicts an x-axis and a y-axis, a map could be a region of the globe or the whole globe forced into 2D depiction (sometimes awkwardly).\nThe coordinate system uses angles called latitudes and longitudes.\n\nThere are fundamentally two types of digital maps:\n\nA vector map or line map is a collection of lines and other such geometric entities which, if drawn like lines typically are, will show a map.\n\nA vector map is most often a very basic map with simple lines for boundaries.\nVector maps are efficient because it doesn’t take much storage space to store lines (you only need the coordinates of the end points of each line).\n\nA tile map is really a collection of tiles put together to form a map:\n\nAn individual tile can itself be an image (as in a ‘satellite view’) or a combination of image and geometric objects.\nTilemaps generally look nicer because tiles can be pre-built with accurate and rich detail.\nHowever, detailed tiles can be slow to load, as you’ve no doubt notice when zooming quickly with Google-maps.\n\n\nBecause of these and other differences, map drawing can sometimes be confusing.\nLet’s look at an example of a simple line-map:\nfrom datatool import datatool\n\ndt = datatool()\n\ndt.load_csv('cities.csv')\n\n# We need to specify which columns of cities.csv have\n# the latitude and longitude, respectively.\ndt.linemap('lat', 'long')\n\ndt.display()\n\n\n\n\n\n\nExercise 2.8\n\n\n\nYou already have cities.csv. Type up the above in my_linemap_example.py and confirm that you see \n\n\n\n\n\n\n\n\nNote\n\n\n\n\nYou need to be connected to the internet because datatool downloads map data from certain websites.\nYou may see an “Aa” legend by the side, depending on which version of Plotly was installed by Anaconda.\nThe CSV file looks like this;\ncity,lat,long,country,iso2,iso3,population\nTokyo,35.6897,139.6922,Japan,JP,JPN,37977000\nJakarta,-6.2146,106.8451,Indonesia,ID,IDN,34540000\nDelhi,28.66,77.23,India,IN,IND,29617000\nMumbai,18.9667,72.8333,India,IN,IND,23355000\nManila,14.5958,120.9772,Philippines,PH,PHL,23088000\nShanghai,31.1667,121.4667,China,CN,CHN,22120000\nSao Paulo,-23.5504,-46.6339,Brazil,BR,BRA,22046000\nSeoul,37.5833,127.0,\"Korea, South\",KR,KOR,21794000\nMexico City,19.4333,-99.1333,Mexico,MX,MEX,20996000\nGuangzhou,23.1288,113.259,China,CN,CHN,20902000\nThe columns that have the latitude and longitude happen to be called lat and long.\nWhich is what we need to tell datatool:\ndt.linemap(&lt;b&gt;'lat', 'long'&lt;/b&gt;)\nDatatool then (via Plotly) draws a world map as default with one red dot per latitude-longitude pair extracted from those columns.\n\n\n\nNext, let’s label the cities and draw a line:\nfrom datatool import datatool\n\ndt = datatool()\n\ndt.load_csv('cities.csv')\n\ndt.linemap('lat', 'long', 'city')\n\n# This needs to come &lt;b&gt;after&lt;/b&gt; the linemap() function call.\ndt.linemap_add_line(-23.5504,-46.6339, 19.4333,-99.1333)\n\ndt.display()\n\n\n\n\n\n\nExercise 2.9\n\n\n\nType up the above in my_linemap_example2.pyand confirm that you see \n\n\n\n\n\n\n\n\nNote\n\n\n\nThe city labels are crowded and overwrite each other in places. In general, map labeling is a challenging issue.\n\n\nThere is a more detailed version of linemap drawing that allows one to set the size of labels (markers), create “hover” text, and so on:\ndt.linemap_detailed(\n    'lat', \n    'long', \n    marker_color='Red', \n    marker_size=10, \n    marker_text='city', \n    marker_text_size=9, \n    hovertext=['city', 'population'], \n    showlegend=False)"
  },
  {
    "objectID": "python_primer/unit2/modules/module2.html#choropleth-maps",
    "href": "python_primer/unit2/modules/module2.html#choropleth-maps",
    "title": "Module 2: Next Steps in Python",
    "section": "2.6 Choropleth maps",
    "text": "2.6 Choropleth maps\nA choropleth map shows regions in colors that imply a quantity associated with a region.\nDatatool displays choropleths using linemaps.\nFor example, let’s show country populations from our running example in a choropleth map:\nfrom datatool import datatool\n\ndt = datatool()\n\ndt.load_csv('2011_population.csv')\n\n# Changes the colorscale of the choropleth_iso3()\ndt.set_color_scale('rainbow')\n# More choices here: https://plotly.com/python/builtin-colorscales/\n\n# The choropleth_iso3() function uses a standard code for countries.\n# The second parameter describes which column to use for heat-map\n# like coloring. The third is what to show when the mouse hovers.\ndt.choropleth_iso3('countrycode', 'pop', 'country')\n\ndt.display()\nWhich produces:"
  },
  {
    "objectID": "python_primer/unit2/modules/module2.html#using-datatool-for-maps-tilemaps",
    "href": "python_primer/unit2/modules/module2.html#using-datatool-for-maps-tilemaps",
    "title": "Module 2: Next Steps in Python",
    "section": "2.7 Using datatool for maps: tilemaps",
    "text": "2.7 Using datatool for maps: tilemaps\nLet’s look at our 10 cities using a tilemap:\nfrom datatool import datatool\n\ndt = datatool()\n\ndt.load_csv('cities.csv')\n\n# The first two identify the lat/long columns. The third\n# is the column with the data to be drawn.\ndt.tilemap_attach_col_lat_long('lat', 'long', 'city')\n\ndt.tilemap()\n\ndt.display()\n\n\n\n\n\n\nNote\n\n\n\n\nFor tilemaps, we first need to identify the columns that have the latitudes and longitudes, along with the “data” column.\nThe data column has the strings that we want shown at those latitudes and longitudes.\n\n\n\n\n\n\n\n\n\nExercise 2.10\n\n\n\nType up the above in my_tilemap_example.py and confirm that you see \n\n\nNow let’s draw a line between two cities:\nfrom datatool import datatool\n\ndt = datatool()\n\ndt.load_csv('cities.csv')\n\ndt.tilemap_attach_col_lat_long('lat', 'long', 'city')\n\n# For tilemaps, line drawing must &lt;b&gt;precede&lt;/b&gt; the call to tilemap.\ndt.tilemap_add_line(-23.5504,-46.6339, 19.4333,-99.1333)\n\ndt.tilemap()\n\ndt.display()\n\n\n\n\n\n\nExercise 2.11\n\n\n\nType up the above in my_tilemap_example2.py and confirm that you see \n\n\nThe above shows the full world map centered at latitude 0, longitude 0.\nA more detailed version of the tilemap function allows you to set the zoom and center, among other items:\ndt.tilemap_attach_col_lat_long('lat', 'long', 'city')\n\n# Define a different center:\nc = dict(lat = 30, lon = 120)\n\n# The detailed version specifies hover data, the center, a zoom level\ndt.tilemap_detailed(hover_name='city', hover_data=['city'], center=c, zoom=2, title='Some cities')\nThere is also an intermediate-detail version with just center, zoom and title:\ndt.tilemap_attach_col_lat_long('lat', 'long', 'city')\n\nc = dict(lat = 30, lon = 120)\n\n# Intermediate-detail: center, zoom, title:\ndt.tilemap_czt(center=c, zoom=2, title='Some cities')\nFinally, let’s look at an example with street maps, where tilemaps really stand out:\nfrom datatool import datatool\n\ndt = datatool()\n\ndt.load_csv('parkingtickets_June2020.csv')\n\ndt.tilemap_attach_col_lat_long('LATITUDE', 'LONGITUDE', 'FINE_AMOUNT')\n\n# DC's lat/long:\ndc_latlong = dict(lat = 38.92, lon = -77.07)\n\ndt.tilemap_detailed(\n    hover_name='LOCATION', \n    hover_data=['VIOLATION_PROC_DESC'],\n    center=dc_latlong, \n    zoom=11, \n    title='DC Parking Violations June 2020')\n\ndt.display()\n\n\n\n\n\n\nExercise 2.12\n\n\n\nDownload parkingtickets_June2020.csv and type up the above in my_tilemap_example3.py Run and confirm that you see:"
  },
  {
    "objectID": "python_primer/unit2/modules/module2.html#whats-next-for-you-in-computing",
    "href": "python_primer/unit2/modules/module2.html#whats-next-for-you-in-computing",
    "title": "Module 2: Next Steps in Python",
    "section": "2.8 What’s next for you in Computing?",
    "text": "2.8 What’s next for you in Computing?\nprint('Congratulations!')\nYes, we’ll say that again: Congratulations!\n\nYou have come a long way from the first day. Most likely you had not written much code before, but now have hundreds of exercises behind you.\nYou have also experienced skill development over time, which requires patience, willingness to persist, and lots of practice.  Most importantly: you’ve seen that it’s do-able and that it does NOT require any pre-determined aptitude.\nYou’ve also, hopefully, experienced the joy of programming: figuring something out and that special pleasure of getting a program to work.\nAnd you’ve gotten a glimpse of how powerful computational tools can be in any discipline.\n\nWhat you could do next:\n\nEarlier in the webpage on advising, we explained how you can take your computing skills further. This page includes guidelines for:\n\nTransferring or adding CS as a major.\nDoing a minor in CS.\nCS courses available online in the summer.\n\nThrough the survey we discovered that many of you have no room in your schedule for additional computing during your degree program. If you nonetheless have developed a taste for programming and want to be the “programming/software” person in your domain, we have a post-graduation option for you:\n\nA fully online and asynchronous Gateway-to-CS certificate focused on programming skills (including web development) that you can take at your own pace.\nAn online Master’s in Applied Computer Science, if you want to go further.\n\n\nNeither program needs any background, and neither features any math at all. Both are focused on practical skills for the workplace.\nprint('The future awaits you')"
  },
  {
    "objectID": "python_primer/functions.html",
    "href": "python_primer/functions.html",
    "title": "Functions",
    "section": "",
    "text": "Note\n\n\n\nReferencing the content on this webpage:\nBulusu, Kartik V. (2025, January). MAE 6291: Internet-of-Things for Engineers. [Course lecture notes, codes and presentations]. Department of Mechanical and Aerospace Engineering, The George Washington University.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTopic(s)\n\n\nDescription\n\n\nSlide deck(s)\n\n\n\n\n\n\n\nFunctions: A first look\n\n\ndesc here\n\n\nModule 2 \n\n\n\n\nFunctions\n\n\ndesc here\n\n\nModule 2"
  },
  {
    "objectID": "python_primer/unit1/modules/module4.html",
    "href": "python_primer/unit1/modules/module4.html",
    "title": "Module 4: while loops, I/O",
    "section": "",
    "text": "By the end of this module you will be able to:\n\nWork through examples of indefinite loops.\nWrite while-loop versions of for-loops.\nWork through examples of using the break statement.\nWrite code to read and write to text files."
  },
  {
    "objectID": "python_primer/unit1/modules/module4.html#objectives",
    "href": "python_primer/unit1/modules/module4.html#objectives",
    "title": "Module 4: while loops, I/O",
    "section": "",
    "text": "By the end of this module you will be able to:\n\nWork through examples of indefinite loops.\nWrite while-loop versions of for-loops.\nWork through examples of using the break statement.\nWrite code to read and write to text files."
  },
  {
    "objectID": "python_primer/unit1/modules/module4.html#while-loops-an-example",
    "href": "python_primer/unit1/modules/module4.html#while-loops-an-example",
    "title": "Module 4: while loops, I/O",
    "section": "4.0 while loops: An example",
    "text": "4.0 while loops: An example\nThe numbers 1, 4, 9, 16, 25, and so on are squares, with the next one being 36 (which is 62).\nSuppose our goal is to identify the largest square that’s less than 1000.\nWe’ll first show how this can be solved with a new kind of loop: the while-loop, and then try the same problem with a for-loop.\nThe program:\nk = 1\nwhile k*k &lt; 1000:\n    k = k + 1\n\n# Reduce by 1 because now k*k &gt; 1000\nk = k - 1\n\nprint('largest square &lt; 1000:', k*k, '= square of', k)\n\n\n\n\n\n\nExercise 4.1\n\n\n\nType up the above in my_while_example.py.\nSubmit your progam my_while_example.py.\n\n\nHow does a while-loop work?\n\nThe essential idea is: a while-loop keeps iterating until its condition evaluates to False.\nLet’s examine the structure: \nIn our example, the condition was:\nwhile k*k &lt; 1000:\nThus, as long as the value of k is such that k*k is less than 1000, execution enters and stays inside the loop.\nNotice that k is incremented (or changed) inside the loop:\nwhile k*k &lt; 1000:\n    k = k + 1\nThus, eventually kwill get large enough so that k*k will be larger than 1000.\nWhen k is 32, in fact, 32*32 = 1024, which will cause the condition k*k &lt; 1000to evaluate to False.\nAt this moment, execution exits the loop to the whatever code follows: \n\nLet’s now examine a simpler while-loop:\nk = 1\nwhile k &lt; 6:\n  print(k)\n  k = k + 1\n\n\n\n\n\n\nExercise 4.2\n\n\n\nConfirm by typing up the above in my_while_example2.py.\n\nSubmit your program my_while_example2.py.\nAnswering the following part of the exercise is recommended but not required for submission:\n\nTrace the execution of each iteration and develop your understanding of how the while-loop is executed.\n\n\n\n\n\n\n\n\n\n\nExercise 4.3\n\n\n\nConsider the following while-loop:\nk = 7\nwhile k &lt; 6:\n  print(k)\n  k = k + 1\n\nType up the above in my_while_example3.py.\nSubmit your program my_while_example3.py.\nAnswering the following part of the exercise is recommended but not required for submission:\n\nTrace the execution of each iteration and develop your understanding of how the while-loop is executed.\n\n\n\n\n\n\n\n\n\n\nExercise 4.4\n\n\n\nConsider this variation:\nk = 1\nwhile k &lt; 6:\n  print(k)\n\nType up the above in my_while_example4.py.\nWhen you execute this program, you may need to terminate the execution of the program by hand (by getting rid of the window itself).\nSubmit your program my_while_example4.py.\n\nAfter a minute, you may need to terminate the execution of the program by pressing the keys Control & C on your keyboard or closing the IDE completely.\n\nAnswering the following part of the exercise is recommended but not required for submission:\n\nTrace the execution of each iteration and develop your understanding of how the while-loop is executed.\n\n\n\n\nKeep in mind while you examine the example discussed below:\n\nA while-loop typically must feature some kind of initialization before the loop as shown below:\nk = 1\nwhile k &lt; 6:\n  print(k)\n  k = k + 1\nThe variable that’s involved in the condition should be changed inside the loop so that the condition eventually evaluates to False:\nk = 1\nwhile k &lt; 6:\n  print(k)\n  k = k + 1\nAnother important thing to remember: If you forget to change a variable like k inside the loop, the condition will never becomes False, which means the loop will iterate forever:\nk = 1\nwhile k &lt; 6:\n  print(k)\n  i = k + 1   # Error!\nIn the example discussed above\n\nThe incremented value k+1 does not get stored in k.\nWhich means k never gets large enough.\nTherefore k &lt; 6 will always be True.\nThus, we get an infinite loop (that iterates forever).\nIt’s alright, but probably not useful, if the condition never evaluates to True even once:\nk = 6\nwhile k &lt; 6:\n  print(k)\n  k = k + 1\nThe code still runs but the while-loop is not executed at all."
  },
  {
    "objectID": "python_primer/unit1/modules/module4.html#while-loops-an-example-with-floating-point-variables",
    "href": "python_primer/unit1/modules/module4.html#while-loops-an-example-with-floating-point-variables",
    "title": "Module 4: while loops, I/O",
    "section": "4.1 while loops: an example with floating point variables",
    "text": "4.1 while loops: an example with floating point variables\nConsider the following example:\nx = 0.5\ns = 0\nwhile s &lt;= 2:\n  s = s + x\n\nprint('s =', s)\n\n\n\n\n\n\nExercise 4.5\n\n\n\nTry to guess the output before confirming in my_while_example5.py.\n\nType up the above in my_while_example5.py.\nSubmit your program my_while_example5.py.\nAnswering the following part of the exercise is recommended but not required for submission:\n\nTrace the execution of each iteration and develop your understanding of how the while-loop is executed.\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\nThe value of x (which is 0.5) keeps getting added to s, as long as s is less or equal to 2.\nThus, the last value of s to keep going in the loop is when s = 2.\nAt this time, we stay for one more iteration, after which s becomes 2.5.\n\n\n\nLet’s look at a more illustrative version now:\nx = 0.5\ns = 0\nk = 0\nwhile s &lt;= 2:\n  s = s + x\n  k = k + 1\n\nprint('s =', s, 'k =', k)\nHere, we’ve added a counter variable to track each loop iteration.\n\n\n\n\n\n\nExercise 4.6\n\n\n\n\nType up the above in my_while_example6.py.\nSubmit your program my_while_example6.py.\nAnswering the following part of the exercise is recommended but not required for submission:\n\nTrace the execution of each iteration and develop your understanding of how the while-loop is executed.\n\n\n\n\nSo far it’s been straightforward. Let’s now solve a problem:\n\nRemember Zeno’s paradox?\nTo summarize one version, Zeno said (with a wry smile, probably):\n\nTo walk a mile, you’d have to first walk half the remaining distance (0.5 miles).\nThen, to get to the rest, you’d have to walk at least half of the remaining (0.25).\nThen, half of the remainder (0.125)\n… and so on.\nSo, the total distance would be an infinite sum: 0.5 + 0.25 + 0.125 + …\nWhich is infinite [he said]\n\nLet’s count how many successive halvings add up to, say, 0.9.\nExamine the code shown below:\nx = 1\ns = 0\nk = 0\nwhile s &lt; 0.9:\n  x = x / 2   # Halve x each time\n  s = s + x\n  k = k +1\n\nprint(k)\n\nWe accumulate the sum in s.\nNote that we start with x = 1 because we perform the halving before adding to s.\nThis means the first value added into s is 0.5 (as intended).\nEach such addition into s get counted in k.\n\n\n\n\n\n\n\n\nExercise 4.7\n\n\n\n\nType up the above in my_while_example7.py.\nSubmit your program my_while_example7.py.\nAnswering the following part of the exercise is recommended but not required for submission:\n\nTrace the execution of the three variables and develop your understanding of how the while-loop is executed in my_while_example7.py.\n\n\n\n\nA few comments that go beyond the scope of the course (just for curiosity):\n\nThe infinite sum, in fact, adds up to 1.\nIt took centuries for mathematics to develop to a point where one can prove that infinite sums are acceptable and can have finite results.\nHowever, a computer can only represent real numbers approximately, which means the sum is itself approximate.\nYou can see this by changing the while-condition from\nwhile s &lt; 0.9:\nto\nwhile s &lt; 1:\nTheoretical math would say that the while-loop would execute forever, but because there limits to what’s representable on a computer, the loop will indeed terminate."
  },
  {
    "objectID": "python_primer/unit1/modules/module4.html#for-vs.-while",
    "href": "python_primer/unit1/modules/module4.html#for-vs.-while",
    "title": "Module 4: while loops, I/O",
    "section": "4.2 for vs. while",
    "text": "4.2 for vs. while\nLet’s contrast for-loops and while-loops by writing a for-loop as a while-loop, and vice-versa.\nAs an example, let’s print the numbers 0 through 10:\n# for-loop version\nfor k in range(11):\n  print(k)\n\n# while-loop version\nk = 0\nwhile k &lt; 11:\n  print(k)\n  k = k + 1\n\n\n\n\n\n\nNote\n\n\n\n\nThe for-loop is simpler to write.\nThe while-loop must make explicit three things:\n\nThe initialization:\nk = 0 # --&gt; initialization\nwhile k &lt; 11:\n  print(k)\n  k = k + 1\nThe termination condition:\nk = 0\nwhile k &lt; 11: # --&gt; condition\n  print(k)\n  k = k + 1\nAnd the variable change (that will ultimately cause the condition to become False):\nk = 0\nwhile k &lt; 11:\n  print(k)\n  k = k + 1 # --&gt; variable change\n\nAll of this is hidden in the for-loop.\nUnderneath the hood, it turns out, the for-loop also has these three elements.\nIt’s just that we don’t have to write them, Python does so behind the scenes.\nWhen you write while-loop, ask yourself: “Do I have the three elements (initialization, condition, variable-change)?”\nA really common mistake:\nk = 0\nwhile k &lt; 11:\n  print(k)\nThis loop runs forever!\n\n\n\n\n\n\n\n\n\nExercise 4.10\n\n\n\nConsider the following for-loop:\nfor k in range(5, 20, 2):\n  print(k)\n\nIn my_for_while.py, write the while-loop equivalent.\nSubmit your program, my_for_while.py.\n\n\n\nNext, let’s go from while to for:\n\nConsider this while-loop that prints the letters in a string backwards:\ns = 'hello'\nk = len(s) - 1\nwhile k &gt;= 0:\n  print(s[k])\n  k = k - 1\n\n\n\n\n\n\n\nNote\n\n\n\n\nThe initialization starts k at the last index of the string:\nk = len(s) - 1\nThe loop condition expects k to decrement until it hits 0.\nAfter this, k (when it’s -1) will have gone past the left end of the string.\nk decrements in the loop.\n\n\n\n\nThe equivalent for-loop is efficient to write, but less pretty:\nfor k in range(len(s)-1, -1, -1):\n  print(s[k])\nHere:\n\nThe range begins with\nfor k in range(len(s)-1, -1, -1):\nEnds with 0, but has the index just past (-1) as the limit:\nfor k in range(len(s)-1, -1, -1):\nAnd the increment is -1 (which makes it a decrement).\n\nLater, when we learn more advanced ways of using slicing, we will be able to do the same thing with shorter code.\n\n\n\n\n\n\n\nExercise 4.11\n\n\n\n\nType up the above program involving the for-loop and while-loop in the same program, my_for_while2.py.\nSubmit your program my_for_while2.py.\nAnswering the following part of the exercise is recommended but not required for submission:\n\nTrace the execution of both the for-loop and while-loop and develop your understanding of how the loops are executed in my_for_while2.py.\n\n\n\n\n\n\n\n\n\n\nExercise 4.12\n\n\n\nConsider the following program with a while-loop:\ndef func(A):\n  k = 0\n  while A[k].startswith('h') and (len(A[k]) &gt; 4) and (k &lt; len(A)):\n    print(A[k])\n    k += 1\n\ndef func2(A):\n  # Write your for-equivalent here:\n\nB = ['hello', 'hey there', 'howdy', 'huzzah', 'hi', 'greetings']\nfunc(B)\nfunc2(B)\n\nComplete the above program with the missing for-loop and save it as my_for_while3.py.\nSubmit your program my_for_while3.py.\nAnswering the following part of the exercise is recommended but not required for submission:\n\nTrace the execution of both the for-loop and while-loop and develop your understanding of how the loops are executed in my_for_while3.py.\n\nYou may consider tracing the while-looploop (in func), to see that the loop keeps printing strings from a list as long as the strings start with h and have length at least 5.\nThen, trace the code in func2 involving the for-loop to achieve the same result in your program, my_for_while3.py."
  },
  {
    "objectID": "python_primer/unit1/modules/module4.html#using-break-in-loops",
    "href": "python_primer/unit1/modules/module4.html#using-break-in-loops",
    "title": "Module 4: while loops, I/O",
    "section": "4.3 Using break in loops",
    "text": "4.3 Using break in loops\nLet’s return to our first example of finding the last square that’s less than 1000.\nRecall what we wrote:\nk = 1\nwhile k*k &lt; 1000:\n  k = k + 1\n\nk = k - 1\nprint('largest square &lt; 1000:', k*k, '= square of', k)\nOne can use a break statement as an alternative to writing the “loop exit” condition as the while condition.\n\nWe’ll first do this with a for-loop, and then see something unusual with the while-loop version.\nTo simplify tracing, let’s rephrase to “largest square less than 50”.\n\nFirst, the for-loop version:\nfor k in range(1, 50):\n  # print('Before-if: k =', k)\n  if k*k &gt; 50:\n      break\n  # print('After-if: k =', k)\n\nk = k - 1\nprint(k)\n\n\n\n\n\n\nExercise 4.14\n\n\n\n\nType up the above in my_break.py, removing the # to un-comment the print-statements so that you can see exactly what happens when the if-condition triggers.\nSubmit your program my_break.py.\n\n\n\nLet’s point out some salient features of the break-statement:\n\nA break-statement is the reserved word break all by itself on a line, as seen above.\nWhen a break-statement is executed, Python looks for the loop that encloses the break and abruptly, right there and then, exits the loop.\nThe break-statements are useful to check for conditions that should result in leaving the loop immediately.\nOne could write code like this, but it would make no sense:\nfor k in range(10):\n  print(k)\n  break\nThis would cause the first value (0) to print, and a break right out of the loop.\nAs a mathematical aside, we know that we don’t really need the for-loop range to be as high as 50:\nfor k in range(1, 50):\n  if k*k &gt; 50:\n      break\nAfter all, as k gets close to 50, there is no way k*k would be less than 50. However, we’ll leave it as is, for the sake of simplicity.\nThere are options in writing the loop. Consider the following case:\nfor k in range(1, 50):\n  if (k+1)*(k+1) &gt; 50:\n    print(k)\n    break\nIs this more elegant, if a bit harder to understand at first?\n\n\n\n\n\n\n\nExercise 4.15\n\n\n\n\nType up the above program in my_break2.py.\nSubmit your program my_break2.py.\nAnswering the following part of the exercise is recommended but not required for submission:\n\nTrace the execution of the above program and develop your understanding of how the for-loop and break statements are executed in my_break2.py.\n\n\n\n\nNext, let’s look at a while-loop version of the program:\n\nHere’s the code:\nk = 1\nwhile True:\n  if k*k &gt; 50:\n    break\n  k = k + 1\n\nk = k - 1\nprint(k)\nObserve: \nWas it surprising that we deliberately set up a loop to appear to run forever?\nThis is entirely do-able and often desirable, provided we are real careful to set up a condition inside the loop to break out eventually.\nWe need to be sure we hit that condition eventually.\n\n\n\n\n\n\n\nExercise 4.16\n\n\n\n\nThis exercise is to help you develop an understanding of what can go wrong with while-loop execution in the above program.\n\nTry and understand for yourself what would go wrong if the statement k = k + 1 was mistakenly typed in as k = k - 1.\n\nThere is nothing to submit in this exercise.\n\n\n\n\n\n\n\n\n\nExercise 4.17\n\n\n\n\nIn Exercise 4.17, go back to the earlier Exercise 4.12 where you wrote a while loop to print strings of length at least 5, and starting with ‘h’.\nRewrite the while-loop implementing a break-statement instead.\n\nMake a modification in Ex 4.12 to the function func(A) that has a while loop implementation.\nThe modification should print just the first word from the list B that starts with an ‘h’\n\nSave your program as my_break3.py and submit it."
  },
  {
    "objectID": "python_primer/unit1/modules/module4.html#loops-within-loops",
    "href": "python_primer/unit1/modules/module4.html#loops-within-loops",
    "title": "Module 4: while loops, I/O",
    "section": "4.4 Loops within loops",
    "text": "4.4 Loops within loops\nJust as we’ve seen nested for-loops, so can we have nested while-loops or one kind inside another.\nConsider this example:\nm = 10\nwhile m &lt;= 10000:\n  for k in range(1, m):\n    if (k+1)*(k+1) &gt;= m:\n      print('largest square &lt;', m, ':',k*k)\n      break\n  m = m * 10\n\n\n\n\n\n\nExercise 4.19\n\n\n\n\nType up the above program in my_nested_loop.py .\nSubmit your program my_nested_loop.py . \n\n\n\nLet’s explain:\n\nFirst, notice that we have a for-loop inside a while-loop: \nLet’s start with understanding what happens in the outer loop: \nThus, m is first 10, then 100, then 1000, then 10000.\nNow let’s see what happens within one iteration of the outerloop (for a particular value of m): \n\n\n\n\n\n\n\nTip\n\n\n\nThe break-statement in the for-loop exits the for-loop (the enclosing loop), which means we’ll still be inside the while-loop (where m changes).\n\n\n\n\n\n\n\n\nExercise 4.20\n\n\n\n\nStart with the program my_nested_loop.py from Exercise 4.19 and change the inner loop to a while loop so that we get the same output.\nSave your program as my_nested_loop2.py and submit it.\n\n\n\n\n\n\n\n\n\nExercise 4.21\n\n\n\n\nThis exercise is to help you develop an understanding of the complexity in programs invovling loops.\n\nIn my_nested_loop3.py earlier, change the code so that both the outer-loop and inner-loop are for-loops.\nOne way to solve this problem:\n\nUse a variable called j to range through the outer for-loop and then ensure that the inner-loop executes only when j happens to equal m. (Aren’t you glad we have while-loops ?)\n\n\nThere is nothing to submit in this exercise."
  },
  {
    "objectID": "python_primer/unit1/modules/module4.html#new-topic-reading-from-a-file",
    "href": "python_primer/unit1/modules/module4.html#new-topic-reading-from-a-file",
    "title": "Module 4: while loops, I/O",
    "section": "4.6 New topic: reading from a file",
    "text": "4.6 New topic: reading from a file\nVery often, data is collected and stored in files, and so it’s desirable to learn how write code that plucks data right out of such files.\nLet’s start with a simple test file of plain text.\n\nFirst, examine the file testfile.txt to see that it’s a file consisting of four lines of text. (From the poet Ogden Nash.)\n\nWe will look at a few different versions of reading from this file.\n\nHere’s the first example:\nwith open('testfile.txt', 'r') as in_file:\n  lines = in_file.read()\n\nprint(type(lines))\nprint(lines)\n\n\n\n\n\n\n\nExercise 4.27\n\n\n\n\nType up the above program in my_file_read.py.\nSubmit your program, my_file_read.py.\nAnswering the following part of the exercise is recommended but not required for submission:\n\nWhat is the type of the variable lines?\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\nWe’ve used two Python reserved words:\nwith open('testfile.txt', 'r') as in_file:\nAlthough file input/output (I/O) does not strictly require the with structure, it is useful because:\n\nFiles that are being accessed by one program are said to be in an “opened” state.\nFor another program to be able access the file, the first one has to “close” it (that is, signal that it’s done with the file).\nThe with structure automatically takes care of it.\n\nThe function call to opentakes the name of the file and the kind of access, for example:\nwith open('testfile.txt', 'r') as in_file:\n\n‘r’ for read-only access (we’re not changing the file here)\n‘w’ for write, if we should choose to.\n\nThe result of opening a file is to get a special kind of variable, what we’ve called in_file in this case:\nwith open('testfile.txt', 'r') as in_file:\nIt is this variable that’s going to perform the reading and, in this case, get us all the text in one shot:\nwith open('testfile.txt', 'r') as in_file:\n  lines = in_file.read()\nNote that all the lines are returned as a single string.\nThis means, it will be difficult to analyze string-by-string, if that’s our goal.\nThere is a way to take the single string and break it into separate lines, but let’s instead find a way to read separate lines.\n\n\n\nAccordingly, let’s look at a way to read the file into a list of strings, where each line is one string in the list:\nlines = []\nwith open('testfile.txt', 'r') as in_file:\n  line = in_file.readline()\n  while line != '':\n    lines.append(line.strip())\n    line = in_file.readline()\n\nprint(type(lines))\nprint(lines)\n\n\n\n\n\n\nExercise 4.28\n\n\n\n\nType up the above program in my_file_read2.py.\nSubmit your program, my_file_read2.py.\nAnswering the following part of the exercise is recommended but not required for submission:\n\nWhat is the type of the variable lines?\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\nHere, we’re reading one line at a time and appending to a running list, which is the lines variable.\nThe problem is, for any general file, we won’t know in advance how many lines of text are in the file.\nA while-loop to the rescue!\nThus, we keep reading from the file as long as a read operation produces a line: \n\n\n\nWe will now look at how to write to a file.\n\nSuppose we’ve read a text file into a list of strings.\nLet’s now write these to a new file:\nwith open('testcopy.txt', 'w') as out_file:\n  for line in lines:\n    out_file.write(line + '\\n')\nThis time, we’re opening a file called testcopy.txt for the purpose of writing to it:\nwith open('testcopy.txt', 'w') as out_file:\n  for line in lines:\n    out_file.write(line + '\\n')\nWe’ve named our file variable out_file.\nThat will let us use a function called write():\nwith open('testcopy.txt', 'w') as out_file:\n  for line in lines:\n    out_file.write(line + '\\n')\nHere, we’re looping through the list, writing each string as one line in the file.\nNotice that we need to insert the ‘’ at the end of each line.  Recall:\n\n‘\\n’ represents an instruction to both output and files to “go to the next line right now”.\nThus for example\nprint('hello' + 'world')           # Prints helloworld on one line\nprint('hello' + '\\n' + 'world')    # Prints hello, and then world on the next line\n\nSo, to write strings to different lines, we have to tell the function that writes to files to go to the next line with an explicit ‘’.\nIt’s similar with reading, if we read a whole file as one string, that string will contain the so-called linebreaks (the ‘’ characters).\n\n\n\n\n\n\n\n\n\nExercise 4.29\n\n\n\n\nIn my_file_readwrite.py, combine the reading and writing so that the program as whole results in copying from testfile.txt to testcopy.txt.\nSubmit your program, my_file_readwrite.py.\n\n\n\nNext, let’s read from a file of numbers and perform some basic stats:\n\nFirst, examine the file data.txt and see that it’s a collection of numbers, one per line.\nWe’ll read line by line as a string, and then convert to a floating-point number:\ndata = []\nwith open('data.txt', 'r') as in_file:\n  line = in_file.readline()\n  while line != '':\n    s = line.strip()           # Remove leading/trailing whitespace\n    x = float(s)               # Convert string to float\n    data.append(x)             # Add to our list\n    line = in_file.readline()  # Get the next line\n\nprint(data)\n\n\n\n\n\n\n\nExercise 4.30\n\n\n\n\nType up the above program in my_file_data.py.\nAdd code to compute the average of the numbers and print the average.\n\nCompute the total as you iterate in the while-loop.\nThe program should print the average of the data and the data as shown below\n5.485714285714287\n[5.0, 1.3, 6.77, 12.3, 2.01, 3.14, 7.88]"
  },
  {
    "objectID": "python_primer/unit1/modules/module1.html",
    "href": "python_primer/unit1/modules/module1.html",
    "title": "Module 1: Conditionals",
    "section": "",
    "text": "By the end of this module you will be able to:\n\nEvaluate Boolean (pronounced: BOO-lee-unn) expressions.\nConstruct Boolean expressions from English descriptions.\nMentally execute (trace) code with conditionals, that is, if, if-else, and if-multi-else statements.\nWrite and debug code with conditionals.\nWrite and debug code with conditionals inside loops.\nIdentify new syntactic elements related to the above."
  },
  {
    "objectID": "python_primer/unit1/modules/module1.html#objectives",
    "href": "python_primer/unit1/modules/module1.html#objectives",
    "title": "Module 1: Conditionals",
    "section": "",
    "text": "By the end of this module you will be able to:\n\nEvaluate Boolean (pronounced: BOO-lee-unn) expressions.\nConstruct Boolean expressions from English descriptions.\nMentally execute (trace) code with conditionals, that is, if, if-else, and if-multi-else statements.\nWrite and debug code with conditionals.\nWrite and debug code with conditionals inside loops.\nIdentify new syntactic elements related to the above."
  },
  {
    "objectID": "python_primer/unit1/modules/module1.html#a-simple-example",
    "href": "python_primer/unit1/modules/module1.html#a-simple-example",
    "title": "Module 1: Conditionals",
    "section": "1.0 A simple example",
    "text": "1.0 A simple example\nConsider this program:\nx = 5\ny = 4\n\nif x &gt; y:\n    print('Hey, x is bigger')\n\nprint(\"OK, we're done\")\n\n\n\n\n\n\nExercise 1.1\n\n\n\nIn my_ifexample.py, type up the above and examine the output. Then, do the following:\n\nBelow the print with Hey, x is bigger, add another print-statement to print another line of text. For example, you could add a line such as, ‘Hey, y is smaller’. Make sure the new print-statement is indented (i.e., it should have 4 spaces preceding it).\nRun the program and make sure you are getting the outputs you programmed.\nNow change the value of y to 6 and see for yourself if you are getting a different output.\nSubmit my_ifexample.py with the modifications outlined in point #1 and #3.\n\n\n\nLet’s explain:\n\nFirst, observe: \nNow, at the moment the if-statement executes, the condition is evaluated:  If the condition is true, then the code that’s indented below the if-statement executes.\nConsider what happens when y is 6: \n\n\n\n\n\n\n\nExercise 1.2\n\n\n\nConsider this program:\ns = 0\nfor i in range(6):\n    s = s + i\n    if s &lt; 15:\n        print('Less than 15')\n\nprint('Done')\nType up the above program in my_ifexample2.py and submit it.\nThe following part of the exercise is not required for submission. However, it is important for you to complete it on your own to understand the execution of the program my_ifexample2.py.\n\nTrace through the program above using a table in a spreadsheet or a document\n\nTrack the variables i and s, as well as the print-statements to confirm the output of the program."
  },
  {
    "objectID": "python_primer/unit1/modules/module1.html#if-else",
    "href": "python_primer/unit1/modules/module1.html#if-else",
    "title": "Module 1: Conditionals",
    "section": "1.1 if-else",
    "text": "1.1 if-else\nThink of else as if’s occasional partner.\nConsider this example:\nx = 5\ny = 4\n\nif x &gt; y:\n    print('Hey, x is bigger')\nelse:\n    print('Who said x is bigger?')\n    print('In fact, y is bigger')\n\nprint(\"OK, we're done\")\n\n\n\n\n\n\nExercise 1.3\n\n\n\nType up the above in my_ifexample3.py and examine the output. Then do the following:\n\nChange the value of y to 6 and examine the output.\nSubmit the program with y = 6.\n\n\n\nLet’s point out:\n\nWhen x is indeed larger than y, the code in the if-body executes: \nWhen the if-condition evaluates to false: \nWhat happens when x is 5 and y is 5? \n\nBecause some of these arrows might be difficult to follow, let’s emphasize some blocks (lines) of code:\n\nFirst consider when x is larger than y: \nAnd when y is larger than x:"
  },
  {
    "objectID": "python_primer/unit1/modules/module1.html#if-elif-else",
    "href": "python_primer/unit1/modules/module1.html#if-elif-else",
    "title": "Module 1: Conditionals",
    "section": "1.2 if-elif-else",
    "text": "1.2 if-elif-else\nConsider this variation:\nx = 5\ny = 5\n\nif x &gt; y:\n    print('Hey, x is bigger')\nelif y &gt; x:\n    print('Who said x is bigger?')\n    print('In fact, y is bigger')\nelse:\n    print('Actually, they are equal')\n\nprint(\"OK, we're done\")\n\n\n\n\n\n\nExercise 1.4\n\n\n\nType up the above in my_ifexample4.py and examine the output. Then do the following:\n\nChange the variable assigments to x = 6 and y = 4, and run the program to examine the output.\nChange the variable assigments to x = 4 and y = 6, and run the program to examine the output.\nChange the variable assigments to x = 5 and y = 5, and run the program to examine the output.\nSubmit the program my_ifexample4.py with x = 5 and y = 5.\n\n\n\nLet’s explain:\n\nFirst, consider the case wehere x=5 and y=5: \nNow consider the case where x=5 and y=4: \nNext: x=5, y=6: \n\nOne can have as many elif sections as one would like, for example:\nx = 3\n\nif x == 1:\n    print('one')\nelif x == 2:\n    print('two')\nelif x == 3:\n    print('three')\nelif x == 4:\n    print('four')\nelse:\n    print('big')\nThink of the whole thing as a giant if-statement:  In the above case, when x is 3, the execution path through the giant if-statement is: \n\n\n\n\n\n\nExercise 1.5\n\n\n\nType up the above in my_ifexample5.py and examine the output. Then do the following:\n\nNotice that, in the first line, the variable x is assigned the value 3.\n\nRun the program again after changing the variable assigment in the first line of the program to x = 1, x = 2, x = 4, and x = 5 and examine the output each time.\nSubmit the program my_ifexample5.py with x = 3.\n\nThe following part of the exercise is not required for submission. However, it will help you understand how the elif-construct works\n\nDraw execution pathways (similar to the picture above) for each case in a separate document.\n\n\n\nConsider this program:\nx = 5\ny = 4\nz = 3\n\nif x &gt; y:\n    print('Hey, x is bigger')\n\nif x &gt; z:\n    print('x is bigger than z')\n    print('So, x must be the largest')\n\n\n\n\n\n\nExercise 1.6\n\n\n\nType up the above in my_ifexample6.py and run the program to examine the output. Then do the following:\n\nChange the variable assigment of y to 6, and run the program to examine the output.\nChange the variable assigment of y to 4, and submit the program, my_ifexample6.py."
  },
  {
    "objectID": "python_primer/unit1/modules/module1.html#nested-conditionals",
    "href": "python_primer/unit1/modules/module1.html#nested-conditionals",
    "title": "Module 1: Conditionals",
    "section": "1.3 Nested conditionals",
    "text": "1.3 Nested conditionals\nConsider this program:\na = 3\nb = 4\nc = 5\n\nif a &lt; b:\n    if a &lt; c:\n        print('a is the smallest')\n    else:\n        print('a is not the smallest')\n\nprint('Done')\nThis is an example of a nested conditional (nested if):\n\nFirst, examine the indented structure: \nThe flow of execution: \n\nConsider this variation:\na = 3\nb = 4\nc = 5\n\nif a &lt; b:\n    if a &lt; c:\n        print('a is the smallest')\n    else:\n        print('a is not the smallest')\n    print('We know a is less than b')\nelse:\n    print('We know a is not less than b')\n\nprint('Done')\n\n\n\n\n\n\nExercise 1.8\n\n\n\nType up the above in my_nestedif.py and examine the output. Then do the following:\n\nRun the program for a = 3, b = 4, c = 5 and examine the output.\nRun the program for a = 3, b = 4, c = 2 and examine the output.\nRun the program for a = 6, b = 4, c = 5 and examine the output.\nSubmit the program for a = 3, b = 4 and c = 5.\n\nThe following part of the exercise is not required for submission. However, it will help you understand how the nested if-construct works.\n\nDraw the flow of execution for the following three cases: (1) when a=3, b=4, c=5; (2) when a=3, b=4, c=2; (3) when a=6, b=4, c=5 in a separate document.\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\n\nA numeric variable can be strictly less than, less than or equal to, strictly greater than, greater than or equal to, or equal to another variable.\nAccordingly, the different types of less/greater comparisons are:\na &lt; b      # Strictly less (a=3, b=4)\na &lt;= b     # Could be less (a=3, b=5), could be equal (a=3, b=3) \na &gt; b      # Strictly greater (a=3, b=2)\na &gt;= b     # Could be greater (a=3, b=1), could be equal (a=2, b=2)"
  },
  {
    "objectID": "python_primer/unit1/modules/module1.html#combining-conditions",
    "href": "python_primer/unit1/modules/module1.html#combining-conditions",
    "title": "Module 1: Conditionals",
    "section": "1.4 Combining conditions",
    "text": "1.4 Combining conditions\nConsider this program:\nx = 5\ny = 5\nz = 5\n\nif x == y and y == z:\n    print('All three are equal')\n\n\n\n\n\n\nExercise 1.10\n\n\n\nType up the above in my_boolean.py. Then do the following:\n\nRun the program for x=3, y=4, z=5 and examine the output.\nRun the program for x=3, y=3, z=3 and examine the output.\nRun the program for x=4, y=4, z=4 and examine the output.\nSubmit the program with the modifications outlined in point #3.\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\nThe first thing to point out is the == operator:\n\nBecause we’ve been using the equals operator (=) for assigning values to variables, we need something else to test for equality.\nThe equality operator in Python is ==, as in:\nif x == y and y == z:\nAlas, the problems with limited keyboard symbols!\n\nImportant: The difference between = and == is very important to remember. It’s easy to make a mistake.\n\nThe if-statement combines two conditions using the Boolean operator and:\n\nif x == y and y == z:\n\n\nWe can clarify the parts and combination thereof using parentheses:\n\nif (x == y) and (y == z):\n\nThe two conditions are often called clauses: \n\nYou could also include many more clauses.\n\n\nBoolean is pronounced “BOO lee unn”.\nA Boolean operator takes expressions and evaluates to either True or False.\nThe “and” operator works like this: \n\n\n\nLet’s go back to finding the smallest of three numbers using conditionals:\na = 3\nb = 4\nc = 5\n\n# Fill in code here ... \n\n\n\n\n\n\nExercise 1.11\n\n\n\nIn my_smallest_of_three2.py, fill in code to identify which of the three variables has the smallest value, depending on the actual values of a, b, and c. Use if-statements with multiple clauses.\n\nTry different values of these variables to verify that your program is working correctly.\nThere is nothing to submit for this exercise.\n\n\n\nThe counterpart to the and operator is the or operator:\na = -2.718\n\nif (a &lt;= 0) or (a &gt;= 1):\n    print('a is not between 0 and 1')\n\n\n\n\n\n\nExercise 1.13\n\n\n\nType up the above in my_boolean2.py. Then:\n\nChange the value of the variable a to 0.5 and run the program to examine the output.\nSubmit the program with the modification outlined in point #1.\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\nWe have shown how to write “less than or equal to” using &lt;=\n\na &lt; b      # Strictly less than\na &lt;= b     # Could be less, could be equal\na &gt; b      # Strictly greater than\na &gt;= b     # Could be greater, could be equal \na == b     # Exactly equal\na != b     # Not equal\nFor the or operator to evaluate to True, any one or both of the two expressions need to be true.\nConsider:\na = 3\nb = 4\nif (a &lt; 10) or (b &lt; 10):\n    print('One or both of them is less than 10')\n\nIn this case both will evaluate to True, so the print statement executes.\nSuppose we make a = 3 and b = 11, the print statement will execute.\nSuppose we make a = 11, b = 3, the print statement will execute.\nBut, if a = 11 and b = 12, the or fails (i.e., both clauses are false), and the print won’t execute.\n\nIncidentally, let’s replace or with and in the above case and see what we get:\na = 3\nb = 4\nif (a &lt; 10) and (b &lt; 10):\n    print('Both of them are less than 10')\nIn this case, both sub-conditions are satisfied, meaning the whole if-condition is satisfied and the print will execute.\nBut if we had the following:\na = 3\nb = 4\nif (a &lt; 10) and (b &gt; 10):\n    print('One or both of them is less than 10')\nIn this case, the second comparison would fail, and the print wouldn’t occur.\nWhereas if we had or:\na = 3\nb = 4\nif (a &gt; 10) or (b &lt; 10):\n    print('One or both of them is less than 10')\nHere, it’s enough that a is less than 3, so the print executes even though “b greater than 10” fails.\n\n\n\nNext, let’s look at the NOT operator (written as !):\nx = 5\ny = 6\nz = 7\n\nif (x != y) and (x != z):\n    print('x is different from y and from z')\nHere, read != as “not equals”.\n\n\n\n\n\n\nExercise 1.14\n\n\n\nType up the above in my_boolean3.py. Then do the following:\n\nChange the value of z value to 6 (same as y) and observe the output.\nSubmit the program with the modification outlined in point #1.\n\n\n\nOne can combine any number of and’s. For example,\nx = 5\ny = 6\nz = 7\n\nif (x != y) and (x != z) and (y != z):\n    print('x, y, z are all different')\nThe difference between != and not\n\nWe should read != as “not equals”, just as we read == as “equals”.\nThere is another operator called not which applies to Boolean expressions, as we’ll see next.\n\nThe not operator\n\nOne can apply the not operator to groups of clauses using additional parentheses:\nx = 8\n\nif not ( (x == 5) or (x == 6) ):\n    print('x is neither 5 nor 6')\nHere, not is asking that whatever it applies to be inverted.\nThus, consider the expression\nif not ((x == 5) or (x == 6)):\nIn this case, x is 8. So, neither of (x == 5) nor (x == 6) is true.\nThus, the whole expression ( (x == 5) or (x ==6) ) is false.\nWhich means not ( (x == 5) or (x ==6) ) evaluates to true.\nTherefore, the print executes.\n\n\n\n\n\n\n\nExercise 1.15\n\n\n\nSuppose integer variables a,b,c,d,e have values a=1, b=1, c=3, d=4, e=5. Consider the following three expressions:\n( (a &lt;= b) and (c+d &gt; e) and (d &gt; 1) )\n\n( (a &gt; c) or ( (c+1 &lt; e) and (c-b &gt; a) ) )\n\nnot ( (b == d-c) and (a &gt; b) or (c &lt; d) )\n\nTry to evaluate each expression by hand.\nThen, write up a program my_boolean4.py with variables assignments, a=1, b=1, c=3, d=4 and e=5, to evaluate the above expressions.\n\nUse print-statements with each of the expressions to see the results.\n\nSubmit my_boolean4.py.\nThe following part is not required for submission:\n\nCompare the results of your evaluation-by-hand with those of the program.\n\n\n\n\n\n\n\n\n\n\nExercise 1.16\n\n\n\nIn my_boolean5.py, write a program that begins with the following program shown below.\na = -3\nb = -4\ndiff = abs(a-b) \n# Note: abs() is a Python built-in function that returns \n# the absolute value of the specified number\nprint(diff)\nNote: abs() is a Python built-in function that returns the absolute value of the specified number\nCase-1: Use conditionals to print out the absolute difference between the two numbers if they are greater than or equal to 1.\n\n\nHint: Use logic operator, &gt;= to print the variable diff . Use the code structure shown below that compares a  to a value in order to print.\nif &lt;variable&gt; &gt;= value:\n    print(&lt;variable&gt;) \n\nCase-2: Use a=3, b=4, the difference is also 1.\nCase-3: When a=-3, b=4, the difference is 7.\nSubmit my_boolean5.py with a = -3 and b = -4."
  },
  {
    "objectID": "python_primer/unit1/modules/module1.html#conditionals-and-loops",
    "href": "python_primer/unit1/modules/module1.html#conditionals-and-loops",
    "title": "Module 1: Conditionals",
    "section": "1.5 Conditionals and loops",
    "text": "1.5 Conditionals and loops\nLet’s write a program to loop through integers and print only the even numbers:\nn = 10\nfor i in range(1, n+1):\n    if i % 2 == 0:\n        print(i, 'is even')\n\n\n\n\n\n\nExercise 1.18\n\n\n\nType up the above program in my_oddeven.pyand run it to examine the output. Then do the following:\n\nModify the above program so that for every number between n and 1 (inclusive), the program prints whether it’s even or odd in reverse order, as in:\n10 is even\n9 is odd\n8 is even\n7 is odd\n6 is even\n5 is odd\n4 is even\n3 is odd\n2 is even\n1 is odd\nSubmit the program with modification outlined in point #1.\nThe following part of the exercise is not required for submission:\n\nTrace through the interactions in the above program in a separate spreadsheet or document."
  },
  {
    "objectID": "python_primer/unit1/modules/module2.html",
    "href": "python_primer/unit1/modules/module2.html",
    "title": "Module 2: Functions",
    "section": "",
    "text": "By the end of this module you will be able to:\n\nEnhance your understanding of how to use def to write functions, then invoke them.\nWrite code with function definitions and invocations.\nWrite and debug code with functions\nExplore the different ways in which parameters work.\nIdentify new syntactic elements related to the above."
  },
  {
    "objectID": "python_primer/unit1/modules/module2.html#objectives",
    "href": "python_primer/unit1/modules/module2.html#objectives",
    "title": "Module 2: Functions",
    "section": "",
    "text": "By the end of this module you will be able to:\n\nEnhance your understanding of how to use def to write functions, then invoke them.\nWrite code with function definitions and invocations.\nWrite and debug code with functions\nExplore the different ways in which parameters work.\nIdentify new syntactic elements related to the above."
  },
  {
    "objectID": "python_primer/unit1/modules/module2.html#a-simple-example",
    "href": "python_primer/unit1/modules/module2.html#a-simple-example",
    "title": "Module 2: Functions",
    "section": "2.1 A simple example",
    "text": "2.1 A simple example\nConsider this program:\ndef increment_and_print(a):\n    a = a + 1\n    print(a)\n\ni = 5\nincrement_and_print(i)\n\nj = 6\nincrement_and_print(j)\n\n\n\n\n\n\nExercise 2.2\n\n\n\nType up the above in my_func_example.py.\nThen do the following:\n\nJust before the line where the variable assignment j = 6 is shown, print the value of i.\nExecute the program my_func_example.py.\n\nSubmit the program my_func_example.py.\n\n\nLet’s explain:\n\nLet’s start by distinguishing between a function definition (which merely tells Python what the function is about), and invocation (which asks Python to execute the function at that moment): \nNow let’s peer into what constitutes a definition: \nIn the above case, the function increment_and_print has only one parameter called a.\n\nIn the future, we’ll see that a function can have several parameters, separated by commas.\nFor example\ndef increment_and_print(a, b, c):\n\nNext, let’s examine how execution proceeds, starting with what happens when a function is invoked: \nOnce execution is inside the function: \nNext, execution moves further into the second invocation: \nThe code inside the function now executes (again): \n\n\n\n\n\n\n\nNote\n\n\n\nDid you notice that neither i nor j was affected by the incrementing of the value of variable a?\n\nThis is because the value in i was copied into the newly-created variable a when the function was invoked.\nEven though variable a got incremented, that did not affect i.\n\n\n\n\nVariables like a that appear in the parentheses of a function definition are called parameters.\n\nWhat does a function do with its parameters?\n\nThink of the parameters as variables that can be used as regular variables for any purpose.\nFor example, consider this program:\n\ndef print_from_one_to(a):\n    print('Printing between 1 and ', a)\n    for i in range(1, a+1):\n        print(i)\n\nprint_from_one_to(5)\nprint_from_one_to(6)\n\nHere, we used the parameter a in setting the upper limit of a for-loop.\n\n\n\n\n\n\n\nNote\n\n\n\n\nWhen a function is defined with a parameter, the intent is that some code outside the function will set the value of the parameter.\n\nThus, it would be allowed but technically defeat the purpose to write:\ndef print_from_one_to(a):\n    a = 5\n    print('Printing between 1 and ', a)\n    for i in range(1, a+1):\n        print(i)\n\nprint_from_one_to(5)\nprint_from_one_to(6)\nYes, this runs, but the whole point is for some other code to tell the function, “Hey, I’m going to set variable a, and then you do your printing with the value I set”.\nAnd so, when we write\ndef print_from_one_to(a):\n    print('Printing between 1 and ', a)\n    for i in range(1, a+1):\n        print(i)\nprint_from_one_to(5)   # We're telling the function that a = 5\nprint_from_one_to(6)   # We're now telling the function to use a = 6\n\n\n\n\n\n\n\n\n\n\nExercise 2.3\n\n\n\nWhat do each of the above two programs print? Type them up in my_func_example2a.py and my_func_example2b.py to find out.\nSubmit the following programs in this exercise:\n\nmy_func_example2a.py\nmy_func_example2b.py\n\n\n\n\n\n\n\n\n\nExercise 2.5\n\n\n\nIn my_func_example3.py, fill in the code in the function below so that the output of the program is:\n*****\n***\n*\nThe partially-written program is as shown below.\ndef print_stars(n):\n    # Write your function code here\n\nprint_stars(5)\nprint_stars(3)\nprint_stars(1)\n\nComplete the above program by including your code under the comment (i.e., text followed by the #-symbol)\nYou can include the comment in the your code.\nExecute the program my_func_example3.py.\nSubmit your program my_func_example3.py."
  },
  {
    "objectID": "python_primer/unit1/modules/module2.html#multiple-parameters",
    "href": "python_primer/unit1/modules/module2.html#multiple-parameters",
    "title": "Module 2: Functions",
    "section": "2.2 Multiple parameters",
    "text": "2.2 Multiple parameters\nRemember Pythagoras? We know his famous result:\n\nA Pythagorean triple is any group of three integers like 3,4,5 where the squares of the first two add up to the square of the third: 32 + 42 = 52.\nWe’ll now write code to check whether a trio of numbers is indeed a Pythagorean triple:\ndef check_pythagorean(a, b, c):\n    if a*a + b*b == c*c:\n        print('yes')\n    else:\n        print('no')\n\ncheck_pythagorean(3, 4, 5)\ncheck_pythagorean(5, 12, 13)\ncheck_pythagorean(6, 8, 20)\n\n\n\n\n\n\nNote\n\n\n\n\nThis time, we’ve defined a function that takes three parameters:\ndef check_pythagorean(a, b, c):\n    # The comments here are indented by a tab space. \n    # The function code replaces these comments as shown below.\nNotice the commas separating the three variables.\nConsider the first invocation: \nThe invocation also uses commas to separate arguments.\n\n\n\n\n\n\n\n\n\nExercise 2.7\n\n\n\nIn my_func_example4.py, fill in the code in the function below so that the output of the program is:\n5\n3\n2\n0\nHint: The idea is to compute the sum but only of the positive parameters; if neither value is positive, print 0.\nThe partially written program is as shown below.\ndef print_profit_total(a,b):\n    # Write your function code here\n\nprint_profit_total(2, 3)\nprint_profit_total(-2, 3)\nprint_profit_total(2, -3)\nprint_profit_total(-2, -3)\n\nComplete the above program by including your code under the comment (i.e., text followed by the #-symbol)\nYou can include the comment in the your code.\nExecute the program my_func_example4.py.\nSubmit your program my_func_example4.py."
  },
  {
    "objectID": "python_primer/unit1/modules/module2.html#return-values",
    "href": "python_primer/unit1/modules/module2.html#return-values",
    "title": "Module 2: Functions",
    "section": "2.3 Return values",
    "text": "2.3 Return values\nSo far, we’ve written methods that take values, do things and print.\nWe get a whole new level of programming power, when methods can compute something and return something to the invoking code.\nHere’s an example:\ndef padd(a, b):\n    total = 0\n    if a &gt;= 0:\n        total += a\n    if b &gt;= 0:\n        total += b\n    return total\n\nx = padd(-5, 6)\nprint(x)\n\n\n\n\n\n\nExercise 2.9\n\n\n\nType up the above in my_func_example5.py.\nTry and answer the following for yourself: What does the padd() function achieve by reviewing the program?\nThen do the following:\n\nFirst, execute the program my_func_example5.py.\nNext, replace the function parameters with 5, -6.\nFinally, replace the function parameters with 5, 6.\n\nSubmit your program my_func_example5.py with function parameters padd(5, 6).\n\n\nLet’s explain:\n\nFirst, execution begins after the function definition is “absorbed” by Python: \n\nRemember, in an assignment statement, the right side is executed first:\nx = padd(-5, 6)\nThe result of invoking this function somehow results in x getting a value stored inside it.  (We’ll see how, shortly.)\nNext, execution goes into the function: \nWhen the return statement executes, the value returned (the value of total gets copied into x) \nOne way to think about it is presented below:\n\nConsider the following function invocation:\nx = padd(-5, 6)\nThen look at the function definition and the code block that is executed under def padd(a, b):.\nAfter the function padd(-5, 6) is executed, it returns the value in one of its variables (i.e., total).\nIn this case where the function is padd(-5, 6), the value 6 is returned. \nThe value 6 is now assigned to the the variable x as shown below.\nx = 6\nAnd thus, the value 6 gets copied into the variable x.\n\n\n\n\n\n\n\n\nExercise 2.10\n\n\n\nIn my_func_example6.py, complete the code in sum_up_to() so that it computes and then returns the sum of numbers from 1 to n (inclusive of 1 and n).\ndef sum_up_to(n):\n    # write your code here\n\nresult = sum_up_to(5)\nprint(result)            # should print 15\nresult = sum_up_to(10)\nprint(result)            # should print 55\n\n\nLet’s return to our earlier example and use the padd() function in different ways:\ndef padd(a, b):\n    print('Received values: ', a, b)\n    total = 0\n    if a &gt;= 0:\n        total += a\n    if b &gt;= 0:\n        total += b\n    return total\n\nprint(padd(-5, 6))                   \nx = padd(padd(-5,6), 7)              \nprint(x)                             \nprint(padd(padd(-5,6), padd(5,-6)))  \n\n\n\n\n\n\nExercise 2.12\n\n\n\nType up the above in my_func_example7.py.\nThen do the following:\n\nExecute the program my_func_example7.py.\nSubmit the program my_func_example7.py.\n\n\n\nLet’s examine each of the last four statements in the program my_func_example7.py:\n\nFirst, let us look at the following statement in the program my_func_example7.py:\nprint(padd(-5, 6))\n\nIn this case, the invocation of the function padd() occurs inside the print() statement.\nThe function padd(-5, 6) executes and returns the value 6.\nThen the print() statement is executed as shown below with the value 6.\nprint( 6 )\nThe value 6 is the output of the print() function.\n\nNext, let us examine the following statement in the program my_func_example7.py:\nx = padd(padd(-5,6), 7)              \n\nIn this case, the innermost padd() function is invoked first, i.e., padd(-5, 6) in\nx = padd( padd(-5,6), 7 )\nThe parameter values 5 & 6 are input into the function padd(-5, 6).\nThe function padd(-5, 6) returns the value 6, and the statement takes the form as shown below:\nx = padd( 6, 7 )\nNow the outermost padd() function has the value values 6 & 7 as its’ parameters.\nThis results in another invocation to padd() with parameter values 6 & 7 i.e., padd( 6, 7 ).\nThe function padd( 6, 7 ) is executed and it returns the value 13.\nThe result is assigned to the variable x as shown below:\nx = 13\n\nFinally, consider the last statement in the program my_func_example7.py as shown below:\nprint(padd(padd(-5,6), padd(5,-6)))  \n\nIn this case, there are two innermost invocations of the padd() functions. These are padd(-5, 6) & padd(5, -6) located inside the outermost padd() function as shown below:\nprint(padd( padd(-5,6), padd(5,-6) ))  \nIn the statement above the first function to be invoked is padd(-5, 6).\nThe function padd(-5, 6) returns the value 6 and the statement takes the following form:\nprint(padd( 6, padd(5,-6) ))  \nNext, the function padd(5, -6) is invoked\nThe function padd(5, -6) returns the value 5 and the statement takes the following form inside the print() statement:\nprint(padd( 6, 5 ))  \nNow, the values 6 & 5 become the parameters for the third invocation of the function padd().\nThis invocation of the function padd( 6, 5 ) returns the value 11\nThe print() statement is now executed with the returned output from the function padd( 6, 5 ) as shown below:\nprint( 11 )  \nAnd so 11 gets sent to print, which prints it.\nWhew!"
  },
  {
    "objectID": "python_primer/unit1/modules/module2.html#multiple-returns-in-a-function",
    "href": "python_primer/unit1/modules/module2.html#multiple-returns-in-a-function",
    "title": "Module 2: Functions",
    "section": "2.4 Multiple returns in a function",
    "text": "2.4 Multiple returns in a function\nTake a moment to go back up and quickly glance through the Pythagorean example.\nNow consider this rewrite:\ndef check_pythagorean(a, b, c):\n    if a*a + b*b == c*c:\n        print('In the if-part')\n        return 'yes'\n    else:\n        print('In the else-part')\n        return 'no'\n\nresult = check_pythagorean(3, 4, 5)\nprint(result)\nresult = check_pythagorean(5, 12, 13)\nprint(result)\nresult = check_pythagorean(6, 8, 20)\nprint(result)\n\n\n\n\n\n\nExercise 2.13\n\n\n\nType up the above in my_func_example8.py.\nExecute the program my_func_example8.py.\nSubmit the program my_func_example8.py.\n\n\n\n\n\n\n\n\nNote\n\n\n\n\nWhen a function executes a return statement, execution exits the function right then and there, even if there’s more code below.\nThus for example, in the first time check_pythagorean() is invoked: \n\n\n\n\n\n\n\n\n\nExercise 2.14\n\n\n\nTrying drawing a similar diagram for the other two function invocations in a separate document to help you understand the flow of the program.\nThere is nothing to submit in this exercise.\n\n\n\n\n\n\n\n\nExercise 2.15\n\n\n\nIn my_func_example9.py, complete the code below so that the function, when given three numbers, identifies the two larger ones and returns their sum.\ndef add_bigger_pair(a, b, c):\n    # Write your code here:\n\nprint(add_bigger_pair(2,3,4))  # Should print 7\nprint(add_bigger_pair(2,3,1))  # Should print 5\nprint(add_bigger_pair(2,1,4))  # Should print 6\n\nComplete the above program by including your code under the comment (i.e., text followed by the #-symbol)\nYou can include the comment in the your code.\nExecute the program my_func_example9.py.\nSubmit your program my_func_example9.py."
  },
  {
    "objectID": "python_primer/unit1/modules/module2.html#parameter-and-argument-names",
    "href": "python_primer/unit1/modules/module2.html#parameter-and-argument-names",
    "title": "Module 2: Functions",
    "section": "2.5 Parameter and argument names",
    "text": "2.5 Parameter and argument names\nConsider this example:\ndef subtract(a, b):\n   c = b - a\n   return c\n\nx = 5\ny = 6\nz = subtract(x, y)\n\n\n\n\n\n\nNote\n\n\n\n\nWe refer to a and b as parameters in the definition of the function:\ndef subtract(a, b):\nWhen function is invoked as shown below,\nsubtract(x, y):\nwe use the term function arguments for x and y.\n\n\n\nThe names given to parameters have no relation to the names used for arguments:\n\nIn the above case: \nConsider this variation:\ndef subtract(a, b):\n    c = b - a\n    return c\n\na = 5\nb = 6\nc = subtract(a, b)\nThe a,b,c that are the parameter variables are different from the a,b,c variables below: \n\n\n\n\n\n\n\nTip\n\n\n\nIf you aren’t sure, it’s safest to use different names."
  },
  {
    "objectID": "python_primer/unit1/modules/module2.html#what-can-you-do-with-parameter-variables",
    "href": "python_primer/unit1/modules/module2.html#what-can-you-do-with-parameter-variables",
    "title": "Module 2: Functions",
    "section": "2.6 What can you do with parameter variables?",
    "text": "2.6 What can you do with parameter variables?\nGenerally, the purpose of parameter variables is this:\n\nConsider this example:\ndef silly_func(a, b):\n    c = 2*a - b\n    print(c)\n\nsilly_func(3, 4)\nx = 6\nsilly_func(x, 8)\nFrom the point of view of the definition of the function, silly_func(a, b) thinks “Someone is going to put values into my variables a and b, and then I’ll do stuff like calculate and print”.\nFrom the point of view of code that is using the function or the invocation of the function, silly_func(3, 4) is saying “We’ll set the function’s parameter a to 3, and b parameter to 4, and then let the function do its thing”.\nsilly_func(3, 4)\n\nNote that the values 3 and 4 are called the arguments of the invoked-function silly_func(3, 4).\n\nFunctions can use its parameter variables just like any other variable and change its value, as in:\ndef crazy_func(p, q):\n    print(p)\n    p = p + 3*q       # We're changing p here\n    print(p)\n    r = p + q\n    print(r)\n\nx = 6\ny = 7\ncrazy_func(x, y)\nBecause the value in x gets copied into the variable p, the value in x does not get changed even though the function changes the value in p.\n\n\n\n\n\n\n\nExercise 2.17\n\n\n\nJust by reading the above program, can you tell what the above program prints? The above question is for you understand the execution of the program and you don’t need to submit a written answer. However, it is encouraged that you try it to fully-understand the execution of the above program and to confirm your result.\nThe following portion of the exercise is required for submission of this exercise:\n\nImplement the above program in my_func_example10.py.\nSubmit your program my_func_example10.py."
  },
  {
    "objectID": "python_primer/unit1/modules/module2.html#calling-functions-from-functions",
    "href": "python_primer/unit1/modules/module2.html#calling-functions-from-functions",
    "title": "Module 2: Functions",
    "section": "2.10 Calling functions from functions",
    "text": "2.10 Calling functions from functions\nThe code inside functions can be like regular code that’s outside functions.\nIn particular, code inside functions can call (invoke) other functions.\nFor example:\ndef increment(a):\n    b = a + 1\n    return b\n\ndef increment_twice(c):\n    d = increment(c)\n    e = increment(d)\n    return e\n\nx = 5\ny = increment_twice(x)\nprint(y)\n\n\n\n\n\n\nNote\n\n\n\n\nThe program starts execution at the line\nx = 5\nThen, when increment_twice(x) is called, we enter the function increment_twice() with the variable c set to 5 (copied from x).\nThe next line in there\nd = increment(c)\nresults in a call to increment() with the value 5 copied into parameter a.\nThen, the code in increment() executes, resulting in 6 being returned.\nThe returned value 6 is stored in d.\nThen increment() is called again with the value in d. (now 6) copied into a.\nThe code in increment() executes resulting in 7 returned.\nExecution continues in the increment_twice() function and the value 7 is stored in e.\nFinally increment_twice()completes execution and returns the value in e, which is 7.\nThis value is stored in y,\nExecution continues from there to the print.\n\n\n\nIn addition, observe the following:\n\nWe can shorten the above code by writing:\ndef increment(a):\n    return a + 1\n\ndef increment_twice(c):\n    return increment(increment(c))\n\nx = 5\ny = increment_twice(x)\nprint(y)\nNotice that one can return the result of an expression:\nreturn a + 1\nIn this case, the calculation is an arithmetic expression.\nOne can also have the result of a function call itself be returned:\ndef increment_twice(c):\n    return increment(increment(c))\nAfter, it’s possible to do this:\nprint( increment(increment(c)) )\nHere, the result of the inner increment()call\nprint( increment(increment(c)) )\nis sent again to increment():\nprint( increment( ... ) )\nIn the same vein, we can, instead of printing, execute a return:\nreturn increment(increment(c))\n\n\n\n\n\n\n\nTip\n\n\n\nYou do NOT have to use such shortcuts. Some shortcuts are an advanced topic and may in fact make your code harder to read, and harder to fix mistakes in.\n\n\n\n\n\n\n\n\nExercise 2.33\n\n\n\nConsider the following program:\ndef decrement(a):\n    return a - 1\n\ndef subtract(a, b):\n    for i in range(0, a):\n        b = decrement(b)\n    return b\n\nprint(subtract(5, 9))\nprint(subtract(3, 13))\n\nType up the above in my_subtraction.py.\nExecute the program my_subtraction.py and examine the output.\nSubmit your program my_subtraction.py.\n\nRecommended but not required for submission in this exercise: As with other tracing exercises this is also optional and in this particular case a bit long, but worth doing because it will help your understanding. Try tracing the execution step-by-step in a separate document."
  },
  {
    "objectID": "python_primer/unit1/modules/module2.html#a-function-that-calls-itself",
    "href": "python_primer/unit1/modules/module2.html#a-function-that-calls-itself",
    "title": "Module 2: Functions",
    "section": "2.12 A function that calls itself",
    "text": "2.12 A function that calls itself\nThis is a somewhat advanced topic (not on any exam or assignment!).\nWe will only present a simple example only so that you see what it’s like.\nConsider the following example:\ndef factorial(n):\n    # print(n)\n    if n == 1:\n        return 1\n    else:\n        m = factorial(n-1)\n        return n * m\n\nprint(factorial(5))\nprint(factorial(10))\n\n\n\n\n\n\nExercise 2.40\n\n\n\n\nType up the above in my_factorial.py.\nRemove the # symbol to allow print(n) statement to return the value of n.\nExecute the program my_factorial.py.\nSubmit your program my_factorial.py.\n\nRecommended but not required for submission in this exercise: Try tracing through what happens when factorial(5) is called.\n\n\nLet’s point out:\n\nYes, it’s allowed for a function to call itself.\nSuch a function is called a recursive function, and the resulting behavior is called recursion.\nThe above example computes numbers like       1 × 2 × 3 × 4 × 5 × = 120  (This ascending multiplication is called factorial.)\nFor recursion to work, the successive calls to itself have to end so that we don’t get the infinity of barbershop mirrors.\nIn the above case, n eventually becomes 1. In this case, there’s no further call to itself.\nRecursion is hard to understand, and will be featured in later courses after you’ve got more programming under your belt.\nSurprisingly, many problems are solvable elegantly and efficiently using recursion.\nIt is possible to do recursion improperly, in which case a program is set up to recurse forever. In this case, Python will give up after too many recursions."
  },
  {
    "objectID": "python_primer/unit1/modules/module2.html#inscribed-geometric-figures-as-art",
    "href": "python_primer/unit1/modules/module2.html#inscribed-geometric-figures-as-art",
    "title": "Module 2: Functions",
    "section": "2.13 Inscribed geometric figures as art",
    "text": "2.13 Inscribed geometric figures as art\nOf course we’re going to try and use functions and drawing.\nConsider this program:\nimport math\nfrom drawtool import DrawTool\n\ndt = DrawTool()\ndt.set_XY_range(-1,1, -1,1)\ndt.set_aspect('equal')\n\ndef draw_circle_in_square(side):\n    radius = side/2\n    dt.set_color('r')\n    dt.draw_circle(0,0, radius)\n    return radius\n\ndef draw_square_in_circle(radius):\n    side = math.sqrt(2) * radius\n    dt.set_color('b')\n    dt.draw_rectangle(-side/2, -side/2, side, side)\n    return side\n\nside = 1\ndt.draw_rectangle(-side/2, -side/2, side, side)\n\nn = 5\nfor i in range(n):\n    radius = draw_circle_in_square(side)\n    side = draw_square_in_circle(radius)\n\ndt.display()\n\n\n\n\n\n\nExercise 2.42\n\n\n\nDownload drawtool.py and circle_square.py and run the latter to get \nThen do the following:\n\nChange n to n = 20 in the program circle_square.py.\nExecute the program circle_square.py.\nSubmit your program circle_square.py along with drawtool.py.\n\nRecommended but not required for submission in this exercise: Perhaps experiment with colors. Try to read the functions and figure out, not so much the calculation, as what they’re doing.\n\n\nAt first, this looks like a simple exercise in geometric art, or a depiction of the “evil eye” but there’s more to it:\n\nNotice the construction:\n\nWe start with a square.\nThen we inscribe the biggest possible circle that’ll fit inside that square.\nNow we find the biggest possible square that’ll fit inside the recently drawn circle.\nThen the square inscribed in that circle, and so on.\n\nInstead of just using circles and squares, one can use a square first, then a pentagon, then a hexagon, and so on.\nThe result is something that Kepler worked on a long time ago. See this article\nThe historical significance is this:\n\nEver since the Greeks, polygons and circles have held special significance.\nSo, something like this had an almost religious significance.\nKepler then used a similar idea for solids to expound (an entirely wrong) theory of planetary motion.\nTo his credit, he realized he was wrong when shown higher quality data (from Tycho Brahe), and used the data to fit ellipses.\nThis was the beginning of the modern understanding of planetary motion, later mathematically solved by Isaac Newton."
  },
  {
    "objectID": "python_primer/unit1/modules/module2.html#when-things-go-wrong",
    "href": "python_primer/unit1/modules/module2.html#when-things-go-wrong",
    "title": "Module 2: Functions",
    "section": "2.14 When things go wrong",
    "text": "2.14 When things go wrong\nIn each of the exercises below, first try to identify the error just by reading. Then type up the program to confirm, and after that, fix the error.\n\n\n\n\n\n\nExercise 2.43\n\n\n\ndef square_it(x):\n    y = x * x\n\na = 5\nb = square_it(a)\nprint(b)\nIdentify and fix the error in my_error1.py.\n\n\n\n\n\n\n\n\nExercise 2.44\n\n\n\ndef bigger(x,y)\n    if x &gt; y:\n        return x\n    else:\n        return y\n\nprint(bigger(4,5))\nIdentify and fix the error in my_error2.py.\n\n\n\n\n\n\n\n\nExercise 2.45\n\n\n\ndef find_smallest(A):\n    smallest = 1000\n    for k in A:\n        if k &lt; smallest:\n            smallest = k\n    return smallest\n\nB = [2, 1, 4, 3]\nprint(find_smallest(B))\nDoes the above program work? What is the reasoning behind the line smallest = 1000? What would go wrong if you removed it altogether? Can you create a list (change the data in B) which will cause the function to fail to find the smallest number. Fix the issue in my_error3.py. ::: –&gt;"
  },
  {
    "objectID": "python_primer/unit0/editor.html",
    "href": "python_primer/unit0/editor.html",
    "title": "Installing an Editor",
    "section": "",
    "text": "Getting Started with Your Coding Journey"
  },
  {
    "objectID": "python_primer/unit0/editor.html#understanding-the-basics",
    "href": "python_primer/unit0/editor.html#understanding-the-basics",
    "title": "Installing an Editor",
    "section": "Understanding the Basics",
    "text": "Understanding the Basics\nIn the realm of programming, your choice of an editor is pivotal. It serves as your creative hub, where your code takes shape. Here’s a brief overview of key features editors bring to the table:\n\nText Editing: Core to any editor is the ability to write, edit, and organize code. Look for features like syntax highlighting, auto-indentation, and code completion for an enhanced coding experience.\nCode Execution: Some editors go beyond editing by enabling interactive code execution, which is handy for data analysis and experimentation.\nExtensions and Plugins: Editors are highly customizable. Enhance functionality by installing extensions or plugins tailored to your needs, adding Python-specific tools or themes.\nIDEs (Integrated Development Environments): Editors offer a complete development environment, including debugging and version control integration.\n\nFor your CS1012 course, we recommend Thonny as the primary choice, with Spyder as a valuable alternative:\n\nThonny: Thonny is a beginner-friendly Python IDE, designed to make it easy to get started with programming. It comes with a simple interface and integrated tools for package management.\nSpyder: Spyder is a powerful IDE for scientific computing and data analysis. It provides features like an interactive console, variable explorer, and integrated help, making it a solid alternative to Thonny.\n\nLet’s dive into the installation process:\n\nSelect an Option Appropriate for Your Operating System\n\n\nMacOS:\n\nStep 1: Install Thonny for Mac\nStep 2: Install Spyder for Mac\n\n\n\nWindows:\n\nStep 1: Install Thonny for Windows\nStep 2: Install Spyder for Windows\n\nChoose Thonny as your primary choice for its simplicity, especially if you’re new to coding. However, if you prefer a more feature-rich environment, Spyder is an excellent alternative.\nFollow the respective installation instructions and embark on your coding journey with confidence!\nOnce you have your preferred editor installed, you’re ready to start coding. Happy exploring!"
  },
  {
    "objectID": "python_primer/unit0/guides/computerese.html",
    "href": "python_primer/unit0/guides/computerese.html",
    "title": "Instructions for developing computer usage-competency",
    "section": "",
    "text": "Select an Option Appropriate for Your Operating System\n1. MacOS\n2. Windows"
  },
  {
    "objectID": "python_primer/unit0/guides/thonny-windows.html",
    "href": "python_primer/unit0/guides/thonny-windows.html",
    "title": "Thonny Installation Guide for Windows",
    "section": "",
    "text": "This guide provides a step-by-step walkthrough for installing Thonny, a user-friendly Python IDE, on your Windows computer. Thonny simplifies Python programming and is suitable for learners and developers."
  },
  {
    "objectID": "python_primer/unit0/guides/thonny-windows.html#introduction",
    "href": "python_primer/unit0/guides/thonny-windows.html#introduction",
    "title": "Thonny Installation Guide for Windows",
    "section": "",
    "text": "This guide provides a step-by-step walkthrough for installing Thonny, a user-friendly Python IDE, on your Windows computer. Thonny simplifies Python programming and is suitable for learners and developers."
  },
  {
    "objectID": "python_primer/unit0/guides/thonny-windows.html#prerequisites",
    "href": "python_primer/unit0/guides/thonny-windows.html#prerequisites",
    "title": "Thonny Installation Guide for Windows",
    "section": "Prerequisites",
    "text": "Prerequisites\nBefore you begin, ensure you have the following:\n\nA Windows computer.\nAn active internet connection.\nAdequate disk space for the installation."
  },
  {
    "objectID": "python_primer/unit0/guides/thonny-windows.html#installation-steps",
    "href": "python_primer/unit0/guides/thonny-windows.html#installation-steps",
    "title": "Thonny Installation Guide for Windows",
    "section": "Installation Steps",
    "text": "Installation Steps\n\n1. Visit Thonny’s Official Website\nGo to https://www.thonny.org/ to access Thonny’s official download page.\n\n\n\nVisit Official Website\n\n\n\n\n2. Select the Windows Download Option\nHover your mouse over the “Windows” option in the “Download version…” box and click to initiate the download.\n\n\n\nDownload Thonny\n\n\n\n\n3. Execute the Installer\nLocate the downloaded file, typically in your “Downloads” folder. Double-click the Thonny installer to run it.\n\n\n\nDownload Thonny\n\n\n\n\n4. Confirm Installation\nClick “Next” to proceed with the installation.\n\n\n\nConfirm Installation\n\n\n\n\n5. Agree to License Agreements\nAccept the license agreements by clicking “Agree.”\n\n\n\nLicense Agreement\n\n\n\n\n6. Choose Installation Location\nSelect a location for installation; the default option is acceptable.\n\n\n\nInstallation Location\n\n\n\n\n7. Select Start Menu Folder\nChoose a start menu folder; the default option is acceptable.\n\n\n\nStart Menu Folder\n\n\n\n\n8. Create Desktop Icon\nOpt to create a desktop icon for easy access. Click “Create Desktop Icon”.\n\n\n\nDesktop Icon\n\n\n\n\n9. Initiate Installation\nClick “Install” to start the installation process.\n\n\n\nInstall Thonny\n\n\n\n\n10. Completion\nOnce the installation is complete, click “Finish.”\n\n\n\nInstallation Complete\n\n\n\n\n11. Optional Cleanup\nConsider moving the installer file to the Recycle bin if desired.\n\n\n\nMove to Recycle bin\n\n\n\n\n12. Launch Thonny\nThonny is now installed on your computer. Open the Thonny editor by clicking on the desktop icon. \n\n\n13. Verification\nConfirm the successful installation by viewing the Thonny screen window.\n\n\n\nVerification"
  },
  {
    "objectID": "python_primer/unit0/guides/thonny-windows.html#conclusion",
    "href": "python_primer/unit0/guides/thonny-windows.html#conclusion",
    "title": "Thonny Installation Guide for Windows",
    "section": "Conclusion",
    "text": "Conclusion\nCongratulations! Thonny is successfully installed on your Windows computer.\nBegin your coding journey with Thonny, and for additional guidance, consult the official documentation at https://docs.thonny.org/.\nIf you encounter any issues or have questions, feel free to seek assistance from the Thonny community or refer to the documentation for troubleshooting tips."
  },
  {
    "objectID": "python_primer/unit0/guides/writing-your-first-program.html",
    "href": "python_primer/unit0/guides/writing-your-first-program.html",
    "title": "Instructions for typing and running your first program",
    "section": "",
    "text": "We will now have you type, run, and save your first computer program.\n\n\n\n\n\n\nNote\n\n\n\n\nPrograms are typed in using your computer’s keyboard, just as you would type in an email or text document.\nAnd just as the “thing you are typing into” is different for email and for text-editing, there is a different “thing” to type programs into.\nThe typing is one part of getting a program. If you just type your program, it will just be sitting there on your computer. But you want to go the next step and run (or, execute, as we say) the program. Typing and not-running is loosely analogous to typing an email but not sending it (the email will just remain in composed-form, but go nowhere). Similarly, typing text into Word doesn’t mean it gets “published”.\nThe “thing” into which you type and run your program is called a code editor or an IDE (Integrated Development Environment, a mouthful).\nWe are going to give you the option of using one of two code editors, Thonny or Spyder. Think of them as apps that help you type and run programs.\n\n\n\n\n\nChoose between:\n\nMac (Option A): Helloworld for Mac users using Thonny\nMac (Option B): Helloworld for Mac users using Spyder\nWindows (Option A): Helloworld for Windows users using Thonny\nWindows (Option B): Helloworld for Windows users using Spyder"
  },
  {
    "objectID": "python_primer/unit0/guides/writing-your-first-program.html#objectives",
    "href": "python_primer/unit0/guides/writing-your-first-program.html#objectives",
    "title": "Instructions for typing and running your first program",
    "section": "",
    "text": "We will now have you type, run, and save your first computer program.\n\n\n\n\n\n\nNote\n\n\n\n\nPrograms are typed in using your computer’s keyboard, just as you would type in an email or text document.\nAnd just as the “thing you are typing into” is different for email and for text-editing, there is a different “thing” to type programs into.\nThe typing is one part of getting a program. If you just type your program, it will just be sitting there on your computer. But you want to go the next step and run (or, execute, as we say) the program. Typing and not-running is loosely analogous to typing an email but not sending it (the email will just remain in composed-form, but go nowhere). Similarly, typing text into Word doesn’t mean it gets “published”.\nThe “thing” into which you type and run your program is called a code editor or an IDE (Integrated Development Environment, a mouthful).\nWe are going to give you the option of using one of two code editors, Thonny or Spyder. Think of them as apps that help you type and run programs.\n\n\n\n\n\nChoose between:\n\nMac (Option A): Helloworld for Mac users using Thonny\nMac (Option B): Helloworld for Mac users using Spyder\nWindows (Option A): Helloworld for Windows users using Thonny\nWindows (Option B): Helloworld for Windows users using Spyder"
  },
  {
    "objectID": "python_primer/unit0/guides/writing-your-first-program.html#macos-users",
    "href": "python_primer/unit0/guides/writing-your-first-program.html#macos-users",
    "title": "Instructions for typing and running your first program",
    "section": "macOS Users",
    "text": "macOS Users\n\nOption A: Helloworld in Thonny\n\n\n\n\n\nOption B: Helloworld in Spyder"
  },
  {
    "objectID": "python_primer/unit0/guides/writing-your-first-program.html#windows-users",
    "href": "python_primer/unit0/guides/writing-your-first-program.html#windows-users",
    "title": "Instructions for typing and running your first program",
    "section": "Windows Users",
    "text": "Windows Users\n\nOption A: Helloworld in Thonny\n\n\n\n\n\nOption B: Helloworld in Spyder"
  },
  {
    "objectID": "python_primer/unit0/guides/stopping.html",
    "href": "python_primer/unit0/guides/stopping.html",
    "title": "Instructions for stopping a running program",
    "section": "",
    "text": "As you will see, it is easy to write a program that runs forever or “gets stuck in an endless loop”.\nSome kinds of “endless” programs will crash on their own because they use up hidden resources on your laptop, which means the operating system (Mac, Windows) will intervene.\nBut it’s equally possible to write a harmless program that merely either just “waits for the user” or is in an endless loop.\nIn either case, it’s very useful to be able to stop a program from continuing to execute.\nThonny users: Thonny already has an easy way to do this from the Run menu: simply click on Interrupt Execution or type control-c (the control key and the c key simultaneously).\nSpyder users: Stopping a running program is a bit more complicated in Spyder because Spyder behaves differently depending on which part of Spyder “has the focus”.\nStep 1: \nBy default, when you write code in Spyder, it’s in the window that says the name of the file (on your screen, you may have chosen for the layout to look slightly different where the file is on the right, or on the bottom or on the top, but the location doesn’t matter for this).\nAs you write code, the outline of that area (called a window) has what is called “focus”, in that when you type something, even ctrl+c, Spyder believes it is meant for that window.\nYou can tell which window has focus because Spyder will outline it in a faint blue line. We’ve drawn in some red arrows to help you see the outline.\nStep 2: \nIf you move your cursor to a different “window”, Spyder will then highlight that window’s outline in a slightly brighter blue to let you know you’ve moved your cursor to a different area. In order to stop a program, the “focus” must be on the output window, called the “IPython Console”, instead of any other window (like the window in which you type your code).\nWe’ve drawn in some more red arrows to highlight Spyder outlining the IPython Console in a lighter blue.\nStep 3: \nAll you need to do to give the IPython Console “focus”, is to click anywhere in that window. Then, you’ll notice that the outline of the window changes slightly. The IPython Console window will be outlined in a faint blue, and the other windows will no longer be outlined.\nWe’ve drawn in some red arrows to show what it looks like when a window has focus (on the right), and some green arrows (on the left) to show what it looks like when a window doesn’t have focus.\nStep 4: \nOnce you’ve clicked anywhere in the IPython Console Window (again, the output window), then, once you press ctrl+c, your program will terminate. If the IPython Console doesn’t have focus when you press ctrl+c, it won’t know you mean to terminate the program, and so it will ignore the ctrl+c."
  },
  {
    "objectID": "python_primer/unit0/guides/thonny-mac.html",
    "href": "python_primer/unit0/guides/thonny-mac.html",
    "title": "Thonny Installation Guide for macOS",
    "section": "",
    "text": "This guide will take you through the step-by-step process of installing Thonny, a user-friendly Python IDE, on your macOS system. Thonny simplifies Python programming and is ideal for learners and developers alike."
  },
  {
    "objectID": "python_primer/unit0/guides/thonny-mac.html#introduction",
    "href": "python_primer/unit0/guides/thonny-mac.html#introduction",
    "title": "Thonny Installation Guide for macOS",
    "section": "",
    "text": "This guide will take you through the step-by-step process of installing Thonny, a user-friendly Python IDE, on your macOS system. Thonny simplifies Python programming and is ideal for learners and developers alike."
  },
  {
    "objectID": "python_primer/unit0/guides/thonny-mac.html#prerequisites",
    "href": "python_primer/unit0/guides/thonny-mac.html#prerequisites",
    "title": "Thonny Installation Guide for macOS",
    "section": "Prerequisites",
    "text": "Prerequisites\nBefore you start, make sure you have the following:\n\nA macOS computer.\nAn active internet connection.\nAdequate disk space for the installation."
  },
  {
    "objectID": "python_primer/unit0/guides/thonny-mac.html#installation-steps",
    "href": "python_primer/unit0/guides/thonny-mac.html#installation-steps",
    "title": "Thonny Installation Guide for macOS",
    "section": "Installation Steps",
    "text": "Installation Steps\n\n1. Visit Thonny’s Official Website\nGo to https://www.thonny.org/ to access Thonny’s official download page.\n\n\n\nVisit Official Website\n\n\n\n\n2. Select the macOS Download Option\nHover your cursor over the “Mac” option in the “Download version…” box and click to initiate the download.\n\n\n\nDownload Thonny\n\n\n\n\n3. Execute the Installer\nLocate the downloaded file, typically in your “Downloads” folder. Double-click the Thonny installer and click “Allow” if prompted.\n\n\n\nRun Installer\n\n\n\n\n4. Confirm Installation\nFollow the on-screen instructions. Click “Continue” and agree to the license agreements.\n\n\n\nFollow the Installation Wizard\n\n\n\n\n\nLicense Agreement\n\n\n\n\n5. Choose Installation Destination\nSelect a destination for installation; the default option is acceptable.\n\n\n\nInstallation Destination\n\n\n\n\n6. Initiate Installation\nClick “Install” and allow the installation process to complete.\n\n\n\nInstall Thonny\n\n\n\n\n7. Grant Folder Access\nIf necessary, click “OK” to allow the installer access to folders.\n\n\n\nFolder Access\n\n\n\n\n8. Completion Confirmation\nClick “Close” to finalize the installation.\n\n\n\nInstallation Complete\n\n\n\n\n9. Optional Cleanup\nConsider moving the installer file to the trash if desired.\n\n\n\n10. Launch Thonny\nThonny is now installed on your computer. Open the Thonny editor by clicking on its icon.\n\n\n\n11. Initial Configuration\nUse the dropdown menu to select default options. Click “Let’s go.”\n\n\n\nInitial Configuration\n\n\n\n\n12. Verification\nConfirm the successful installation by viewing the Thonny screen window.\n\n\n\nVerification"
  },
  {
    "objectID": "python_primer/unit0/guides/thonny-mac.html#conclusion",
    "href": "python_primer/unit0/guides/thonny-mac.html#conclusion",
    "title": "Thonny Installation Guide for macOS",
    "section": "Conclusion",
    "text": "Conclusion\nCongratulations! Thonny is now successfully installed on your macOS system.\nStart coding with Thonny, and if you need more guidance, consult the official documentation at https://docs.thonny.org/.\nFor any issues or questions, feel free to seek assistance from the Thonny community or refer to the documentation for troubleshooting tips."
  },
  {
    "objectID": "python_primer/unit0/guides/computerese-windows.html",
    "href": "python_primer/unit0/guides/computerese-windows.html",
    "title": "Windows: Instructions for developing computer-usage competency",
    "section": "",
    "text": "Develop your computerese skills\nUseful screenshots and step-by-step instructions for:"
  },
  {
    "objectID": "python_primer/unit0/guides/computerese-windows.html#creating-folders",
    "href": "python_primer/unit0/guides/computerese-windows.html#creating-folders",
    "title": "Windows: Instructions for developing computer-usage competency",
    "section": "Creating folders",
    "text": "Creating folders\n\n\n\n\nStep 1\n\nTo create a new folder on your desktop (which is the main area of your computer that you see if you have nothing else open. It usually has a nice picture and a couple icons), right click on any open area on your desktop that is not occupied by an icon. You’ll then see the above image pop up, with some minor variations (you might not have “Git GUI Here” or “Git Bash Here”, but you’ll absolutely have the red circled option “new”. Keep your mouse on that option and you’ll see another menu pop up for the different options for a new thing to create:\n\n\n\n\nStep 2\n\nThe top option of the new menu shown above should say “Folder”, click on that, and it will create a new folder for you (literally named “New Folder” – unless you have other folders already called “New Folder”, in which case it will call the folder “New Folder (X)” where X is just some number based on how many other new folders you already had existing.\n\n\n\n\nStep 3\n\nAbove is what the “New Folder” should look like! Now, we’re going to rename it with the course name “cs1012”. Shown in the next step:\n\n\n\n\nStep 4\n\nRight click on the icon of the new folder that was just created, and you’ll see another menu. Again, you might not see many of the options in the image, but the only option you need is the one near the bottom that says “rename”. Click on that option, and the menu will disappear, and you’ll see the old name of the folder is highlighted in blue, meaning it is ready for you to type a new name for the folder.\n\n\n\n\nStep 5\n\nType in “cs1012”, and press enter. If you mistype it, it’s not a problem, just rename the folder again! In that case, you’ll then see “cs1012” highlighted in blue like above rather than “New Folder”.\n\n\n\n\nStep 6\n\nIf you double click on the folder we’ve created and renamed (now called “cs1012”), you’ll see a pop up called “File Explorer”, which is how Windows shows you what files and folders you have.\n\n\n\n\nStep 7\n\nThere are a couple important things to point out:\n“This folder is empty” – we’ll change that shortly.\nThen: “cs1012” – this tells us the name of the folder we are currently looking at, called the “PATH” as well as eventually what other folders are containing it (in this case, since this folder is from our desktop, all we see is cs1012. Once we make a unit0 folder and look at that, we’ll notice the “PATH” says “cs1012 &gt; unit0”, which means we’re inside “unit0”, which is inside “cs1012”, which we know was created inside the desktop).\nHere’s what we need to click on to create our folders! First, click the “Home” button, and you’ll then see the rest of the options shown in the image, like “New Folder”, which is what we want to click on next! It will create a folder again called “New Folder”, which we will rename the same way we renamed cs1012.\n\n\n\n\nStep 8\n\nBy default actually, when you create a new folder it will allow you to type a name for it directly. If you clicked somewhere else just after clicking new folder, then Windows assumes you’ve given the folder the name you want. If you haven’t clicked somewhere else just yet, cool! Type the name “unit0” (with no spaces) and press enter or click somewhere else to complete the renaming.\n\nIf you clicked somewhere else before you had a chance to rename the folder, no worries, there are two ways to rename it. One shown in the image above – you’ll need to right click on the folder and choose “rename”. Or, if you look at the top bar again, just to the left of the “New Folder” button is a button called “rename”. This is the same button! (Just click the folder first once before clicking “rename”, otherwise Windows doesn’t know what item you’re trying to rename.\n\n\n\nStep 9\n\nNow that you have a unit0 folder, repeat the process (steps 7 and 8) for two more folders called “unit1” and “unit2”.\n\n\n\n\nStep 10\n\nDouble click on unit0, and it will bring us inside that folder, where we want to create another new folder, shown in the next step.\n\n\n\n\nStep 11\n\nCreate a folder called module0 (again with no spaces).\n\n\n\n\nStep 12\n\nOnce that’s all set, go down to the bottom left corner of your computer and click on that “Windows” icon. Then, click on the icon of your user (circled – really more like “squared” in red). Then, click on sign out to log out. Then, log back in and let’s find the folders we’ve just made again!\n\n\n\n\nStep 13\n\nNow that you’re logged back in, let’s start back at the desktop. Double click on the cs1012 folder.\n\n\n\n\nStep 14\n\nNow, let’s get back to module0. In the image above there are 3 separate windows to show as steps. First, double click on the “unit0” folder, which will bring you inside where you’ll see module0. Click on “module0”, and you’ll then see “This folder is empty”. Congratulations! You’re back! And don’t worry, we’ll find something to put in module0 soon!"
  },
  {
    "objectID": "python_primer/unit0/guides/computerese-windows.html#file-downloads",
    "href": "python_primer/unit0/guides/computerese-windows.html#file-downloads",
    "title": "Windows: Instructions for developing computer-usage competency",
    "section": "File downloads",
    "text": "File downloads\n\n\n\n\nStep 1\n\nTo save a file (also known as downloading a file) from a link from the module pages, find the link you want to save. Here is an example link from module0 exercise2 on learning “Computerese”.\n\n\n\n\n\n\n\n\nNote\n\n\n\n\nThis is an image we’re showing, so don’t click. It is intended to show what it would look like on your computer.\n\n\n\n\n\nStep 2\n\nRight click on the link itself, and select “save link as”. This will begin saving the file (downloading it) to your computer.\n\n\n\n\nStep 3\n\nNow, you can decide what to call the file and where to save it. The default options are usually to your desktop or downloads folders, but you can navigate directly to one of your module folders and have the file saved there!"
  },
  {
    "objectID": "python_primer/unit0/guides/computerese-windows.html#find-a-file",
    "href": "python_primer/unit0/guides/computerese-windows.html#find-a-file",
    "title": "Windows: Instructions for developing computer-usage competency",
    "section": "Find a file",
    "text": "Find a file\n\n\n\n\nStep 1\n\nTo save a file you’re working on, you can press the control key (abbreviated as “ctrl”) and the “s” key at the same time, or, you can press the actual save button that exists in most text editors. Prior to saving, you’ll notice that the file has some default name, like “untitled” (I’m using Thonny, but the same occurs in Spyder).\n\n\n\n\nStep 2\n\nThe most universal way to save a file is as shown above, via going to “File” and then “Save”. This will allow you to not only save the file but name it for the first time. You now have the opportunity to name the file, and select where you want it to be saved. For this demo, I chose my desktop, but usually you will want to save it directly to the module folder it is a part of.\n\n\n\n\nStep 3\n\nYou’ll see that the file now no longer says “untitled”, and instead shows “helloworld.py”, and the location of where the file was saved. (My desktop in this case)\n\n\n\n\nStep 4\n\nTo move a file from your desktop into a module folder, start by navigating to a module (like module0), which was shown as the last step in the set of steps for creating the folders you need! Then, click on the python file (if you’re using thonny, your python files will likely have an icon like what you see here. If you’re using spyder, they will have a different icon) and drag it into the module0 folder.\n\n\n\n\nStep 5\n\nYou’ll see that the file now is in the module0 folder instead of being shown on your desktop.\n\n\n\n\nStep 6\n\nOnce you’ve saved a file (say to your desktop), you can still pick another location for it (say to a module folder) to be saved via the “save as” option – Note! Save as creates a copy of the file you’re working on, but if you make a change to one version of the file, the other version is not updated with the changes. It’s a better idea to move a file to the new location you want (as shown in step 5) than it is to use save as so that you don’t end up with multiple versions of a file."
  },
  {
    "objectID": "python_primer/unit0/guides/computerese-windows.html#make-a-pdf",
    "href": "python_primer/unit0/guides/computerese-windows.html#make-a-pdf",
    "title": "Windows: Instructions for developing computer-usage competency",
    "section": "Make a pdf",
    "text": "Make a pdf\n\n\n\n\nStep 1\n\nIn whatever program you use to write your answers to modules (Notepad, Microsoft Word, Google Docs, etc..), once you’ve completed writing the answers to a module, we want to convert it to a .pdf file for submission (note, pdf files cannot be edited easily once created, so if you make changes to your text file after creating your pdf, you’ll need to repeat this process to create a new pdf with the updated changes you made to your text file.\n\n\n\n\nStep 2\n\nIn Notepad, click on File, and then Print.\n\n\n\n\nStep 3\n\nYou will then see a pop up similar to what you just saw above. You will want to select whatever option mentions “convert to pdf” or “print to pdf”. In this case it’s called “Microsoft Print to PDF”. Rather than this printing out your document, it will create a .pdf file for you.\n\n\n\n\nStep 4\n\nPress okay, and then give you pdf file a name (it will always be moduleX) where X is the number of the current module. In this case, I’ve named it module0. You do not need to call it “module0.pdf”, Windows will add the “.pdf” for you. In fact, if you do type it, you might find your file is created as “module0.pdf.pdf”. (Fortunately if that happens you can rename the file!)\n\n\n\n\nStep 5\n\nYou will now see the pdf file created in whatever folder it was saved to – in this case I saved mine to my desktop. PDF files usually open in an internet browser. Since my default browser is Google Chrome, my pdf file has a chrome icon.\n\n\n\n\nStep 6\n\nDouble click on the pdf file, and it will open in your default internet browser. Although the pdf creation process is pretty accurate, it’s always a good idea to open your pdf file and read it through to make sure everything looks the way you expect."
  },
  {
    "objectID": "python_primer/unit0/guides/computerese-windows.html#make-a-zip",
    "href": "python_primer/unit0/guides/computerese-windows.html#make-a-zip",
    "title": "Windows: Instructions for developing computer-usage competency",
    "section": "Make a zip",
    "text": "Make a zip\n\n\n\n\nStep 1\n\nNavigate to the folder you want to create a zip file of (note, a zip file is a ‘compressed’ folder of some files or folders. It allows you to package your files as a single unit as if you were sending a folder itself). The navigation part itself is shown in the last step of creating the folders you need for this class.\n\n\n\n\nStep 2\n\n\nClick once on the folder you want to zip (if you click twice, you’ll end up inside that folder). Then, right click on that folder and go to the “send to” option.\n\n\n\n\n\nStep 3\n\nFrom “send to”, select “Compressed (zipped) folder.”\n\n\n\n\nStep 4\n\nYou will now see a new zip file with the same name as the folder you zipped. In theory you can rename it, but you shouldn’t have to since it will take the name of the folder you zipped. If you need to rename it for any reason, you can rename it the same way we’ve renamed folders."
  },
  {
    "objectID": "python_primer/unit0/modules/module4.html",
    "href": "python_primer/unit0/modules/module4.html",
    "title": "Module 4: Integers",
    "section": "",
    "text": "Warning\n\n\n\nBefore proceeding with Module 4 you would need to install matplotlib library. Follow these guides to learn about how to install packages in Thonny on a Mac or Windows computer."
  },
  {
    "objectID": "python_primer/unit0/modules/module4.html#objectives",
    "href": "python_primer/unit0/modules/module4.html#objectives",
    "title": "Module 4: Integers",
    "section": "Objectives",
    "text": "Objectives\nBy the end of this module, for simple HelloWorld-like programs, you will be able to:\n\nCreate variable declarations.\nAssign values to variables by simple assignment, and print them out.\nDistinguish between integers in strings versus actual integers.\nDemonstrate ability to perform operations on integers for a desired output.\nSimplify expressions with constants to single value.\nEvaluate expressions with variables in them.\nConvert English descriptions of operations into expressions.\nMentally trace execution with expressions and calculations.\nMentally trace expressions and calculations inside for-loops.\nProduce desired output using for-loops and calculations.\nIdentify new syntactic elements related to the above.\n\nAnd, once we’ve worked with integers, we’ll also do some “number crunching”."
  },
  {
    "objectID": "python_primer/unit0/modules/module4.html#first-an-analogy",
    "href": "python_primer/unit0/modules/module4.html#first-an-analogy",
    "title": "Module 4: Integers",
    "section": "4.0 First, an analogy",
    "text": "4.0 First, an analogy\nSuppose we have boxes. Consider the following rules about “boxes”:\n\nEach box can store only one item.\n\n\n\nThe possible things that can be stored inside are called values.\nThus, at any given moment, a box’s value is whatever’s inside it.\nEach box has a unique name:\n\n\n\nThere is a cloning process that works like this: \n\nThe value inside one box is cloned.\nThe cloned value is placed inside another.\n\nThere is a strange shortcut notation to specify cloning: \n\nHere, the = (equals sign) does NOT mean “equals.”\nIt has been repurposed to mean “clone”, “copy,” or, in programming-language jargon, “assign”.\n\nHow to say it: “x is assigned the value in y”.\nImportant: Remember, a box can hold only one value at a time.\nThe technical term for our informal “box” is variable."
  },
  {
    "objectID": "python_primer/unit0/modules/module4.html#integer-variables",
    "href": "python_primer/unit0/modules/module4.html#integer-variables",
    "title": "Module 4: Integers",
    "section": "4.1 Integer variables",
    "text": "4.1 Integer variables\nWe’ll now start working with “boxes” (variables) that hold integers (whole numbers like 3, 17, 2097, but not numbers like 3.141).\nConsider this program:\ni = 5\nprint(i)\n\n\n\n\n\n\nExercise 4.1\n\n\n\nType up the program in my_variable_example.py. Also save the file so that it can be submitted (Remember: you need to save the appropriate files for every such “type up” exercise).\n\n\n\nNow let’s examine key parts of this program:\nFirst, i is the name of a “box” (of sorts).\nThe term used for “box” is variable.    \n⇒ i is a variable.\nTo put something in a variable, we use assignment  \n⇒ with the repurposed = (equals) sign. \nWhen we print a variable, what gets printed is its value.   \n⇒ Thus, the number 5 gets printed \nImportant: What you see on printed out is the number 5 and NOT the letter i\nThus when you see print(i)you should think:\n\n“Hmmm, the print function is going to print the contents of variable i”.\n“I wonder what’s inside i?”\n“Let me look in the program to see what was the most recent value that got written into i”.\n\n\nFor example:\ni = 5\ni = 3\nprint(i)\n\n\n\n\n\n\nExercise 4.2\n\n\n\nType up the above in my_variable_example2.py and confirm that 3 is what gets printed.\n\n\nBy way of explanation: \n\n\n\n\n\n\nExercise 4.3\n\n\n\nIs it possible to not have a value in a variable? Consider this program:\ni\nprint(i)\nType up the program in my_variable_example3.py and run it to check if there are any errors to confirm if it is possible to not have a value in a variable. Submit the program.\n\n\nThus: when you make a variable, you need to put something in it. - Next, let’s look at assignment between variables: - This is the analogue of cloning between “boxes”.\nConsider this program:\ni = 5\nj = i     # The value in i gets copied into j\nprint(j)  # Prints 5\n\nWe say, in short, “i is assigned to j”.\n\n\n\n\n\n\n\nTip\n\n\n\nWe’ve used comments above to annotate and explain.\n\nWe’ll do this often, knowing that comments are not executed.\n\n\n\n\n\n\n\n\n\nExercise 4.4\n\n\n\nConsider this program:\ni = 5\nj = i\nprint(j)\nprint(i)   # Did i lose its value?\nType up the program in my_variable_example4.py and use comments (text followed by ‘#’ symbol) to describe what happens with print(i). Include ‘Yes’ or ‘No’ at the end of the comment, # Did I lose its value? Submit the python file.\n\n\nThe above example illustrates that the value in i gets copied into the variable j, which means that the value 5 is still in the variable i.\n\n\n\n\n\n\nExercise 4.5\n\n\n\nConsider this program:\ni = 5\nj = i\nk = j\nprint(k)\nTry to identify the output of this program just by mental execution. Type up the program in my_variable_example5.py and confirm.\n\n\n\n\n\n\n\n\nExercise 4.6\n\n\n\nConsider this program:\ni = 5\nj = i\ni = 0\nk = j\nj = 0\nprint(k)\nTry to identify the output of this program just by mental execution. Type up the program in my_variable_example6.py and confirm.\n\n\n\n\n\n\n\n\nNote\n\n\n\nA copied value does not change if the original is changed\n\n\nFor example, consider:\ni = 5\nj = i      # j now has 5\ni = 0      # We changed i here\nprint(j)   # j still has 5\n\nHere’s the line-by-line execution:\n\nThe first line puts the value 5 in variable i.\nThe second line copies the value in i (which is 5) into j. So j will have the value 5 as well.\nThe third line replaces the value 5 with value 0.\nj still has 5, so the fourth line will print 5.\n\n\n\n\n\n\n\n\nTip\n\n\n\n0 is an actual value, and is not “no value” or “nothing”.\n\n\n\n\n\n\n\n\nExercise 4.8\n\n\n\nConsider this program:\nType up the following lines of code in my_variable_example7.py:\ni = 5\nj = 6      \n\n# Add code between here\n\n# and here.\n\nprint(i)   # should print 6\nprint(j)   # should print 5\nAdd some lines of code with the objective of swapping the values in variables i and j. You will need a third variable to be used as a holding place. Thus, without directly assigning the number 5 to j or the number 6 to i, write code using a third variable to achieve the desired swapping of values."
  },
  {
    "objectID": "python_primer/unit0/modules/module4.html#integer-operators",
    "href": "python_primer/unit0/modules/module4.html#integer-operators",
    "title": "Module 4: Integers",
    "section": "4.2 Integer operators",
    "text": "4.2 Integer operators\nLet’s examine the familiar arithmetic operators +, -, *, /\n\nAddition: +\nSubtraction: -\nMultiplication: *\nDivision: /\n\nConsider this example with addition:\ni = 5\nj = 6\nk = i + j\nprint(k)\n\nWhat happens during execution: \n\nThe values in i and j are added.\nThe resulting value goes into variable k.\n\nA long-ish way of saying this aloud:      \n⇒ “k is assigned the sum of the values of i and j”\nA shorter way:      \n⇒ “k is assigned i plus j”\n\nHere’s an example with multiplication and division:\ni = 5\nj = 6\nk = i * j\nprint(k)      # prints 30\nm = i / j\nprint(m)      # what does this print?\nn = i // j\nprint(n)      # what does this print?\n\n\n\n\n\n\nExercise 4.10\n\n\n\nType up the above in my_variable_example8.py. Run the program and answer the following questions for yourself:\n\nWhat is the value of n printed?\nChange i to 21. What is the value of n printed ?\nSubmit your code with i set to 5.\n\n\n\nInteger division: - In math, we learned that 1/4 = 0.25 and 21/6 = 3.5.\n\nThis remains true in Python when we do something like\n      i = 21\n      j = 6\n      m = i / j\nOn the other hand, if we wish to perform integer division, we can use the integer division operator:\n      i = 21\n      j = 6\n      m = i // j\nThat is, the result is truncated down to the nearest integer.\n\nExample: 3 // 2 becomes 1 because 1.5 gets truncated to 1.\nExample: 15 // 4 becomes 3 because 3.75 gets truncated to 3.\n\nInteger division is useful when we want to do integer arithmetic."
  },
  {
    "objectID": "python_primer/unit0/modules/module4.html#expressions-and-operator-precedence",
    "href": "python_primer/unit0/modules/module4.html#expressions-and-operator-precedence",
    "title": "Module 4: Integers",
    "section": "4.3 Expressions and operator-precedence",
    "text": "4.3 Expressions and operator-precedence\nConsider the following program:\ni = 5\nj = 6\nk = i*j - (i+1)*(j-1)\nprint(k)\nAbout expressions:\n\nAn expression combines constants (like 1, above), and variables using operators.\nExample: i*j - (i+1)*(j-1).\nThe above expression is really equivalent to: (i*j) - ((i+1) * (j-1)). Here, we added some clarifying parentheses.\nOperator precedence allows us to reduce the number of clarifying parentheses.\nPython precedence follows standard precedence in math: /, *, +, -.\nYou might remember the precedence via the acronyms BODMAS or PEMDAS. (Look it up.)\nThe above expression is NOT the same as: i*j - i+1*j-1.\nAlso, note the change of whitespace:\n\nWe could have written k = i * j - (i + 1) * (j - 1).\nBut k = i*j - (i+1)*(j-1) is easier to read.\n\n\nLet’s dive a bit deeper into precedence and do some examples:\n\nWe’ll use the four operators: add or +, subtraction or -, multiplication or *, and division or /.\nWe’ll use plain ol’ numbers to illustrate.\n\n\n\n\n\n\n\nTip\n\n\n\nThe key to working them out is to use extra parentheses in the right way.\n\n\n\nThe PEMDAS rule:\n\nFirst apply Parentheses, then Exponents, then Multiplication and Division, and then Addition and Subtraction.\n\nExample: 3 + 2*4\n\nHere, we apply 2*4 to give 8\nThen do 3 + 8 to give 11.\nApplying extra parenthesis to 3 + (2*4) makes it clear.\n\nExample: 3(24/3-23)\n\nFirst, work out what’s inside the parens (the P of PEMDAS):\n\nDo div to 24/3 and mult to 2*3 to get (8 - 6)\nThis gives (2)\n\nNow go out and see that we need to do 3*(2)\nWhich gives 6.\nUsing extra parens and spacing makes it clear: 3 * ( (24/3) - (2*3) )\n\nExample: 1 + ( (4 - 1) * 8) / 6\n\nDo the innermost parens first: (4 -1) = 3\nWhich results in 1 + (3 * 8) / 6\nThen the next parens to give: 1 + 24/6\nThen the D in PEMDAS: 1 + 4\nResult: 5\n\n\n\n\n\n\n\n\nExercise 4.12\n\n\n\nUse the PEMDAS rule to evaluate mentally or by hand the expression, i*j - i+1*j-1 when i = 7 and j = 3. Write a Python program my_expression_example1.py to evaluate the expression and print your answer."
  },
  {
    "objectID": "python_primer/unit0/modules/module4.html#objectives-1",
    "href": "python_primer/unit0/modules/module4.html#objectives-1",
    "title": "Module 4: Integers",
    "section": "Objectives",
    "text": "Objectives\nBy the end of this module, for simple programs with real numbers, you will be able to:\n\nCreate variable declarations for variables.\nAssign values to variables by simple assignment, and print them out.\nDemonstrate ability to perform operations for a desired output.\nEvaluate expressions with variables in them.\nConvert English descriptions of operations into expressions.\nMentally trace execution with expressions and calculations.\nMentally trace expressions and calculations inside for-loops.\nProduce desired output using for-loops and calculations.\nIdentify new syntactic elements related to the above."
  },
  {
    "objectID": "python_primer/unit0/modules/module4.html#what-are-real-numbers",
    "href": "python_primer/unit0/modules/module4.html#what-are-real-numbers",
    "title": "Module 4: Integers",
    "section": "6.0 What are real numbers?",
    "text": "6.0 What are real numbers?\nLet’s start with some math facts:\n\nWhole numbers like 3, 42 and 1024 are integers.  (As an aside: integers include 0 and the negative ones like -2 or -219).\nThe collection of all integers is infinite in size.\nBut integers are limited because some operations on integers do not yield integers:\n\n30 ÷ 5 gives 6, which is an integer.\nBut 31 ÷ 5 is not an integer, yet it’s a quantity.\n\nReal numbers include all the integers but also numbers like 3.141, and -615.2368.\nThe collection of all real numbers is also infinite. Interestingly, it’s a bigger kind of infinite (but that’s a rather subtle math argument outside the scope of this course).\nThe term real is just that: a term that’s came about historically to describe all these numbers.\nYou might wonder: is there any other kind of number?\nTurns out: yes, there a fascinating (and extraordinarily useful) kind of number called an imaginary number, or more generally, a complex number.  (We won’t be working with these in his course.)\nWhat does one do with real numbers?\n\nThe same operations: +, -, *, /\nWhat’s nice is that applying these to real numbers will always result in real number results.\n\nFor example:\nx = 3.14\ny = 2.718\nz = x + y\nprint(z)\n\nw = z * (x + y) / (x - y)\nprint(w)\n\n\n\n\n\n\n\nExercise 6.1\n\n\n\nType up and submit the above in my_real_example1.py. Confirm that the operations on real number should output a real number in this exercise.\n\n\n\n\n\n\n\n\nNote\n\n\n\n\nYou might have seen 5.8580000000000005 as the value of z printed out.\nHowever, you might also have seen something slightly different because of the approximate nature of such calculations, a limitation of computer hardware.\nThese tiny errors are tiny indeed, but vary slightly from one computer to another, generally occuring around the 16th decimal place: 0.00000000000000001\nDo we need to worry about this? Only if we are engaged in complex scientific calculations.\nOccasionally, however, it can matter. For example, if two people calculate mortgage interest (with real consequences) slightly differently, it could lead to a legal conflict.\n\n\n\nQuick review of some relevant math:\n\nOne kind of operation that’s useful is power.\nWe write 26 to mean 2 x 2 x 2 x 2 x 2 x 2 (six times)\nIt’s easy to see that you could make this work for real numbers that get multiplied: 2.566 = 2.56 x 2.56 x 2.56 x 2.56 x 2.56 x 2.56\nBut could you do 26.4? Turns out, yes, you can do this even if it’s not easy to see or intuit. (We would expect 26.4 to be larger than 26 and smaller than 27, which it is.)\nThe next step then is to allow numbers like 2.566.4.\nIn fact, you can take any real number as the mantissa (the 2.56 in 2.566.4) and any real number as the exponent (the 6.4 in 2.566.4).\nLet’s put this in code and introduce a new operator to raise a number to a power, as in 2.566.4).\nx = 2 ** 6\nprint(x)\n\ny = 2.56 ** 6.4\nprint(y)\n\n\n\n\n\n\n\nExercise 6.2\n\n\n\nType up the above in my_real_example2.py.\n\nDon’t submit it yet.\nNow consider the equation 2.56z = y. You need to use Python to provide a real number input to the value z such that the value of y becomes 400.\nType up you lines of Python code to compute the value of y and include them below what you typed already.\nCheck if the value of y is approximately 400 by initalizing the value of z = 6.4.\nYou don’t have to be accurate. Try chaning the value of z to a number greater than 6.4 and then lower than 6.4 to see how close you can get to 400.\nAgain, don’t worry about the correct answer and focus on the syntax and the outout of your program.\nSubmit hte program my_real_example2.py with the value of x that in your attempts gets the value of y closest to 400.\n\n\n\nLet’s explore further:\n\nThe technical term for “what is x that would make 2.56x = 400?” is logarithm.\nWe would say: x = log2.56(400).  (Read this as: x is equal to log of 400 to the base 2.56).\nWe can calculate this directly:\nimport math\n\nx = math.log(400, 2.56)\nprint(x)\nHere we’ve introduced some new concepts: \nJust like you can ask Python to calculate logarithms using math.log, you can do other kinds of “calculator” functions conveniently.\nExample: math.sqrt for square roots.\n\n\n\n\n\n\n\nExercise 6.3\n\n\n\nCompute the square root of 2 in this exercise.\nIn my_real_example3.py, fill in code below that prints the square root of the number 2 (and only the square root - just one number).\nimport math\n\n# Write a line of code here\n\nprint(x)"
  },
  {
    "objectID": "python_primer/unit0/modules/module4.html#going-from-reals-to-integers-and-strings",
    "href": "python_primer/unit0/modules/module4.html#going-from-reals-to-integers-and-strings",
    "title": "Module 4: Integers",
    "section": "6.1 Going from reals to integers and strings",
    "text": "6.1 Going from reals to integers and strings\nConsider this program:\nimport math\n\nx = 3.141\nprint('x=' + str(x))\n\ni = math.floor(x)\nj = math.ceil(x)\nprint('Rounding down x gives ' + str(i))\nprint('Rounding up x gives ' + str(j))\n\n\n\n\n\n\nTip\n\n\n\n\nThe floor function identifies the integer part of a number like 3.141, in this case 3.\nceil identifies the next higher integer, in this case 4.\nSo, any number with digits after the decimal point like 3.141 lies between its floor and ceiling.\n\n\n\n\n\n\n\n\n\nExercise 6.5\n\n\n\nType the above in my_real_example4.py.\n\nDon’t submit it yet.\nAdd additional lines of code to print the floor and ceiling of 2.718 in the same way that the floor and ceiling of 3.141 were printed above.\nThe lines of code shown below are incomplete.\nYou should complete the additional lines of the code required in this exercise, and run the program to make sure you are getting the output desired.\nSubmit my_real_example4.py\n\ny = 2.718\nprint('y=' + str(y))\n\nm = math.floor()\nn = math.ceil()\nprint('Rounding down y gives ' + str(m))\nprint('Rounding up y gives ' + str(n))\n\n\nLet’s point out a few things: \nNext, getting real numbers as input:\nimport math\n\n# input always results in a string\nx_str = input('Enter a number: ')\n\n# This is how we convert a string into a real number:\nx = float(x_str)\n\n# We use str to embed a number in a string:\nprint('The square of the number you entered is: ' + str(x*x))\n\n\n\n\n\n\nNote\n\n\n\n\nWe use the int() function to convert a string representation of an integer into an actual integer ready for arithmetic, as in:\npounds_str = input('Desired flour in pounds: ')\npounds = int(pounds_str)\nounces = 16 * pounds\nprint('Flour amount in ounces: ' + ounces)\nThe equivalent for real numbers is float:\nx = float(x_str)\nWhy is it called so?\n\nObserve that we can write the number 234.56 as 23.456 x 101 or as 2.3456 x 102 or as 0.23456 x 103, or to exaggerate this idea: 0.000000000023456 x 1013\nThe decimal point can thus, be “floated” around by adjusting the exponent (like 13).\nThis is called floating-point notation.\n\nSo, what does it mean to have a string representation of a number versus the actual number?\n\nFirst, consider this program:\nsome_string = '3.141'\nx = float(some_string)\n# Now we can use x in arithmetic\ny = x / 2\n\n\nWe cannot use some_string in arithmetic.\n\n\n\n\n\n\n\n\n\n\nExercise 6.6\n\n\n\nThe following does NOT work:\nx = '3.141'\ny = x / 2\nprint(y)\nType up the above program in my_real_example5.py\n\nFix it and make sure you program is running correctly.\nDon’t submit it yet.\nAdd a few lines of code to print the output of z = x * 2, correctly.\nYou should complete the additional lines of the code required in this exercise, and run the program to make sure you are getting the output desired.\nSubmit my_real_example5.py\n\n\n\nThe last exercise illustrates the strange way in which operators like + and * are repurposed for strings when used with strings:\n\nConsider this example:\ns = 'Hello'\nt = ' World'\nu = s + t\nprint(u)\nv = s * 3   # Makes 3 copies of s and concatenates them\nprint(v)    # Prints HelloHelloHello\n\n\n\n\n\n\n\nExercise 6.7\n\n\n\nType up the above in my_string_example.py, including the comments provided and submit your program.\n\n\nNow, back to real numbers.\n\n\n\n\n\n\nExercise 6.9\n\n\n\nIn my_conversion_example.py write a program that asks the user to enter a distance in kilometers, and then converts to miles and prints that number. Submit my_conversion_example.py."
  },
  {
    "objectID": "python_primer/unit0/modules/module1.html",
    "href": "python_primer/unit0/modules/module1.html",
    "title": "Module 1: A few more getting-started examples",
    "section": "",
    "text": "By the end of this module you will be able to:\n\nLearn what a comment is, and how to write them.\nWrite programs with multiple prints\nEscape sequences\nIdentify new syntactic elements.\nUnderstand case-sensitivity.\nWrite a function and examine proper indentation.\nFind and fix errors"
  },
  {
    "objectID": "python_primer/unit0/modules/module1.html#objectives",
    "href": "python_primer/unit0/modules/module1.html#objectives",
    "title": "Module 1: A few more getting-started examples",
    "section": "",
    "text": "By the end of this module you will be able to:\n\nLearn what a comment is, and how to write them.\nWrite programs with multiple prints\nEscape sequences\nIdentify new syntactic elements.\nUnderstand case-sensitivity.\nWrite a function and examine proper indentation.\nFind and fix errors"
  },
  {
    "objectID": "python_primer/unit0/modules/module1.html#comments",
    "href": "python_primer/unit0/modules/module1.html#comments",
    "title": "Module 1: A few more getting-started examples",
    "section": "1.0 comments",
    "text": "1.0 comments\nA comment is like a note-to-self that you include directly in a program as a way to explain something to yourself for later, or to someone else who reads your program.\n# This is a comment\n      # This is one too, but not recommended \n\nprint('Something')      # And so is this\nLet’s explain:\n\nA comment begins with a # and ends at the end of the line.\nAnything written as a comment is not treated by your computer as a “command” or as programming intent.\nThus, as far as programming goes, the above program is as good as:\n\nprint('Something')\n\nYou can insert comments in various places in a program: \n\n\n\n\n\n\n\nExercise 1.1\n\n\n\nUnder your unit0, create a module1 folder (if you haven’t already), and then write up the above in my_comments.py. Fix the second comment to start at the beginning of the line, and add an entirely new comment line of your own.\n\n\nSometimes one needs a comment to spill over multiple lines, as in\n# I wrote this program at midnight\n20 seconds before the deadline\nprint('Something') \nNotice the missing # in the second line of the comment.\n\n\n\n\n\n\nExercise 1.2\n\n\n\nWrite up the above in comment_error.py. Remember to save the file (and do this for every exercise in the future that involves a program)."
  },
  {
    "objectID": "python_primer/unit0/modules/module1.html#whitespace",
    "href": "python_primer/unit0/modules/module1.html#whitespace",
    "title": "Module 1: A few more getting-started examples",
    "section": "1.1 Whitespace",
    "text": "1.1 Whitespace\nConsider the following program:\nprint   (  'Hello World!'     ) \nNotice the spaces inserted in various places.\n\n\n\n\n\n\nExercise 1.3\n\n\n\nWrite up the above in whitespace_example.py and submit.\n\n\nConsider this variation\n  print('Hello World!')\n(Two spaces before print).\n\n\n\n\n\n\nExercise 1.4\n\n\n\nWrite up the above in whitespace_example2.py. Run and check if you are getting any errors.\n\n\nFinally, look at:\nprint('Hello     World!') \n(Extra spaces between Hello and World.)\n\n\n\n\n\n\nExercise 1.5\n\n\n\nWrite up the above program in whitespace_example3.py, by including 5 empty spaces between Hello and World. Run and check if you are getting any errors.\n\n\nLet’s point out a few things:\n\nSome kinds of whitespace, even if ill-advised, is permitted.\nWhen starting a line of code, proper indentation is expected, which is why we got an error when we indented the line starting with print\nThe extra spaces between Hello and World are perfectly acceptable if the goal is to print them. Printing accepts whatever spaces you want printed."
  },
  {
    "objectID": "python_primer/unit0/modules/module1.html#strings",
    "href": "python_primer/unit0/modules/module1.html#strings",
    "title": "Module 1: A few more getting-started examples",
    "section": "1.2 Strings",
    "text": "1.2 Strings\nA string in Python is a sequence of letters, digits, or symbols (like $ or *) surrounded by either\n\nA pair of double quotes, as in: \"Hello World!\"\nA pair of single quotes as in: 'Hello World!'\n\n\n\n\n\n\n\nNote\n\n\n\n\nWhichever quote you use to start a string must be used to end the string.\nThe ending quote must be on the same line as the starting quote.\nThere are special techniques to handle long strings that need to spill over multiple lines (which we’ll see below).\nThis raises some questions:\n\nIs it possible to print a single line but with multiple print statements?\nHow does one print a quote?\n\n\n\n\nFirst, note that we can use single or double quotes for different strings in the same program:\nprint('Hello')\nprint(\"World!\") \n\n\n\n\n\n\nExercise 1.6\n\n\n\nConfirm that Hello and World! get printed on two lines by writing the above in my_string_example.py\n\n\nA print statement prints the string within parenthesis and then goes to the next line of output, which is why we see World! on the next line.\nTo keep printing on the same line:\nprint('Hello', end=' ')\nprint('World!')\n\n\n\n\n\n\nNote\n\n\n\nWe’ve reverted to using single-quotes for all strings, which will be our preference.\n\n\n\n\n\n\n\n\nExercise 1.7\n\n\n\nConfirm by writing the above in my_string_example2.py.\n\n\nWe’ll now go the other way and have a single string itself contain a directive to spill over to the next line.\nprint('Hello\\nWorld!') \nNotice the backslash \\ followed by n inside the string: 'Hello\\nWorld!'\n\n\n\n\n\n\nExercise 1.8\n\n\n\nWrite up the above my_string_example3.py. Run and check if you are getting any errors.\n\n\nStrings can embed special so-called escape sequences that begin with backslash.\nThis will give us one way to print a quote:\nprint('My friend\\'s friend\\'s dog\\'s friend')\nAnother way is to use one set of quotes to delimit the string that are different from the ones used within:\nprint('My friend\\'s friend\\'s dog\\'s friend')\nprint(\"bit my friend's dog's ankle\")\nprint('who yelped \"owww\"')\nHow does one print a backslash itself? By using a double backslash:\nprint('The backslash character, \\\\, is less intimidating now')\n\n\n\n\n\n\nExercise 1.9\n\n\n\nWrite a program called practice_escaping.py that prints out\n  \"    \"   \\\\\\\n  \"    \"    \\    \n  \"\"\"\"\"\"    \\    \n  \"    \"    \\    \n  \"    \"   \\\\\\  \n\n\nAnother use of backslash: to make long strings\n\nSometimes we need to type in a really long string.\nThe following does NOT work:\n\nprint('An Ogden Nash poem:')\nprint('The camel has a single hump; \nThe dromedary, two; \nOr else the other way around. \nI’m never sure. Are you?')\n\n\n\n\n\n\n\nExercise 1.11\n\n\n\nWrite up a program called my_string_example4.py with the above program and run it. Submit the program. Observe the error the program generates to assess for yourself why the program returns the error.\n\n\n\nTo spread a single string over multiple lines, one uses a triple quote as in:\nprint('An Ogden Nash poem:')\nprint('''The camel has a single hump; \nThe dromedary, two; \nOr else the other way around. \nI’m never sure. Are you?''')\n\n\n\n\n\n\nExercise 1.12\n\n\n\nWrite up a program called my_string_example5.py with the 5-line limerick above program and run it. Observe that error the program doesn’t not generate an error. Submit the program. Compare this program with Exercise 1.11 to assess why there is no error in this program. You can discuss this program with your TA if you haven’t figured it out for yourself.\n\n\nEmpty strings: - It is possible to not have anything in a string, as in:\nprint('')\n\n\n\n\n\n\nNote\n\n\n\nThere are no letters, digits or anything between the two single quotes above.\n\n\n\nSuch a string is called an empty string.\nOdd as it may seem, empty strings are useful (we’ll see later) when you want to add strings to make a longer string."
  },
  {
    "objectID": "python_primer/unit0/modules/module1.html#case-sensitivity",
    "href": "python_primer/unit0/modules/module1.html#case-sensitivity",
    "title": "Module 1: A few more getting-started examples",
    "section": "1.3 Case sensitivity",
    "text": "1.3 Case sensitivity\nWhat if we had used uppercase P instead of lowercase p in print?\nprint('Hello World!')\n\n\n\n\n\n\nExercise 1.13\n\n\n\nWrite up the above program case_error.py using uppercase P instead of lowercase p, in print and run it. Use comments (text followed by ‘#’ symbol) to describe the error in the python-file.\n\n\nWhat if we changed the case inside a string?\nprint('helLo WoRLd!')\n\n\n\n\n\n\nExercise 1.14\n\n\n\nWrite up the above program in my_string_example6.py and run it to see if it works.\n\n\nPython is case sensitive but strings are like data inside programs, which means they can be whatever we like.\n\nThe two strings 'Hello World!' and 'helLo WoRLd!' are fine as two different strings, if that’s we want.\nHowever, Python has only one print and so it won’t recognize Print (with capital P)."
  },
  {
    "objectID": "python_primer/unit0/modules/module2.html",
    "href": "python_primer/unit0/modules/module2.html",
    "title": "Module 2: Functions: a first look",
    "section": "",
    "text": "By the end of this module, for simple HelloWorld-like programs, you will be able to:\n\nDemonstrate function calls.\nUse mental tracing to identify output without execution.\nAdd numbered comments to show an execution trace.\nIdentify and correct syntax errors related to the above objectives."
  },
  {
    "objectID": "python_primer/unit0/modules/module2.html#objectives",
    "href": "python_primer/unit0/modules/module2.html#objectives",
    "title": "Module 2: Functions: a first look",
    "section": "",
    "text": "By the end of this module, for simple HelloWorld-like programs, you will be able to:\n\nDemonstrate function calls.\nUse mental tracing to identify output without execution.\nAdd numbered comments to show an execution trace.\nIdentify and correct syntax errors related to the above objectives."
  },
  {
    "objectID": "python_primer/unit0/modules/module2.html#an-example-with-function-calls",
    "href": "python_primer/unit0/modules/module2.html#an-example-with-function-calls",
    "title": "Module 2: Functions: a first look",
    "section": "2.0 An example with function calls",
    "text": "2.0 An example with function calls\nConsider the following program:\n# define a function we'll use later\ndef print_big_M():    \n    print('*   *')\n    print('** **')\n    print('* * *')\n    print('*   *')\n    print('*   *')\n\n# define another one we'll use later\ndef print_big_O():    \n    print('*****')\n    print('*   *')\n    print('*   *')\n    print('*   *')\n    print('*****')\n\n# Print MOO using the above defined functions\nprint_big_M()\nprint_big_O()\nprint_big_O()\n\n\n\n\n\n\nExercise 2.1\n\n\n\nType up the above in animal_sounds.pyand run it. Also save the file so that it can be submitted (You will need to save the appropriate files for everysuch “type up” exercise).\n\n\nLet’s point out a few things: \n\nLet’s start by distinguishing between a function definition (which uses def and merely tells Python what the function is about), and invocation (which asks Python to execute the function at that moment).\n\nA function definition is a piece of code that begins with the word def\nA function definition is sometimes also called function declaration.\nA function definition does not execute the code immediately.\nInstead it’s like saving in one place a bunch of instructions that can be invoked with just the name of the function.\nThis saves writing lots of code if a group of code can begiven a name (in this case, a function name).\n\nA function definition has 5 elements: \nA function with a given name is defined just once.\nA function invocation merely uses the name, along with parentheses:\nprint_big_M()\nWe’ll later see examples where some things can go between the parens.\nWhile a particular function is defined once, it can be used any number of times:\n\nIn fact, that is the whole purpose of defining functions.\nEach use of a function is a single line of code, which saves us the trouble of rewriting all the code that was inside the function for each time we need it.\n\nFunction definitions also help isolate code so that one doesn’t have to see or understand what’s inside to use it.\nWe’ve already used such a function before: the print function.\n\nThe printfunction is defined internal to Python.\nWe don’t type its definition, nor do we see it.\nWe just use it as often as we like.\n\nImportant: Please pay careful attention to indentation\n\nThe line that begins with def should NOT be indented.\nOther lines that belong to the function should be indented.\nThere are other forms of indentation that we’ll point out as we proceed - they’re all important.\n\n\n\n\n\n\n\n\nExercise 2.3\n\n\n\nWrite your own animal sound that uses one function at least thrice with an exclamation mark at the end, e.g. print the big version of BAAA!. Write your code in my_pet_sound.py. Once your program is working, say the sound out aloud to celebrate. (Why not?)\n\n\nNext, let’s see how functions “work” by making a small change to the program:\ndef print_big_M():\n    print('*   *')\n    print('** **')\n    print('* * *')\n    print('*   *')\n    print('*   *')\n\ndef print_big_O():\n    print('*****')\n    print('*   *')\n    print('*   *')\n    print('*   *')\n    print('*****')\n\nprint('Step 1')\nprint_big_M()\nprint('Step 8')\nprint_big_O()\nprint('Step x')\nprint_big_O()\nprint('Step y')\n\n\n\n\n\n\nExercise 2.4\n\n\n\nType up the above in animal_sounds2.py and run it.\n\n\nLet’s explain using an analogy: \n\nWe’ll use the analogy of a house to describe a program and its parts (the functions).\nA program’s execution starts at the very top.\nIn the above case, there are a number of definitions:\n\nDefinitions are merely “processed” but not executed.\nIt’s understood that the definitions may be invoked later.\nIn our house analogy, we walk past these “rooms” to the main lobby.\n\nThe first real line of code is the print('Step 1')statement.\n\nThink of this section of code as the “main lobby”.\n\nAfter this, we see the line (also a command) print_big_M()\n\nThis is an instruction that causes the computer to “go to the print_big_M()room”.\nWe then head to that room and start executing commands in there.\n\nThus, the third command that gets executed is print('*   *')\nWe’re still in the room with more commands to go, and the next one (4th so far) is print('** **')\nContinuing, we execute the last line in the room, which will make this the 7th one executed.\nAfter we leave the “room”, and this is important, we continue execution after the invocation that brought us to the room.\n\n\n\n\n\n\n\nExercise 2.5\n\n\n\nAt which step (which step number) do we execute the last line in print_big_O? And then, at which step do we enter print_big_O the second time and print its first line? In animal_sounds3.py replace x and y with the correct step number. Use comments (text followed by ‘#’ symbol) to describe your answer."
  },
  {
    "objectID": "python_primer/unit0/modules/module2.html#calling-functions-from-other-functions",
    "href": "python_primer/unit0/modules/module2.html#calling-functions-from-other-functions",
    "title": "Module 2: Functions: a first look",
    "section": "2.1 Calling functions from other functions",
    "text": "2.1 Calling functions from other functions\nConsider this program:\ndef print_big_M():\n    print('*   *')\n    print('** **')\n    print('* * *')\n    print('*   *')\n    print('*   *\\n')\n\ndef print_big_O():\n    print('*****')\n    print('*   *')\n    print('*   *')\n    print('*   *')\n    print('*****\\n')\n\ndef print_two_big_Os():\n    print_big_O()\n    print_big_O()\n\nprint_big_M()\nprint_two_big_Os()\n\nYes, we can write our functions that call our own functions.\nIncidentally, did you notice the escape sequences?        ⇒ We improved the output.\n\n\n\n\n\n\n\nExercise 2.7\n\n\n\nUse this idea to rewrite your own animal sound in a file called my_pet_sound2.py. That is, add an additional function to your earlier program my_pet_sound.py that is analogous to print_two_big_Os() above.\n\n\n\nOnce again, let’s trace through some steps: \n\n\n\n\n\n\n\nExercise 2.8\n\n\n\nLook at the example above. What step number is represented by the question mark (?) next to the second print_big_O() inside the print_two_big_Os() function? What line in the program represents step 15? Discuss the program to correctly identify “step-15” with your TAs. There is nothing to submit in this exercise.\n\n\n\nMental execution:\nWe will use the term mental execution for the above exercise of tracing through the execution without actually compiling and running the program.\n\n\n\n\n\n\n\nNote\n\n\n\nMental execution is extremely important in developing programming skill        ⇒ Please be sure to practice this with every program you read or write.\n\n\n\nWe can’t emphasisize this enough. Really.\nRemember:\n\nExecution starts at the top of a program and goes downwards.\nFunction definitions are processed (understood) but not executed.\nWhen a function are invoked, execution “goes” into the function to execute the code in there."
  },
  {
    "objectID": "python_primer/basics.html",
    "href": "python_primer/basics.html",
    "title": "Basics",
    "section": "",
    "text": "Note\n\n\n\nReferencing the content on this webpage:\nBulusu, Kartik V. (2025, January). MAE 6291: Internet-of-Things for Engineers. [Course lecture notes, codes and presentations]. Department of Mechanical and Aerospace Engineering, The George Washington University.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTopic(s)\n\n\nDescription\n\n\nSlide deck(s)\n\n\n\n\n\n\n\nYour First Program\n\n\ndesc here\n\n\nModule 0   Module 1 \n\n\n\n\n\nBooleans, string, built-in functions & types\n\n\ndesc here\n\n\nModule 2 \n\n\n\n\nIntegers & Real Number\n\n\ndesc here\n\n\nModule 4   Module 6 \n\n\n\n\nStrings & Characters\n\n\ndesc here\n\n\nModule 5"
  },
  {
    "objectID": "python_primer/constructs.html",
    "href": "python_primer/constructs.html",
    "title": "Constructs",
    "section": "",
    "text": "Note\n\n\n\nReferencing the content on this webpage:\nBulusu, Kartik V. (2025, January). MAE 6291: Internet-of-Things for Engineers. [Course lecture notes, codes and presentations]. Department of Mechanical and Aerospace Engineering, The George Washington University.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTopic(s)\n\n\nDescription\n\n\nSlide deck(s)\n\n\n\n\n\n\n\nFunctions: A first look\n\n\ndesc here\n\n\nModule 0 \n\n\n\n\nLoops: the for-loop\n\n\ndesc here\n\n\nModule 1 \n\n\n\n\nConditionals\n\n\ndesc here\n\n\nModule 2 \n\n\n\n\nFunctions\n\n\ndesc here\n\n\nModule 3 \n\n\n\n\nwhile loops, I/O\n\n\ndesc here\n\n\nModule 4"
  },
  {
    "objectID": "weekly.html",
    "href": "weekly.html",
    "title": "Announcements",
    "section": "",
    "text": "To be updated as and when we get to hear exciting things during the course!\n\n\n\nPsymetis  [Click on link]\n\n\n\n\nA local northern Virginia start up that builds products integrating embedded AI enabled physical and cyber threat detection.\n\n\n\nInterested in working or interning here? [Click on link]\n\n\n\n\n\n\n\nCyber Truck Challenge  [Click on link]\n\n\n\n\nExciting event held each year for cyber security and systems engineering enthusiasts!\n\n\nConnecting next generation talent with the heavy duty trucking industry to keep vehicles secure."
  },
  {
    "objectID": "schedule_2025.html",
    "href": "schedule_2025.html",
    "title": "Schedule",
    "section": "",
    "text": "Note\n\n\n\nReferencing the content on this webpage:\nBulusu, Kartik V. (2025, January). MAE 6291: Internet-of-Things for Engineers. [Course lecture notes, codes and presentations]. Department of Mechanical and Aerospace Engineering, The George Washington University.\n\n\nSchedule [week-by-week]\n\n\n\n\n\n\nThe course schedule below will be updated on a weekly basis during the Spring 2025 semester.\n\n\n\n\n\n    &lt;ul&gt;\n      &lt;li&gt;Getting familiar with the Raspberry Pi 4B&lt;/li&gt;\n      &lt;li&gt;Python programming using Thonny&lt;/li&gt; \n      &lt;li&gt;&lt;strong&gt;No HW assigned in this week&lt;/strong&gt;&lt;/li&gt;    &lt;/ul&gt;\n  &lt;/td&gt;\n  &lt;td&gt;\n  &lt;/td&gt;\n  &lt;!--- &lt;td&gt;Column content&lt;/td&gt; --&gt;\n&lt;/tr&gt;\n\n&lt;tr class=\"table-secondary\"&gt;\n  &lt;th scope=\"row\"&gt;Week 1 [01/22/2025]&lt;/th&gt;\n  &lt;td&gt;\n    &lt;ul&gt;\n      &lt;li&gt;Sneak preview at the edge-lab and hardware&lt;/li&gt;\n      &lt;li&gt;What is the thing in IoT?&lt;/li&gt;\n      &lt;li&gt;Overview of computing in IoT&lt;/li&gt;\n      &lt;li&gt;What is Edge Computing?&lt;/li&gt;\n\n                &lt;li&gt;Guest lecture: \n      &lt;!-- &lt;li&gt;Overview of computing in IoT&lt;/li&gt;\n      **Edge Cloud** by &lt;a href=\"https://www.seas.gwu.edu/timothy-wood\"\n      target=\"_blank\"&gt;Prof. Tim Wood&lt;/a&gt;, CS Department, GWU. &lt;a href=\"http://faculty.cs.gwu.edu/timwood/\" target=\"_blank\"&gt;Director of GW Cloud Systems Lab&lt;/a&gt; --&gt;\n      &lt;/li&gt;\n      &lt;!-- &lt;li&gt;&lt;a href=\"Week1.qmd\" style=\"color:red;\" target=\"_blank\"&gt;Week-1 Notes&lt;/a&gt;&lt;/li&gt; --&gt;\n    &lt;/ul&gt;\n  &lt;/td&gt;\n  &lt;td&gt;\n    &lt;ul&gt;\n      &lt;li&gt;Setting up the Edge Lab&lt;/li&gt;\n      &lt;li&gt;Understanding the Python installation on the Raspberry Pi&lt;/li&gt;\n      &lt;li&gt;Some basic Python programming constructs&lt;/li&gt;\n      &lt;li&gt;First steps in Raspberry Pi programming [Blinking LEDs]&lt;/li&gt;\n      &lt;li&gt;&lt;strong&gt;No HW assigned in this week&lt;/strong&gt;&lt;/li&gt;    &lt;/ul&gt;\n  &lt;/td&gt;\n  &lt;td&gt;\n  &lt;/td&gt;\n  &lt;!--- &lt;td&gt;Column content&lt;/td&gt; --&gt;\n&lt;/tr&gt;\n&lt;tr class=\"table-secondary\"&gt;\n  &lt;th scope=\"row\" style=\"color:black\"&gt;Week 2 [01/29/2025]&lt;/th&gt;\n  &lt;td&gt;\n    &lt;ul&gt;\n      &lt;li&gt;What is Edge Computing and Edge Compute device&lt;/li&gt;\n      &lt;li&gt;Differences in Cloud and Fog computing&lt;/li&gt;\n      &lt;li style=\"color:black\"&gt;Python skelton code for running programs on the Raspberry Pi&lt;/li&gt;\n      &lt;li style=\"color:black\"&gt;Recap of some programming constructs&lt;/li&gt;\n      &lt;li style=\"color:black\"&gt;Using Thonny to blink LEDs&lt;/li&gt;\n      &lt;li style=\"color:black\"&gt;Using bash script to blink LEDs&lt;/li&gt;\n      &lt;!-- &lt;li style=\"color:black\"&gt;&lt;a href=\"Week2.qmd\" style=\"color:red;\" target=\"_blank\"&gt;Week-2 Notes&lt;/a&gt;&lt;/li&gt; --&gt;\n    &lt;/ul&gt;\n  &lt;/td&gt;\n  &lt;td&gt;\n    &lt;ul&gt;\n      &lt;li style=\"color:black\"&gt;Configuring the GPIO interface on your Raspberry Pi&lt;/li&gt;\n      &lt;li style=\"color:black\"&gt;In-class Raspberry Pi Lab (Blinking LEDs)&lt;/li&gt; \n      &lt;li style=\"color:black\"&gt;Setting up a Python virtual environment [venv] and it's benefits&lt;/li&gt;\n      &lt;li style=\"color:black\"&gt;Installing Python GPIO packages with pip in [venv]&lt;/li&gt;\n      &lt;li style=\"color:black\"&gt;&lt;strong&gt;Blinking LEDs on boot [Graded Lab Activity]&lt;/strong&gt;&lt;/li&gt;\n      &lt;!-- &lt;li&gt;&lt;strong&gt;&lt;a href=\"Downloads/LastName_ExecutiveSummary.docx\" style=\"color:red;\" target=\"_blank\"&gt;HW1: Guest Lecture Summary [Download Template]&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &lt;strong style=\"color:black\"&gt;HW1 Assigned: 02/04/2024; HW1 Due: 02/09/2024&lt;/strong&gt; --&gt;\n    &lt;/ul&gt;\n  &lt;/td&gt;\n  &lt;!--- &lt;td&gt;Column content&lt;/td&gt; --&gt;\n&lt;/tr&gt;\n\n&lt;tr class=\"table-secondary\"&gt;\n  &lt;th scope=\"row\"&gt;Week 3 [02/05/2025]&lt;/th&gt;\n  &lt;td&gt;\n    &lt;ul&gt;\n      &lt;li&gt;IoT Architecture and Ecosystem&lt;/li&gt;\n      &lt;li&gt;Layers in IoT systems - 3 level  layer model&lt;/li&gt;\n      &lt;li&gt;Sensors&lt;/li&gt;\n      &lt;li&gt;Sensor types and considerations&lt;/li&gt;\n      &lt;li&gt;Understanding Analog and Digital Signals&lt;/li&gt;\n      &lt;li&gt;Fundamentals of signal visualization in time and frequency&lt;/li&gt;  \n      &lt;li&gt;Guest lecture: \n      &lt;!-- **Designing high-confidence embedded systems -- operating systems and real-time**&lt;/a&gt; by &lt;a href=\"https://faculty.cs.gwu.edu/gparmer/\"\n      target=\"_blank\"&gt;Prof. Gabe Parmer&lt;/a&gt;, CS Department, GWU. &lt;a href=\"https://composite.seas.gwu.edu\" target=\"_blank\"&gt;Parmer Lab&lt;/a&gt; --&gt;\n      &lt;/li&gt;     \n      &lt;!-- &lt;li&gt;Guest lecture: &lt;a href=\"Week3-Parmer-Lecture.qmd\" target=\"_blank\"&gt;**Designing high-confidence embedded systems -- operating systems and real-time**&lt;/a&gt; by &lt;a href=\"https://faculty.cs.gwu.edu/gparmer/\" target=\"_blank\"&gt;Prof. Gabe Parmer&lt;/a&gt;, CS Department, GWU. &lt;a href=\"https://composite.seas.gwu.edu\" target=\"_blank\"&gt;Parmer Lab&lt;/a&gt;&lt;/li&gt;      --&gt;\n      &lt;!-- &lt;li&gt;&lt;a href=\"Spring2023_MidtermProjects.qmd\" style=\"color:red;\" target=\"_blank\"&gt;Spring 2023 Midterm Project for Review&lt;/a&gt;&lt;/li&gt; --&gt;\n      &lt;!-- &lt;li style=\"color:black\"&gt;&lt;a href=\"Week3.qmd\" style=\"color:red;\" target=\"_blank\"&gt;Week-3 Notes&lt;/a&gt;&lt;/li&gt; --&gt;\n    &lt;/ul&gt;\n  &lt;/td&gt;\n  &lt;td&gt;\n    &lt;ul&gt;\n      &lt;li&gt;In-class Raspberry Pi Lab (Ultrasound sensors)&lt;/li&gt;\n      &lt;li&gt;Proxmity sensing using Thonny IDE&lt;/li&gt;\nProxmity sensing on boot [Graded Lab Activity]\n       &lt;!-- &lt;li&gt;&lt;strong&gt;&lt;a href=\"Downloads/LastName_ExecutiveSummary.docx\" style=\"color:red;\" target=\"_blank\"&gt;HW2.1: Guest Lecture Summary [Download Template]&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &lt;strong&gt;HW2.1 Assigned: 02/09/2024; HW2.1 Due: 02/16/2024&lt;/strong&gt; --&gt;\n       &lt;!-- &lt;li&gt;&lt;strong&gt;&lt;a href=\"Downloads/Midterm_Project_Proposal_CS4907.docx\" style=\"color:red;\" target=\"_blank\"&gt;HW2.2: Midterm Project Proposal [Download Template]&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &lt;strong&gt;HW2.2 Assigned: 02/09/2024; HW2.2 Due: 02/18/2024&lt;/strong&gt; --&gt;\n    &lt;/ul&gt;\n  &lt;/td&gt;\n  &lt;!--- &lt;td&gt;Column content&lt;/td&gt; --&gt;\n&lt;/tr&gt;&lt;tr class=\"table-light\"&gt;\n  &lt;th scope=\"row\"&gt;Week 9 [03/26/2025]&lt;/th&gt;\n  &lt;td&gt;\n    &lt;ul&gt;\n      &lt;li&gt;Guest lecture: **Introduction to the Internet of Things** by  &lt;a href=\"/Lectures_Speakers/RemyPottier-bio-March2024.pdf\" target=\"_blank\"&gt;Remy Pottier&lt;/a&gt;, Director of Innovation, &lt;a href=\"https://arm.com\" target=\"_blank\"&gt;ARM&lt;/a&gt;&lt;/li&gt;\n      &lt;!-- &lt;li&gt;Guest lecture: &lt;a href=\"Week10-Pottier-ARM-Lecture.qmd\" target=\"_blank\"&gt; **Introduction to the Internet of Things**&lt;/a&gt; by  &lt;a href=\"/Lectures_Speakers/RemyPottier-bio-March2024.pdf\" target=\"_blank\"&gt;Remy Pottier&lt;/a&gt;, Director of Innovation, &lt;a href=\"https://arm.com\" target=\"_blank\"&gt;ARM&lt;/a&gt;&lt;/li&gt; --&gt;\n      &lt;li&gt;Review: Set up ESP32 microcontroller and Micropython interpreter&lt;/li&gt;\n      &lt;li&gt;Review: Flashing the ESP32 microcontroller&lt;/li&gt;\n      &lt;!-- &lt;li style=\"color:black\"&gt;&lt;a href=\"Week10.qmd\" style=\"color:red;\" target=\"_blank\"&gt;Week-10 Notes&lt;/a&gt;&lt;/li&gt; --&gt;\n    &lt;/ul&gt;\n  &lt;/td&gt;\n\n  &lt;td&gt;\n    &lt;ul&gt;\n      &lt;li&gt;In-class Raspberry Pi Lab with ESP32&lt;/li&gt;\n      &lt;li&gt;Push-botton LEDs with ESP32 and Raspberry Pi 4B&lt;/li&gt;\n      &lt;li&gt;&lt;strong&gt;Webserver Accesspoint with ESP32 and Raspberry Pi 4B [Graded Lab Activity]&lt;/strong&gt;&lt;/li&gt;\n      &lt;!-- &lt;li&gt;&lt;strong&gt;&lt;a href=\"Downloads/LastName_ExecutiveSummary.docx\" style=\"color:red;\" target=\"_blank\"&gt;HW7: Guest Lecture Summary [Download Template]&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &lt;strong&gt;HW7 Assigned: 03/29/2024; HW7 Due: 04/05/2024&lt;/strong&gt; --&gt;\n    &lt;/ul&gt;\n  &lt;/td&gt;\n  &lt;!--- &lt;td&gt;Column content&lt;/td&gt; --&gt;\n&lt;/tr&gt;\n\n&lt;tr class=\"table-light\"&gt;\n  &lt;th scope=\"row\"&gt;Week 10 [04/02/2025]&lt;/th&gt;\n  &lt;td&gt;\n    &lt;ul&gt;\n      &lt;li&gt;Working with SciPy&lt;/li&gt;\n      &lt;li&gt;Practical introduction to Mosquitto MQTT&lt;/li&gt;\n      &lt;li&gt;Practical introduction to linear algebra in the Edge compute framework&lt;/li&gt;\n      &lt;!-- &lt;li style=\"color:black\"&gt;&lt;a href=\"Week11.qmd\" style=\"color:red;\" target=\"_blank\"&gt;Week-11 Notes&lt;/a&gt;&lt;/li&gt; --&gt;\n    &lt;/ul&gt;\n  &lt;/td&gt;\n  &lt;td&gt;\n    &lt;ul&gt;\n      &lt;li&gt;&lt;strong&gt;In-class Raspberry Pi Lab - Mosquitto MQTT with the Raspberry Pi 4B [Graded Lab Activity]&lt;/strong&gt;&lt;/li&gt;\n      &lt;li&gt;Data smoothing with Scipy library in Python&lt;/li&gt;\n      &lt;li&gt;Examples: Moving average and Savitzky-Golay filters&lt;/li&gt;      &lt;li&gt;&lt;strong&gt;No HW announced and nothing is due on 04/12/2024&lt;/strong&gt;&lt;/li&gt;\n    &lt;/ul&gt;\n  &lt;/td&gt;\n  &lt;!--- &lt;td&gt;Column content&lt;/td&gt; --&gt;\n&lt;/tr&gt;\n\n\n\n\n\n\n\n\n\nDate\n\n\nTopic(s) and readings\n\n\n\\(\\mu\\)-LABs and Assignment(s) due\n\n\n\n\n\n\n\nWeek 0 [01/15/2025]\n\n\n\n\nIoT and Edge Computing [The big pictures]\n\n\nIntroduction to Raspberry Pi and Python programming\n\n\nCourse overview, policies and deliverables\n\n\n\n\n\n\n\n[01/20/2025]\n\n\nMartin Luther King Jr. Day  Inauguration Day No Classes \n\n\n\n\n\n\n\n\n\n\n\n\n\nWeek 4 [02/12/2025]\n\n\n\n\n\nGuest lecture: \n\n\n\nDiscussion of Midterm Projects and setting course for updates and reporting\n\n\n\n\n\n\n\ndweet.io - it’s like the Twitter of Things  dweet\n\n\nFetching data from dweet\n\n\ndweet an LED - Your first IoT program [Graded Lab Activity]\n\n\nRaspberry Pi messaging with Python scripts [Graded Lab Activity]\n\n\n\n\n\n\n\nWeek 5 [02/19/2025]\n\n\n\n\nGuest lecture: Intersection of Industry 4.0 and Technology for Manufacturing in day-to-day applications by Hadi Mohammed, Digital Technologies Director of Factory 4.0 Pratt and Whitney\n\n\n\nIoT Taxonomy - 5 layer model\n\n\nService-oriented model of IoT\n\n\nDiscussion of Midterm Projects and setting course for updates and reporting\n\n\n\n\n\n\n\nIn-class Flask API development [Graded Lab Activity]\n\n\n\n\n\n\n\n\nWeek 6 [02/26/2025]\n\n\n\n\nGuest lecture: Empowering IoT and Edge Computing with Design Thinking by Scott Nuzum, Senior Leader, Innovyz USA\n\n\n\nPractical Introduction to Image processing for Edge Compute Applications\n\n\n\n\n\n\n\nPractical Introduction to Picamera2 OpenCV libraries in Python on the Raspberry Pi 4B\n\n\nSobel, Laplacian, Guassian filtering on Raspberry Pi 4B\n\n\nEdge detection using thresholding and Otsu’s method on Raspberry Pi 4B\n\n\nIn-class Raspberry Pi Lab with PiCamera using OpenCV library [Graded Lab Activity]\n\n\n\n\n\n\n\n\nWeek 7 [03/05/2025]\n\n\nMidterm Project Presentations and Live Demos due. \n\n\n\n\n\n[03/11/2025]\n\n\nMidterm Project Report due.  Sample project report \n\n\n\n\n\n[03/10/2025] to [03/15/2025]\n\n\nSpring Break. No class this week\n\n\n\n\n\nWeek 8 [03/19/2025]\n\n\n\n\nGuest lecture: The Science of Predictive Wisdom by Rob Shaughnessy, CEO, Psymetis Inc.\n\n\nDiscussion on Final Projects and setting course for updates and reporting\n\n\nPending midterm project demos\n\n\nUnderstand key differences between Microprocessors and Microcontrollers\n\n\nIntroduction to Micropython\n\n \n\n\n\n\n\nIntroduction to the ESP32 microcontroller\n\n\nSetting up Micropython interpreter in Thonny IDE\n\n\nFlashing the ESP32 microcontroller\n\n\nIn-class lab set-up of ESP32 microcontroller with the Raspberry Pi 4B [Graded Lab Activity]\n\n   \n\n\n\n\n\n\n\n\n\nWeek 11 [04/09/2025]\n\n\n\n\nImplementation of MQTT using ThingSpeak\n\n\n\n\n\n\n\n\nIn-class Raspberry Pi Lab - Installation of Paho MQTT\n\n\nDemonstration of SenseHat sensor module\n\n\nIn-class Raspberry Pi Lab - Implementation of ThingSpeak MQTT with SenseHat[Graded Lab Activity]\n\n\nNo HW announced and nothing is due on 04/19/2024\n\n\n\n\n\n\n\n\nWeek 12 [04/16/2025]\n\n\n\n\nGuest lecture: Post model Edge AI for Fisheries management by Chris Rodley, CEO and Founder, Snap Information Technologies Ltd., SnapCore\n\n\n\nImplementation of MQTT using Paho\n\n \n\n\n\n\n\nInstallation checks for Paho MQTT\n\n\nDemonstration MQTT using Paho-MQTT\n\n\nIn-class Raspberry Pi Lab – Publish and Subscribe Messages using Paho MQTT [Graded Lab Activity]\n\n\n\n\n\n\nWeek 13 [04/23/2025]\n\n\nFinal Project Presentations and Live Demos due. \n\n\n\n\n\n[04/30/2025]\n\n\nFinal Project Report due.  Sample project report \n\n\n\n\n\n[04/28/2025]\n\n\nLast Day of Classes \n\n\n\n\n\n[04/29/2025]\n\n\nMake-Up Day \n\n\n\n\n\n[04/30/2025]\n\n\nDesignated Monday \n\n\n\n\n\n[05/01/2025] to [05/02/2025]\n\n\nReading Days \n\n\n\n\n\n[05/03/2025] to [05/09/2025]\n\n\nFinal Examinations \n\n\n\n\n\n[05/15/2025] to [05/18/2025]\n\n\nCommencement Weekend"
  },
  {
    "objectID": "Week6-ChowdaryYanamadala-ARM-Lecture.html",
    "href": "Week6-ChowdaryYanamadala-ARM-Lecture.html",
    "title": "Week-6: Chowdary Yanamadala’s Guest Lecture",
    "section": "",
    "text": "This presentation for internal viewing and referencing only. Redistribution of the presentation is not permitted.\nYanamadala, Chowdary (2025, February 26). IoT and Silicon Security: Dissecting a Real-Life IoT Attack, MAE6291: Internet of Things for Engineers. Department of Mechanical and Aerospace Engineering, The George Washington University.https://gwu-mae6291-iot.github.io/spring2025/"
  },
  {
    "objectID": "Week6-ChowdaryYanamadala-ARM-Lecture.html#presentation-slide-deck",
    "href": "Week6-ChowdaryYanamadala-ARM-Lecture.html#presentation-slide-deck",
    "title": "Week-6: Chowdary Yanamadala’s Guest Lecture",
    "section": "Presentation slide deck",
    "text": "Presentation slide deck\n\n\n\n\n\n\nThis presentation was made by Chowdary Yanamadala, Technology Strategist, ARM, for MAE 6291-Spring 2025."
  },
  {
    "objectID": "Week6-ChowdaryYanamadala-ARM-Lecture.html#video-recording",
    "href": "Week6-ChowdaryYanamadala-ARM-Lecture.html#video-recording",
    "title": "Week-6: Chowdary Yanamadala’s Guest Lecture",
    "section": "Video recording",
    "text": "Video recording\n\n\n\n\n\n\nThis link has the recording of the presentation was made by Chowdary Yanamadala, Technology Strategist, ARM, for MAE 6291-Spring 2025.\nIoT and Silicon Security: Dissecting a Real-Life IoT Attack"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Internet-of-Things for Engineers",
    "section": "",
    "text": "From introduction to interface with the physical world\n\n\nReferencing the content on this webpage:\nBulusu, Kartik V. (2025, January). MAE 6291: Internet-of-Things for Engineers. [Course lecture notes, codes and presentations]. Department of Mechanical and Aerospace Engineering, The George Washington University.\n\n\n\n\n\n\n\nImportant\n\n\n\nRegistartion: Course registation is NOW OPEN. \n\n\n\n\nCourse and Contact Information\n\n\n\nMAE 6291: Introduction to IoT and Edge Computing Applications\nSemester: Spring 2025\nCredits: 3\nMeeting times: Wednesday 3:30 PM — 6:00 PM (Lectures and Laboratory every session)\nLocation: SEH B2020\nCourse website \nInstructor information can be found here\n\n\n\n \n\n\n\n\nGithub Repo (updated weekly)\n\ngit clone https://github.com/gwu-mae6291-iot/spring2025_codes.git\n\n\nCourse description\n\n\nThe Internet of Things (IoT) is perceived as a collection of smart, connected devices with the ability to send and receive data; “internet” encapsulates connectivity and “things” are devices (electronic or mechanical) that can be adapted toward connectivity.\nThere is an alternative perception of IoT, as a design methodology that facilitates interoperability and connectivity of physical systems. Edge computing is a strategy for localized analysis of data, ahead in the pipeline of powerful data center- or cloud-based post-processing.\n\n\n\n \n\nIoT by Alla Zaleuska from Noun Project\n\n\n\n\nThis course explores these aspects of IoT framework and expands it with edge computing ideology via practical and hands-on exposure. Students will be exposed to the IoT framework using a variety of sensors, IoT automation and connectivity in \\(\\mu\\)-labs (micro-labs) that incorporate the Raspberry Pi (single-board computer) and Python programming language.\nThe students will learn about how IoT with edge computing capability is going to be the backbone of the Industry 4.0."
  },
  {
    "objectID": "policies.html",
    "href": "policies.html",
    "title": "Course policies",
    "section": "",
    "text": "Note\n\n\n\nReferencing the content on this webpage:\nBulusu, Kartik V. (2025, January). MAE 6291: Internet-of-Things for Engineers. [Course lecture notes, codes and presentations]. Department of Mechanical and Aerospace Engineering, The George Washington University."
  },
  {
    "objectID": "policies.html#hardware-and-software-requirements",
    "href": "policies.html#hardware-and-software-requirements",
    "title": "Course policies",
    "section": "Hardware and Software requirements",
    "text": "Hardware and Software requirements\nThe attendees will be expected to bring their own laptops with the following requirements: \n\nPersonal machines or laptops (only) with:\n\nMac OS 12+ or Windows 10+ operating system\nOne USB A or USB C port that is available for use during the workshop\nWiFi connectivity\nA free version of RealVNC® Viewer software downloaded and installed (See instructions for details).\nChrome web browser downloaded and installed\n\n\nThe attendees will be expected to work  - in small groups using a limited number of hardware components and WiFi connectivity that will be provided."
  },
  {
    "objectID": "policies.html#assignments-and-grades",
    "href": "policies.html#assignments-and-grades",
    "title": "Course policies",
    "section": "Assignments and Grades",
    "text": "Assignments and Grades\n\nGrading - List of what will be counted and percentages (as used in Spring 2024 and can be changed in Spring 2025).\n\n\n\n\n\n\n\n\n\n\n\n\n\nExample of grade breakdown for undergraduate students\n\n\nExample of grade breakdown for graduate students\n\n\n\n\n\n\n\n\nexam by pongsakorn from Noun Project\n\n\n\n\n\n\nIn-class lab work and/or Weekly Quizzes 10%\n\n\nPython programming and other Homework 10%\n\n\nGuest lecture reports 20%\n\n\nProjects (including code, demo, written report and presentation) 50%\n\n\n\n20% Midterm project (Groups of two undergrads at most)\n\n\n30% Final project (Individial)\n\n\n\n\n\n\n\n\nIn-class lab work and/or Weekly Quizzes 10%\n\n\nPython programming and other Homework 10%\n\n\nIn-class or offline presentations 10%\n\n\nGuest lecture reports 10%\n\n\nPaper reviews of selected archival journals will be required in formats provided 10%\n\n\nProjects (including code, demo, written report and presentation) 50%\n\n\n\n20% Midterm project (Individual)\n\n\n30% Final project (Individual)"
  },
  {
    "objectID": "policies.html#grading-scale-subject-to-change-during-spring-2025",
    "href": "policies.html#grading-scale-subject-to-change-during-spring-2025",
    "title": "Course policies",
    "section": "Grading Scale (subject to change during Spring 2025)",
    "text": "Grading Scale (subject to change during Spring 2025)\nThe following grading scale will be applied at the end of the semester to calculate letter grades: 90-100: A, 84-89: A-, 78-83: B+, 72-77: B, 66-71: B-, 60-65: C+, 56-59: C, 52-55: C-, 46-51: D, 0-45: F.\nGrades are “rounded up” to the nearest integer."
  },
  {
    "objectID": "policies.html#additional-important-information-about-grading-policy",
    "href": "policies.html#additional-important-information-about-grading-policy",
    "title": "Course policies",
    "section": "Additional important information about grading policy:",
    "text": "Additional important information about grading policy:\n\nLate submissions on Homework and projects will not be acceptable.\nThere is no required final exam.\nThere may be instances in the presentations where peer-evaluations may be introduced at the discretion of the instructor.\nThe instructor will seeks inputs from the class and decide if course projects will be done individfually, in groups or in a combination."
  },
  {
    "objectID": "policies.html#classroom-policies-and-student-responsibilities",
    "href": "policies.html#classroom-policies-and-student-responsibilities",
    "title": "Course policies",
    "section": "Classroom Policies and Student responsibilities",
    "text": "Classroom Policies and Student responsibilities\n\n\n\n\nThe course is designed with experiential learning modules provided in each session.\n\n\nThis course requires a combination of individual and group work entailing hands-on activities and frequent interactions with the instructional team.\n\n\nThe lectures, labs and office hours are available for interacting with your group and the instructor. We ask that all students adhere to the course policies throughout the duration of the semester.\n\n\n\n\n\nclassroom by Chattapat from Noun Project\n\n\n\n\n\nBe respectful:\n\nListen to the instructor. Keep an open mind to the course material presented.\nLimit the use of personal devices.\nBe aware that you are working in a group.\nRespect each other’s opinion during dicusssions.\n\nBe responsible:\n\nArrive on time.\nSubmit the course deliverables on time.\nHelp your team members\n\nBe a communicator:\n\nObserve, Ask questions and Try out the materials presented during the course.\nCommunicate with your team effectively and politely.\nAn email informing the instructor about your absence is necessary, if you are not planning to attend the lecture and lab session during the course.\n\nThe requests about making up graded-labs or any in-class activities will be considered but with prior initmation and time constraints of the course.\n\n\nBe a problem solver:\n\nExplore options to complete hands-on tasks.\nMake your own notes.\nStay positive about the course outcomes."
  },
  {
    "objectID": "policies.html#communication-during-extenuating-circumstances",
    "href": "policies.html#communication-during-extenuating-circumstances",
    "title": "Course policies",
    "section": "Communication during extenuating circumstances",
    "text": "Communication during extenuating circumstances\nWhen you need to communicate with us directly regarding extenuating circumstances, please use Blackboard to send email or email the instructor directly.\n\nThe instructor will check emails on Mondays and may respond at their earliest convenience."
  },
  {
    "objectID": "policies.html#late-work-policy",
    "href": "policies.html#late-work-policy",
    "title": "Course policies",
    "section": "Late work policy",
    "text": "Late work policy\nLate work is not accepted, with the following exceptions:\n\nExtensions will be granted should there arise due to circumstances beyond your control that impede your ability to complete coursework and turn in a deliverable on time.\nNotify your professor as soon as feasible in these cases. Examples of such circumstances include (but are not limited to) illness, death in the family, and loss of housing.\nTo ensure fairness toward all students, the instructor will request documentation of such circumstances."
  },
  {
    "objectID": "policies.html#justice-equity-diversity-inclusion-jedi-statement",
    "href": "policies.html#justice-equity-diversity-inclusion-jedi-statement",
    "title": "Course policies",
    "section": "Justice, Equity, Diversity, Inclusion (JEDI) statement",
    "text": "Justice, Equity, Diversity, Inclusion (JEDI) statement\n\n\n\n\nThe instructor intends to support the course needs of all students with diverse backgrounds and perspectives in this course.\n\n\nThe instructor believes that the diversity that the students bring to this class is a resource, strength, and an asset.\n\n\nThe instructor will strive to present material that is respectful of the diverse backgrounds and characteristics of the student body and the instructional team.\n\n\nThe course materials and activities presented in this course are intended to be respectful of: age, race, ethnicity, country of origin, language, religion, spiritual practice, sexual orientation, gender identity or expression, introversion/extroversion personality dimensions, and socioeconomic and mental/physical status.\n\n\nEach of us, whether student or instructional team member, is expected to treat all others with respect.\n\n\nDisrespect in any form will not be tolerated.\n\n\n\n\n\nemployee diversity by Bold Yellow from Noun Project\n\n\n\n\n\n\nPlease let the instructor know ways to improve the effectiveness of the course. See JEDI resources for student resources."
  },
  {
    "objectID": "policies.html#use-of-chatgpt-or-any-other-ai-based-models-for-in-class-work-and-deliverables",
    "href": "policies.html#use-of-chatgpt-or-any-other-ai-based-models-for-in-class-work-and-deliverables",
    "title": "Course policies",
    "section": "Use of chatGPT or any other AI-based models for in-class work and deliverables",
    "text": "Use of chatGPT or any other AI-based models for in-class work and deliverables\nThe use of chatGPT or any other generative AI-based models is not permitted by the instructor.\n\nIf there are instances where chatGPT or any other generative AI-based models are allowed they will be explicitly communicated by the instructor on select assignments and programming projects.\nIn all other instances where a course deliverable does not entail permitted use of chatGPT or any other AI-based models, the instructors will have the students sign a disclosure form. This form will require that the students document specific prompts used and the outputs generated.\nAny violations of the aforementioned policy will be reviewed under the Academic Integrity Code and Student Rights and Responsibities\n\nFurthermore, the ethical issues regarding the use of chatGPT or any other AI-based models will be discussed in-class and course policy will be ammended according to the findings. The findings of any such discussions will be summarized and placed in-context of the Academic Integrity Code\n Resources that will guide the course policy changes during the course: \n\n\nchatGPT Course policy formulation\n\n\nchatGPT chatbot\n\n\nHow ChatGPT Could Transform Higher Education"
  },
  {
    "objectID": "policies.html#use-of-electronic-course-materials-and-class-recordings",
    "href": "policies.html#use-of-electronic-course-materials-and-class-recordings",
    "title": "Course policies",
    "section": "Use of Electronic Course Materials and Class Recordings",
    "text": "Use of Electronic Course Materials and Class Recordings\nStudents are encouraged to use electronic course materials, including recorded class sessions (if any), for private personal use in connection with their academic program of study. Electronic course materials and recorded class sessions should not be shared or used for non-course related purposes unless express permission has been granted by the instructor. Students who impermissibly share any electronic course materials are subject to discipline under the Student Code of Conduct. Please contact the instructor if you have questions regarding what constitutes permissible or impermissible use of electronic course materials and/or recorded class sessions. Please contact Disability Support Services if you have questions or need assistance in accessing electronic course materials."
  },
  {
    "objectID": "policies.html#university-policy-on-religious-holidays",
    "href": "policies.html#university-policy-on-religious-holidays",
    "title": "Course policies",
    "section": "University Policy on Religious Holidays",
    "text": "University Policy on Religious Holidays\n\nStudents should notify faculty during the first week of the semester of their intention to be absent from class on their day(s) of religious observance.\nFaculty should extend to these students the courtesy of absence without penalty on such occasions, including permission to make up examinations.\nFaculty who intend to observe a religious holiday should arrange at the beginning of the semester to reschedule missed classes or to make other provisions for their course‐related activities. For details and policy, see “Religious Holidays” at https://provost.gwu.edu/policies-procedures-and-guidelines"
  },
  {
    "objectID": "policies.html#support-for-students-outside-the-classroom",
    "href": "policies.html#support-for-students-outside-the-classroom",
    "title": "Course policies",
    "section": "Support for Students Outside the Classroom",
    "text": "Support for Students Outside the Classroom\nDisability Support Services (DSS) Any student who may need an accommodation based on the potential impact of a disability should contact the Disability Support Services office at 202‐994‐8250 in the Rome Hall, Suite 102, to establish eligibility and to coordinate reasonable accommodations. For additional information please refer to: https://disabilitysupport.gwu.edu/\nMental Health Services 202‐994‐5300 The University’s Mental Health Services offers 24/7 assistance and referral to address students’ personal, social, career, and study skills problems. Services for students include: crisis and emergency mental health consultations confidential assessment, counseling services (individual and small group), and referrals. https://healthcenter.gwu.edu/counseling-and-psychological-services"
  },
  {
    "objectID": "policies.html#academic-integrity-code",
    "href": "policies.html#academic-integrity-code",
    "title": "Course policies",
    "section": "Academic Integrity Code",
    "text": "Academic Integrity Code\nAcademic dishonesty is defined as cheating of any kind, including misrepresenting one’s own work, taking credit for the work of others without crediting them and without appropriate authorization, and the fabrication of information. You are not allowed to collaborate on the home works and lab assignments; for programming projects and hardware lab assignments, you can work in teams only if they are designated as team projects (labs). Unless otherwise specified, you cannot search for solutions or code on the web – but you can use any code that is included in the textbook or lecture notes (but please cite them). I will be using a SW tool that checks for program code similarities – any pair of programs or written reports with greater than 10% similarity will be closely examined.\nThe Office of Academic Integrity maintains a permanent record of the violation. More information is available from the Office of Academic Integrity at https://studentconduct.gwu.edu/academic-integrity. The University’s “Guide of Academic Integrity in Online Learning Environments” is available at https://studentconduct.gwu.edu/guide-academic-integrity-online-learning-environments. Contact information: rights@gwu.edu or 202-994-6757."
  },
  {
    "objectID": "Midterm_Presentations_Spring2024.html",
    "href": "Midterm_Presentations_Spring2024.html",
    "title": "Midterm Presentations from Spring 2024",
    "section": "",
    "text": "Note\n\n\n\nReferencing this presentation:\nBulusu, Kartik V. (2025, March). Midterm Presentations from Spring 2024 semester: MAE 6291 Internet-of-Things for Engineers. [Course lecture notes, codes and presentations]. Department of Mechanical and Aerospace Engineering, The George Washington University.https://gwu-mae6291-iot.github.io/spring2025/\n\n\n\n\n\n\n\n\nCourse materials developed by Prof. Kartik Bulusu for MAE 6291-Spring 2025 and CSCI 4907-Spring 2024."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "Note\n\n\n\nReferencing the content on this webpage:\nBulusu, Kartik V. (2025, January). MAE 6291: Internet-of-Things for Engineers. [Course lecture notes, codes and presentations]. Department of Mechanical and Aerospace Engineering, The George Washington University."
  },
  {
    "objectID": "about.html#goal",
    "href": "about.html#goal",
    "title": "About",
    "section": "Goal",
    "text": "Goal\nThe goal of the course is to introduce the students to the building blocks of the IoT ecosystem with emphasis on Edge Computing."
  },
  {
    "objectID": "about.html#learning-objectives",
    "href": "about.html#learning-objectives",
    "title": "About",
    "section": "Learning objectives",
    "text": "Learning objectives\n\nHands-on knowledge of Raspberry Pi hardware with Python programming language\nExposure to various sensors and actuators with hands-on exercises and in-class IoT projects\nExposure to IoT automation platforms such as ThingSpeak and IFTTT\nImplement Raspberry Pi-based IoT projects\nImplement edge computing strategies with the Raspberry Pi\nGain industry 4.0 exposure via invited speakers and case studies"
  },
  {
    "objectID": "about.html#learning-outcomes",
    "href": "about.html#learning-outcomes",
    "title": "About",
    "section": "Learning Outcomes",
    "text": "Learning Outcomes\nAs a result of completing this course, students will be able to:\n\nUnderstand the IoT framework and implementation using the Raspberry Pi .\nPerform experiments aimed at collecting and analyzing data.\nDesign and write Python programs and work with IoT automation platforms.\nWork on engineering-innovation group projects."
  },
  {
    "objectID": "about.html#additional-learning-outcomes",
    "href": "about.html#additional-learning-outcomes",
    "title": "About",
    "section": "Additional Learning Outcomes",
    "text": "Additional Learning Outcomes\n\nAbility to apply knowledge of programming and mathematics in the IoT framework\nAbility to design and conduct experiments, as well as to analyze and interpret IoT data\nAbility to identify, formulate, and solve physical problems using the IoT framework\nAbility to use the techniques, skills, and modern computing tools necessary for practical implementation of IoT technologies"
  },
  {
    "objectID": "about.html#course-format",
    "href": "about.html#course-format",
    "title": "About",
    "section": "Course format",
    "text": "Course format\n\nLectures on the fundamentals of Raspberry Pi programming using Python programming language.\nLectures on sensing, actuation and automation and IoT connectivity methods.\nCase studies on IoT with Edge computing from a variety of sectors such as Agriculture, Home Automation, Healthcare etc.\nGuest lectures from Industry 4.0 and academic experts\nHands-on in-class work and Project-based deliverables\nInteractive quizzes and instant concept checks\nIndividual and/or group assignments and projects\nMidterm and Final projects"
  },
  {
    "objectID": "about.html#audience-and-credit-level",
    "href": "about.html#audience-and-credit-level",
    "title": "About",
    "section": "Audience and credit-level",
    "text": "Audience and credit-level\nThe course is designed for junior-level undergraduate students as a 3-credit course."
  },
  {
    "objectID": "about.html#prerequisites",
    "href": "about.html#prerequisites",
    "title": "About",
    "section": "Prerequisites",
    "text": "Prerequisites\nNone"
  },
  {
    "objectID": "about.html#workload",
    "href": "about.html#workload",
    "title": "About",
    "section": "Workload",
    "text": "Workload\nThis course will have 150 minutes of lecture time per week, that includes approximately 60-75 minutes of hands-on, microlab work. The course requires between 2-4 hours per week on average for homework assignments or project-based deliverables."
  },
  {
    "objectID": "about.html#textbook-hardware-and-other-course-material",
    "href": "about.html#textbook-hardware-and-other-course-material",
    "title": "About",
    "section": "Textbook, hardware and other course material",
    "text": "Textbook, hardware and other course material\nThere is no textbook requirement for this course. All reading, hardware and course material will be provided by the instructor."
  },
  {
    "objectID": "Week0.html",
    "href": "Week0.html",
    "title": "Week-0",
    "section": "",
    "text": "Note\n\n\n\nReferencing this presentation:\nBulusu, Kartik V. (2025, January). Week-0 Presentation: MAE 6291 Internet-of-Things for Engineers. [Course lecture notes, codes and presentations]. Department of Mechanical and Aerospace Engineering, The George Washington University.https://gwu-mae6291-iot.github.io/spring2025/\n\n\n\n\n\n\n\n\nCourse materials developed by Prof. Kartik Bulusu for MAE 6291-Spring 2025 and CSCI 4907-Spring 2024. Note: Slides cannot be viewed on mobile and handheld devives (such as phones and notebooks)"
  },
  {
    "objectID": "Week3.html",
    "href": "Week3.html",
    "title": "Week-3",
    "section": "",
    "text": "Note\n\n\n\nReferencing this presentation:\nBulusu, Kartik V. (2025, February). Week-3 Presentation: MAE 6291 Internet-of-Things for Engineers. [Course lecture notes, codes and presentations]. Department of Mechanical and Aerospace Engineering, The George Washington University.https://gwu-mae6291-iot.github.io/spring2025/\n\n\n\n\n\n\n\n\nCourse materials developed by Prof. Kartik Bulusu for CSCI 4907-Spring 2024."
  },
  {
    "objectID": "Week6.html",
    "href": "Week6.html",
    "title": "Week-6",
    "section": "",
    "text": "Note\n\n\n\nReferencing this presentation:\nBulusu, Kartik V. (2025, February). Week-6 Presentation: MAE 6291 Internet-of-Things for Engineers. [Course lecture notes, codes and presentations]. Department of Mechanical and Aerospace Engineering, The George Washington University.https://gwu-mae6291-iot.github.io/spring2025/\n\n\n\n\n\n\n\n\nCourse materials developed by Prof. Kartik Bulusu for MAE 6291-Spring 2025 and CSCI 4907-Spring 2024."
  },
  {
    "objectID": "realvnc-windows.html",
    "href": "realvnc-windows.html",
    "title": "RealVNC Installation Guide for Windows",
    "section": "",
    "text": "Note\n\n\n\nReferencing the content in this workshop:\nBulusu, Kartik V. (2024, October 12). Connect, Compute and Communicate! Practical introduction to a DIY internet of things system. [Workshop for the IEEE Northern Virigina Section and IEEE Computer Society]. Department of Mechanical and Aerospace Engineering, The George Washington University.\nThis guide will walk you through the process of installing and setting up RealVNC on your Windows computer to enable remote desktop access."
  },
  {
    "objectID": "realvnc-windows.html#prerequisites",
    "href": "realvnc-windows.html#prerequisites",
    "title": "RealVNC Installation Guide for Windows",
    "section": "Prerequisites",
    "text": "Prerequisites\nBefore you begin, ensure you meet the following requirements:\n\nA Windows computer running a supported version of Windows (e.g., Windows 10, Windows 8, Windows 7).\nInternet access."
  },
  {
    "objectID": "realvnc-windows.html#installation-steps",
    "href": "realvnc-windows.html#installation-steps",
    "title": "RealVNC Installation Guide for Windows",
    "section": "Installation Steps",
    "text": "Installation Steps\n\n0. Download the installation file here\n\n\n1. Install VNC Viewer\nLocate the downloaded installer file (e.g., VNC-Viewer-*.exe) and double-click it to run the installer. Once the installation is complete, click “Finish” to exit the installer.\n\n\n\nOpen Installer\n\n\n\n\n\nRun Installer\n\n\n\n\n3. Follow Installation Wizard\nThe installation wizard will guide you through the installation process. Click on “Customize installation” and “Deselect RealVNC Server” and hit “Install”.\n\n\n\nSelect English as the peferred language\n\n\n\n\n\nClick on Next\n\n\n\n\n\nAccept terms and conditions, and click Next.\n\n\n\n\n\nSelect installation location\n\n\n\n\n\nClick on Install\n\n\n\n\n\nFinish installation\n\n\n\n\n\n\n4. Launch RealVNC Viewer\nOnce the installation is complete, you can launch RealVNC Viewer from Start.\n\n\n\nOpen RealVNC\n\n\n\n\n\nWhen prompted click on “Sign in to get Started and hit cancel button\n\n\nIf prompted to Log in/Sign Up hit “Cancel”, you’re NOT REQUIRED to sign up.\n\n\n\nHit Cancel button"
  },
  {
    "objectID": "git-windows.html",
    "href": "git-windows.html",
    "title": "Git and GitBash Installation Guide for Windows",
    "section": "",
    "text": "This guide will walk you through the process of installing Git and GitBash, on your Windows computer."
  },
  {
    "objectID": "git-windows.html#introduction",
    "href": "git-windows.html#introduction",
    "title": "Git and GitBash Installation Guide for Windows",
    "section": "",
    "text": "This guide will walk you through the process of installing Git and GitBash, on your Windows computer."
  },
  {
    "objectID": "git-windows.html#prerequisites",
    "href": "git-windows.html#prerequisites",
    "title": "Git and GitBash Installation Guide for Windows",
    "section": "Prerequisites",
    "text": "Prerequisites\nBefore you begin, ensure you have the following:\n\nA Windows computer.\nAn internet connection.\nAdequate disk space for the installation."
  },
  {
    "objectID": "git-windows.html#installation-steps",
    "href": "git-windows.html#installation-steps",
    "title": "Git and GitBash Installation Guide for Windows",
    "section": "Installation Steps",
    "text": "Installation Steps\n\n1. Type git bash on your search engine - Google is shown in this example.\n\nGo to the search engine you use on your Windows and search for git bash.\nYou will find the Downloads page on the Git website\nClick on the Downloads link.\n\n\n\n\nClick on the Downloads link\n\n\n\n\n2. Another click to follow\n\nOn the page where you were navigated to, Click on the “Download for Windows”.\n\n\n\n\nClick on `“Download for Windows”\n\n\n\n\n2. Choose the “latest 64-bit version” or one from the “Standalone Installer” on the “Download for Windows” page\n\nOn the page where you were navigated to\n\nClick on the link Click here to download the latest 64-bit version of Git for Windows.\n\nIf your windows-computer is relatively new it should be okay to download the 64-bit version or check on your own if your WindowsOS is a 64-bit version before proceeding with the download. Otherwise,\n\nChoose one of the “Standalone Installer” links to download either the 32-bit Git for Windows Setup or the 64-bit Git for Windows Setup.\n\n\n\n\n\nClick on `“Download for Windows”\n\n\n\n\n3. Run the Installer\n\nLocate the downloaded installer file (usually in the “Downloads” folder in your Windows computer).\nRight-click on the installer executable (.exe) file.\n\n\n\n\nRight-click on installer-exe file\n\n\n\nClick on Run as administrator if you are the administrator on your computer. This step is prefered if you want to get full access to Git-related commands.\n\n\n\n\nRun as “Administrator”\n\n\n\n\n4. Install Git\n\nYou will see the Git Setup Wizard. Click the Install button to begin the installation.\n\n\n\n\nLicense Agreement\n\n\n\nThe installation may take some time depending on your connectivity rate, Patience is the key :)\n\n\n\n\nLicense Agreement\n\n\n\n\n5. Complete the tnstallation\n\nSelect the Finish button to complete the installation.”\n\n\n\n\nComplete the installation"
  },
  {
    "objectID": "git-windows.html#conclusion",
    "href": "git-windows.html#conclusion",
    "title": "Git and GitBash Installation Guide for Windows",
    "section": "Conclusion",
    "text": "Conclusion\nCongratulations! You’ve successfully Git and GitBash for Windows on your Windows computer. This was necessary since Windows computer unlike MacOS or Linux-based computers do not have Git installed. Locate “GitBash” icon in your computer and clikc on it to unleash the power of Git to manage and distribute your programs.\nYou may be pointed to the release notes as shown in the image below. Feel free to explore the content there.\n\n\n\nRelease notes\n\n\nHappy coding!"
  },
  {
    "objectID": "Week5.html",
    "href": "Week5.html",
    "title": "Week-5",
    "section": "",
    "text": "Note\n\n\n\nReferencing this presentation:\nBulusu, Kartik V. (2025, February). Week-5 Presentation: MAE 6291 Internet-of-Things for Engineers. [Course lecture notes, codes and presentations]. Department of Mechanical and Aerospace Engineering, The George Washington University.https://gwu-mae6291-iot.github.io/spring2025/\n\n\n\n\n\n\n\n\nCourse materials developed by Prof. Kartik Bulusu for MAE 6291-Spring 2025 and CSCI 4907-Spring 2024."
  },
  {
    "objectID": "install-editor.html",
    "href": "install-editor.html",
    "title": "Much Needed Software Installations",
    "section": "",
    "text": "Note\n\n\n\nReferencing the content on this webpage:\nBulusu, Kartik V. (2025, January). MAE 6291: Internet-of-Things for Engineers. [Course lecture notes, codes and presentations]. Department of Mechanical and Aerospace Engineering, The George Washington University.\n\n\n\n\n\n\n\n\nImportant\n\n\n\nREAD ME before you start installations on your personal computer:\n\nThe course is desinged with active learning modules with limited number of hardware components. It is required that these software be installed and working on your computers so that you may connect to the hardware provided and execute programs effectively.\nYou are strongly encouraged to bring your own personal machine or laptop and participate with the prerequisites installed.\nOnly Windows 10+ or Macintosh 12+ computers with QWERTY keyboards are supported for this course. The instructor has limited time to troubleshoot any OS-related problems.\n\nThe QWERTY (pronounced KWEHR-tee) keyboard is the standard typewriter and computer keyboard in countries that use a Latin-based alphabet.\n\nLinux OS-based laptops / personal computers and mobile /handheld-devices are not supported this semester for in-class usage on your personal machine.\nRaspberry Pi 4B with Raspberry Pi OS will be in all devices for IoT applications developed during the course.\n\nRaspberry Pi OS is a Unix-like operating system based on the Debian Linux distribution for the Raspberry Pi family of compact single-board computers. Source: wikipedia\n\n\n\n\n\n\nInstallation instructions\nThe following installation are required on your personal computers to move forward in this course amd need to be completed on first meeting day:\n\nSelect an option appropriate for your operating system\n\n\n\nMacOS:\n\n\nStep 1: Install Real VNC Viewer for Mac OS 12+\n\nDonwload the installation file here\nFollow installation instructions here\n\nStep 2: Download and install Thonny Python IDE for macOS\nStep 3: Download and install VS Code for macOS\nStep 4: Install Git for Mac: Check wiki-page to learn what Git is all about\n\nGit may already be installed on your Mac.\nFollow installation instructions to check your git-installation here\n\nStep 5: Create a GitHub account\n\nIf you already have a GitHub account you may skipt this step\nOthewrise, follow instructions here\n\nStep 6: Create a GitHub repo\n\nFollow instructions here\n\nStep 7: Download and install Chrome web browser\n\nSkip this step if you already have Chrome installed on your laptop.\n\nStep 8: Create a free ThingSpeak account\n\nThis step requires Step 2 to be completed as some codes involving web applications may work better on the Chrome browser.\nFollow the steps on this page ThingSpeak to finish account creation.\n\n\n\n\n\n\nWindows:\n\n\nStep 1: Install Real VNC Viewer for Windows 10+\n\nDonwload the installation file here\nFollow installation instructions here\n\nStep 2: Download and install Thonny Python IDE for Windows\nStep 3: Download and install VS Code for Windows\nStep 4: Install Git for Windows: Check wiki-page to learn what Git is all about\n\nFollow installations instructions here\n\nStep 5: Create a GitHub account\n\nIf you already have a GitHub account you may skipt this step\nOthewrise, follow instructions here\n\nStep 6: Create a GitHub repo\n\nFollow instructions here\n\nStep 7: Download and install Chrome web browser\n\nSkip this step if you already have Chrome installed on your laptop.\n\nStep 8: Create a free ThingSpeak account\n\nThis step requires Step 2 to be completed as some codes involving web applications may work better on the Chrome browser.\nFollow the steps on this page ThingSpeak to finish account creation.\n\n\n\n\n\n\n\n\n\n\n\n\nAdditional information on remote access software: VNC® Viewer\nVNC® Viewer is a remote access software application, that facilitates exchange data over the RFB protocol to allow the Viewer to control the Server’s screen remotely.\nSource: Wiki\n\n\nHow do I install VNC® Viewer?\n\nJust run the installer on the device you want to control from and follow the instructions, or there’s MSIs for remote deployment under Windows. If you don’t have permission to install VNC® Viewer on desktop platforms, choose the standalone option.\nSource: Real VNC FAQs\n\nHow do I control a remote computer?\n\nIf you have a keyboard and mouse in front of you, use them as you would normally. We don’t recommed the use of a mobile device for this workshop. However, if you’re on a mobile device, then your touchscreen acts as a mouse trackpad, with gestures mapped to mouse buttons.\nSource: Real VNC FAQs\n\nDo I need to license the software? No. VNC ® Viewer is always free to use. Just accept the EULA the first time you run.\n\nSource: Real VNC FAQs"
  },
  {
    "objectID": "github-repo.html",
    "href": "github-repo.html",
    "title": "Create a git repository (also known as a git repo)",
    "section": "",
    "text": "This guide will walk you through the process of creating a Git repository (or repo) after you successfully created a Github account. \n\n\n\n\n\n\nImportant\n\n\n\nSome basic jargon before we start: In Git or GitHub jargon,\n\nA repository or repo is a collection of files where your work is stored.\nA saved change is called a commit in Git and GitHub.\nGit is a command line software that handles your repos and its version control.\nGitHub is a web interface that helps with your repos and faciliates collarations with version control.\nGitHub uses Git to do everything with repos."
  },
  {
    "objectID": "github-repo.html#introduction",
    "href": "github-repo.html#introduction",
    "title": "Create a git repository (also known as a git repo)",
    "section": "",
    "text": "This guide will walk you through the process of creating a Git repository (or repo) after you successfully created a Github account. \n\n\n\n\n\n\nImportant\n\n\n\nSome basic jargon before we start: In Git or GitHub jargon,\n\nA repository or repo is a collection of files where your work is stored.\nA saved change is called a commit in Git and GitHub.\nGit is a command line software that handles your repos and its version control.\nGitHub is a web interface that helps with your repos and faciliates collarations with version control.\nGitHub uses Git to do everything with repos."
  },
  {
    "objectID": "github-repo.html#prerequisites",
    "href": "github-repo.html#prerequisites",
    "title": "Create a git repository (also known as a git repo)",
    "section": "Prerequisites",
    "text": "Prerequisites\nBefore you begin, ensure you have the following:\n\nAn internet connection.\nCompleted Git installation and version-check.\nCompleted a Github account creation."
  },
  {
    "objectID": "github-repo.html#steps-to-create-a-github-repo",
    "href": "github-repo.html#steps-to-create-a-github-repo",
    "title": "Create a git repository (also known as a git repo)",
    "section": "Steps to create a GitHub repo",
    "text": "Steps to create a GitHub repo\n\n1. Login to your GitHub account, locate and click on the New button\n\nClick on New button!\n\n\n\n\nClick on New button\n\n\n\n\n2. Create a new repository\n2.1 Enter a repository name.\n2.2 Choose to write a brief description (optional).\n2.3 Leave the check-box for “Add a README file” empty. Note: In this example we will create a README in the subsequent steps.\n2.4 Click on Create repository.\n\n\n\nCreate repository\n\n\n\n\n3. Create a README file\n3.1 First, save some important information for future needs\n\nClick on the HTTPS tab, copy the url of your repo and save it a separate document.\nCopy the git-command lines and save them in a separate document.\n\n3.2 Next, click on the README link to start creating a README file\n\nNote: README files are very important for github repos, especially in a collaboration between users.\n\n\n\n\nSave some important information\n\n\n\n\n4. Review the README.md file that was initiated in Step-3\n\nREADME.md file can be edited using Markdown language. The md file extension loosely stands for “Markdown”.\nLearn more about Markdown here and here\nMarkdown is a very simple markup language to create a structure and format for documents. Older and similar languages are TeX and LaTeX.\n\n\n\n\nReview the README.md file\n\n\n\n\n5. Edit the README.md file that was initiated in Step-3\n5.1 Edit the README.md as shown in the image below. - Note: The typed text there is in Markdown format.\n5.2 Once done with editing, click on Commit changes... button. - Note: Github requires files to be committed once changes are made.\n\n\n\nEdit the README.md file amd Commit changes...\n\n\n\n\n6. Type a Commit message and Commit changes\n\nIn Git and GitHub, it is very uesful to type up a Commit message that briefly describes the changes or the saved file.\nClick on Commit changes once done and the Commit message will be associated with saved or committed file.\n\n\n\n\nCommit messageand finally Commit changes"
  },
  {
    "objectID": "github-repo.html#conclusion",
    "href": "github-repo.html#conclusion",
    "title": "Create a git repository (also known as a git repo)",
    "section": "Conclusion",
    "text": "Conclusion\nCongratulations! You’ve successfully created a new repository or repo on Git or GitHub. Your repo is now ready for you to use for collecting your committed files and collaborate with your peer group.\n\n\n\nYour repo\n\n\nFor more information and documentation on GitHub, visit https://docs.github.com/en."
  },
  {
    "objectID": "Week2-Mohammad-PrattWhitney-Lecture.html",
    "href": "Week2-Mohammad-PrattWhitney-Lecture.html",
    "title": "Week-2: Hadi Mohammad’s Guest Lecture",
    "section": "",
    "text": "This presentation for internal viewing and referencing only. Redistribution of the presentation is not permitted.\nMohammad, Hadi (2025, January 29). Industrial Internet of Things (IIOT), MAE6291: Internet of Things for Engineers. Department of Mechanical and Aerospace Engineering, The George Washington University.https://gwu-mae6291-iot.github.io/spring2025/\n\n\n\n\n\n\nThis presentation was made by Hadi Mohammad, Former Digital Technologies Director of Factory 4.0, Pratt & Whitney for MAE 6291-Spring 2025."
  },
  {
    "objectID": "schedule.html",
    "href": "schedule.html",
    "title": "Schedule",
    "section": "",
    "text": "Note\n\n\n\nReferencing the content on this webpage:\nBulusu, Kartik V. (2025, January). MAE 6291: Internet-of-Things for Engineers. [Course lecture notes, codes and presentations]. Department of Mechanical and Aerospace Engineering, The George Washington University.\n\n\nSchedule [week-by-week]\n\n\n\n\n\n\nThe course schedule below will be updated on a weekly basis during the Spring 2025 semester.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nDate\n\n\nTopic(s) and readings\n\n\n\\(\\mu\\)-LABs and Assignment(s) due\n\n\n\n\n\n\n\nWeek 0 [01/15/2025]\n\n\n\n\nIoT and Edge Computing [The big pictures]\n\n\nIntroduction to Raspberry Pi and Python programming\n\n\nCourse overview, policies and deliverables\n\n\nWeek-0 Notes\n\n\n\n\n\n\nGetting familiar with the Raspberry Pi 4B\n\n\nPython programming using Thonny\n\n\nNo HW assigned in this week\n\n\n\n\n\n\n\n\n\n\n[01/20/2025]\n\n\nMartin Luther King Jr. Day  Inauguration Day No Classes \n\n\n\n\n\nWeek 1 [01/22/2025]\n\n\n\n\nSneak preview at the edge-lab and hardware\n\n\nWhat is the thing in IoT?\n\n\nOverview of computing in IoT\n\n\nWhat is Edge Computing?\n\n\n\n\nWeek-1 Notes\n\n\n\n\n\n\nSetting up the Edge Lab\n\n\nUnderstanding the Python installation on the Raspberry Pi\n\n\nSome basic Python programming constructs\n\n\nFirst steps in Raspberry Pi programming: Blinking LEDs [Graded Lab Activity]\n\n\nNo HW assigned in this week\n\n\n\n\n\n\n\n\n\n\nWeek 2 [01/29/2025]\n\n\n\n\nWhat is Edge Computing and Edge Compute device\n\n\nDifferences in Cloud and Fog computing\n\n\nPython skelton code for running programs on the Raspberry Pi\n\n\nRecap of some programming constructs\n\n\nUsing Thonny to blink LEDs\n\n\n\n\n\n\n\nConfiguring the GPIO interface on your Raspberry Pi\n\n\nIn-class Raspberry Pi Lab (Blinking LEDs)\n\n\nHW1: Guest Lecture Summary [Download Template]\n\nHW1 Assigned: 01/29/2025; HW1 Due: 02/05/2025\n\nMidterm Project Proposal [Download Template]\n\nMidterm Proposal Assigned: 01/29/2025; Midterm Proposal Due: 02/12/2025\n\n\n\n\n\n\nWeek 2 [01/29/2025]\n\n\nGuest lecture: Intersection of Industry 4.0 and Technology for Manufacturing in day-to-day applications by  Hadi Mohammed,  Business Relations Manager and Former Digital Technologies Director of Factory 4.0, Pratt and Whitney\n Slide deck: Week2-Mohammad-PrattWhitney-Lecture\n\n\n\n\n\n\nWeek 3 [02/05/2025]\n\n\n\n\nIoT Architecture and Ecosystem\n\n\nLayers in IoT systems - 3 level layer model\n\n\nUsing bash script to blink LEDs\n\n\nWeek-3 Notes\n\n\n\n\n\n\n\n\n\n\nSetting up a Python virtual environment [venv] and it’s benefits\n\n\nInstalling Python GPIO packages with pip in [venv]\n\n\nBlinking LEDs on boot [Graded Lab Activity]\n\n\n \n\n\n\n\n\n\nWeek 4 [02/12/2025]\n\n\n\n\nIoT Architecture and Ecosystem\n\n\nLayers in IoT systems - 3 level layer model\n\n\nSensors\n\n\nSensor types and considerations\n\n\n\n\n\nDiscussion of Midterm Projects and setting course for updates and reporting\n\n\nWeek-4 Notes\n\n\n\n\n\n\ndweet.io - it’s like the Twitter of Things  dweet\n\n\nFetching data from dweet\n\n\ndweet an LED - Your first IoT program [Graded Lab Activity]\n\n\nHW2: Guest Lecture Summary [Download Template]\n\nHW2 Assigned: 02/12/2025; HW2 Due: 02/19/2025\n\nDue to snow-related university closure we will meet on Zoom and postpone all graded lab activities to next week\n\n\n\n\n\n\nWeek 4 [02/12/2025]\n\n\nGuest lecture: Protocol for point-to-point communication between two devices by  Jitish Kolanjery Sr. Software Engineer at Google Speaker’s LinkedIn Profile\nSlide deck and recording: Week4-JitishKolanjery-Google-Lecture\n\n\n\n\n\nWeek 5 [02/19/2025]\n\n\n\n\nRecap: Layers in IoT - 3 layer model\n\n\nAutomating an email feature - Minimalist application layer in your IoT product design\n\n\nDiscussion of Midterm Projects and setting course for updates and reporting\n\n\nWeek-5 Notes\n\n\n\n\n\n\ndweet an LED - Your first IoT program [Graded Lab Activity]\n\n\nRaspberry Pi messaging with Python scripts [Graded Lab Activity]\n\n\nIn-class Flask API development [Graded Lab Activity]\n\n\n HW3: Proximity sensing using Ultrasound sensor on boot\n\n\nHW3 Assigned: 02/19/2025; HW3 Due: 02/26/2025\n\n\n HW4: Flask API output\n\n\nHW4 Assigned: 02/21/2025; HW4 Due: 02/26/2025\n\n\n\n\n\n\nWeek 6 [02/26/2025]\n\n\n\n\nLocalhost\n\n\nUnderstanding Analog and Digital Signals\n\n\nFundamentals of signal visualization in time and frequency\n\n\nGuest lecture: \n\n\nIoT Taxonomy - 5 layer model\n\n\n\nService-oriented model of IoT\n\n\nDiscussion of Midterm Projects and setting course for updates and reporting\n\n\nWeek-6 Notes\n\n\n\n\n\n\nIn-class: run the Flask API code and create a localhost\n\n\nInstall Cloudflare localhost tunnelling software\n\n\nExpose localhost to the internet by a tunnel\n\n\nHW5: Guest Lecture Summary [Download Template]\n\nHW5 Assigned: 02/26/2025; HW5 Due: 03/05/2025\n \n\n\n\n\n\n\nWeek 6 [02/26/2025]\n\n\nGuest lecture: IoT and Silicon Security: Dissecting a Real-Life IoT Attack by Chowdary Yanamadala, Technology Strategist ARM\n\nSlide deck and recording: Week6-ChowdaryYanamadala-ARM-Lecture\n\n\n\n\n\nWeek 7 [03/05/2025]\n\n\nMidterm Project Presentations and Live Demos due.\nSpring 2024 Midterm presentations: Check them out and get inspired!\nDownload: Midterm presentation template\n\n\n\n\n[03/11/2025]\n\n\nMidterm Project Report due. Midterm project report template [Download Template]  Sample project report \n\n\n\n\n\n\n[03/10/2025] to [03/15/2025]\n\n\nSpring Break. No class this week\n\n\n\n\n\n\n\n[04/28/2025]\n\n\nLast Day of Classes \n\n\n\n\n\n[04/29/2025]\n\n\nMake-Up Day \n\n\n\n\n\n[04/30/2025]\n\n\nDesignated Monday \n\n\n\n\n\n[05/01/2025] to [05/02/2025]\n\n\nReading Days \n\n\n\n\n\n[05/03/2025] to [05/09/2025]\n\n\nFinal Examinations  \n\n\n\n\n\n[05/15/2025] to [05/18/2025]\n\n\nCommencement Weekend"
  }
]